#!/usr/bin/env swift

import Foundation

struct Input: Decodable {

    enum Severity: String, Decodable {

        case warning = "Warning"
        case error = "Error"
    }

    let file: String
    let line: Int
    let character: Int?
    let severity: Severity
    let rule_id: String
    let type: String
    let reason: String
}

struct Output: Encodable {

    enum Severity: String, Encodable {

        case notice = "notice"
        case warning = "warning"
        case error = "error"
    }

    let analyzer: String
    let file: String
    let line: Int
    let column: Int
    let severity: Severity
    let identifier: String
    let name: String
    let message: String

    init(_ input: Input) {
        analyzer = "SwiftLint"
        file = input.file
        line = input.line
        column = input.character ?? 0
        switch input.severity {
        case .warning:
            severity = .warning
        case .error:
            severity = .error
        }
        identifier = input.rule_id
        name = input.type
        message = input.reason
    }
}

var stdin: Data = .init()

while let line: String = readLine(strippingNewline: false) {
    stdin.append(Data(line.utf8))
}

do {
    let input: [Input] = try JSONDecoder().decode([Input].self, from: stdin)
    let output: [Output] = input.map(Output.init)
    let data: Data = try JSONEncoder().encode(output)
    let json: String = .init(decoding: data, as: UTF8.self)
    print(json)
} catch {
    let message: String = error.localizedDescription + "\n"
    try FileHandle.standardError.write(contentsOf: Data(message.utf8))
    exit(EXIT_FAILURE)
}
