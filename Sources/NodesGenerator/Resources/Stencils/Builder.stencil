//{{ file_header }}
{% if builder_imports %}

{% for import in builder_imports %}
import {{ import }}
{% endfor %}
{% endif %}
{% if node_name != "App" %}

// MARK: - Dependencies

/// Declares the dependencies required by the component. A code-generated conforming object is made available to the
/// component through its `dependencies` property. Dependencies must be provided by ancestor components on the DI graph.
/// @mockable
@MainActor
{% if dependencies %}
public protocol {{ node_name }}Dependency: Dependency {
    {% for dependency in dependencies %}
    var {{ dependency.name }}: {{ dependency.type }} { get }
    {% endfor %}
}
{% else %}
public protocol {{ node_name }}Dependency: Dependency {}
{% endif %}
{% endif %}

/// Encapsulates arguments passed through the builder base class to its factory build method.
/// - NOTE: An alias to a tuple is supported.
{% if owns_view %}
internal typealias {{ node_name }}DynamicBuildDependency = {{ node_name }}Listener
{% elif node_name == "App" %}
internal typealias {{ node_name }}DynamicBuildDependency = Void
{% else %}
internal typealias {{ node_name }}DynamicBuildDependency = ({{ node_name }}Listener, {{ node_name }}ViewControllable)
{% endif %}

/// Encapsulates arguments passed through the builder base class to the component initializer.
/// - NOTE: An alias to a tuple is supported.
internal typealias {{ node_name }}DynamicComponentDependency = Void

// MARK: - Component

/// Implements a DI graph scope where the dependencies provided to this component and its descendants are defined.
/// The component can also include child component factories, which are used to construct the graph.
{% if node_name == "App" %}
public final class {{ node_name }}Component: BootstrapComponent {
{% else %}
public final class {{ node_name }}Component: Component
<
    {{ node_name }}Dependency
> {
{% endif %}

    // MARK: - Dependencies

    /// Define dependencies as `fileprivate` computed property factories that create new instances when accessed.
    /// Only increase access control to `public` when the component is to provide the dependency to its descendants.
    ///
    ///     fileprivate var exampleFactory: Example {
    ///         Example()
    ///     }
    ///
    /// Store the dependency on the component only when shared state is necessary.
    ///
    ///     fileprivate let example: Example = .init()
    ///
    /// Or use the `shared` helper method which always returns the same instance from the computed property.
    /// This is only necessary for dependencies initialized with other dependencies.
    ///
    ///     fileprivate var example: Example {
    ///         shared { Example(otherDependency: dependency.otherDependency) }
    ///     }
    {% if component_dependencies %}

    {{ component_dependencies }}
    {% endif %}

    {% if is_periphery_comment_enabled %}
    // periphery:ignore
    {% endif %}
    private let dynamicDependency: {{ node_name }}DynamicComponentDependency

    {% if is_periphery_comment_enabled %}
    // periphery:ignore
    {% endif %}
    /// - NOTE: Remove the default value from `dynamicDependency` when its type is not `Void`.
    internal init(
        {% if node_name != "App" %}
        parent: Scope,
        {% endif %}
        dynamicDependency: {{ node_name }}DynamicComponentDependency = ()
    ) {
        self.dynamicDependency = dynamicDependency
        {% if node_name == "App" %}
        super.init()
        {% else %}
        super.init(parent: parent)
        {% endif %}
    }

    // MARK: - Child Components

    /// Define child component factories as 'fileprivate' methods.
    ///
    ///     fileprivate func <name>ComponentFactory() -> <Name>Component {
    ///         <Name>Component(parent: self)
    ///     }
    {% if node_name == "App" %}

    fileprivate func windowSceneComponentFactory() -> WindowSceneComponent {
        WindowSceneComponent(parent: self)
    }
    {% elif node_name == "WindowScene" %}

    fileprivate func windowComponentFactory() -> WindowComponent {
        WindowComponent(parent: self)
    }
    {% elif node_name == "Window" %}

    fileprivate func rootComponentFactory() -> RootComponent {
        RootComponent(parent: self)
    }
    {% endif %}
}

// MARK: - Builder

{% if is_periphery_comment_enabled %}
// periphery:ignore
{% endif %}
internal final class {{ node_name }}BuilderImp: AbstractBuilder
<
    {{ node_name }}Component,
    {{ node_name }}Flow,
    {{ node_name }}DynamicBuildDependency,
    {{ node_name }}DynamicComponentDependency
> {
    {% if plugin_list_name %}

    /// Provides plugin list compatibility.
    internal func build(
        withListener listener: {{ plugin_list_name }}Listener
    ) -> {{ plugin_list_name }}Flow {
        build(withListener: listener as {{ node_name }}Listener)
    }
    {% endif %}

    /// Directs arguments passed through the base class, determining whether each will be provided to its factory build
    /// method or the component initializer.
    {% if node_name == "App" %}
    internal func build() -> {{ node_name }}Flow {
    {% else %}
    internal func build(
        withListener listener: {{ node_name }}Listener{% if not owns_view %}{{ ',' }}
        viewController: {{ node_name }}ViewControllable{% endif +%}
    ) -> {{ node_name }}Flow {
    {% endif %}
        {% if owns_view %}
        let dynamicBuildDependency: {{ node_name }}DynamicBuildDependency = listener
        {% elif node_name == "App" %}
        let dynamicBuildDependency: {{ node_name }}DynamicBuildDependency = ()
        {% else %}
        let dynamicBuildDependency: {{ node_name }}DynamicBuildDependency = (listener, viewController)
        {% endif %}
        let dynamicComponentDependency: {{ node_name }}DynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    /// Implements the factory build method where instances are initialized.
    override internal func build(
        component: {{ node_name }}Component,
        dynamicBuildDependency: {{ node_name }}DynamicBuildDependency
    ) -> {{ node_name }}Flow {
        {% if owns_view %}
        let listener: {{ node_name }}Listener = dynamicBuildDependency
        {% elif node_name != "App" %}
        let listener: {{ node_name }}Listener = dynamicBuildDependency.0
        let viewController: {{ node_name }}ViewControllable = dynamicBuildDependency.1
        {% endif %}
        {% if owns_view %}
        let store: {{ store_prefix }}Store<
            {{ node_name }}State,
            {{ node_name }}ViewState
        > = .init(
            state: .initialState(),
            transform: {{ node_name }}ViewStateFactory()
        )
        {% endif %}
        {% if analytics_properties %}
        let analytics: {{ node_name }}AnalyticsImp = .init(
            {% for property in analytics_properties %}
            {{ property.name }}: component{% if node_name != "App" %}.dependency{% endif %}.{{ property.name }}{% if not forloop.last %}{{ ',' }}
            {% endif %}
            {% endfor +%}
        )
        {% else %}
        let analytics: {{ node_name }}AnalyticsImp = .init()
        {% endif %}
        let context: {{ node_name }}ContextImp = .init(
            workers: [],
            {% if owns_view %}
            store: store,
            {% endif %}
            analytics: analytics{% if node_name == "App" %}{{ ',' }}
            windowScenePublisher: component.appService.windowScenePublisher{% endif +%}
        )
        {% if node_name != "App" %}
        context.listener = listener
        {% endif %}
        {% if owns_view %}
        let viewController: {{ node_name }}ViewController = .init(
            initialState: store.viewState,
            {{ view_state_property_name }}: {{ view_state_transform }}
        )
        viewController.receiver = context
        {% endif %}
        let flow: {{ node_name }}FlowImp = .init(
            context: context{% if node_name != "App" %}{{ ',' }}
            viewController: viewController{% endif +%}{% if flow_properties %}{{ ',' }}
            {% for property in flow_properties %}
            {{ property.name }}: component{% if node_name != "App" %}.dependency{% endif %}.{{ property.name }}{% if not forloop.last %}{{ ',' }}
            {% endif %}
            {% endfor %}
            {% endif +%}{% if node_name == "App" %}{{ ',' }}
            windowSceneBuilder: WindowSceneBuilderImp(componentFactory: component.windowSceneComponentFactory){% endif +%}{% if node_name == "WindowScene" %}{{ ',' }}
            windowBuilder: WindowBuilderImp(componentFactory: component.windowComponentFactory){% endif +%}{% if node_name == "Window" %}{{ ',' }}
            rootBuilder: RootBuilderImp(componentFactory: component.rootComponentFactory){% endif +%}
        )
        context.flow = flow
        return flow
    }
}

extension {{ node_name }}BuilderImp: {{ node_name }}Builder {}
