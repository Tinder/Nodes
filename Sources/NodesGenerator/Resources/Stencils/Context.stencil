//{{ file_header }}
{% if context_imports %}

{% for import in context_imports %}
import {{ import }}
{% endfor %}
{% endif %}
{% if node_name != "App" %}

/// Defines the delegate protocol through which the `Context` triggers callbacks to listeners.
/// @mockable
@MainActor
internal protocol {{ node_name }}Listener: AnyObject {}
{% endif %}

/// Defines the interface between the `Context` and its `Flow`, intended for initiating navigation.
/// @mockable
@MainActor
{% if node_name == "App" %}
internal protocol {{ node_name }}FlowInterface: Flow {
    func attachWindowScene(_ viewController: WindowSceneViewControllable)
    func detachWindowScene(_ viewController: WindowSceneViewControllable)
}
{% elif node_name == "Root" %}
internal protocol {{ node_name }}FlowInterface: Flow {
    func didBecomeReady()
}
{% else %}
internal protocol {{ node_name }}FlowInterface: Flow {}
{% endif %}

{% if context_generic_types %}
internal final class {{ node_name }}ContextImp: AbstractContext
<
    {% for generic_type in context_generic_types %}
    {{ generic_type }}{% if not forloop.last %},
    {% endif %}
    {% endfor %}

> {
{% else %}
internal final class {{ node_name }}ContextImp: AbstractContext {
{% endif %}

    {% if is_periphery_comment_enabled %}
    // periphery:ignore
    {% endif %}
    internal weak var flow: {{ node_name }}FlowInterface?
    {% if node_name != "App" %}

    {% if is_periphery_comment_enabled %}
    // periphery:ignore
    {% endif %}
    internal weak var listener: {{ node_name }}Listener?
    {% endif %}

    {% if owns_view %}
    private let store: Any{{ store_prefix }}StateStore<{{ node_name }}State>
    {% else %}
    {% if is_periphery_comment_enabled %}
    // periphery:ignore
    {% endif %}
    private let state: {{ node_name }}State
    {% endif %}

    {% if is_periphery_comment_enabled %}
    // periphery:ignore
    {% endif %}
    private let analytics: {{ node_name }}Analytics
    {% if node_name == "App" %}

    private let windowScenePublisher: AnyPublisher<WindowSceneEvent, Never>
    {% endif %}

    {% if owns_view %}
    internal init<T: {{ store_prefix }}StateStore>(
    {% else %}
    internal init(
    {% endif %}
        workers: [Worker],
        {% if owns_view %}
        store: T,
        {% endif %}
        analytics: {{ node_name }}Analytics{% if node_name == "App" %}{{ ',' }}
        windowScenePublisher: AnyPublisher<WindowSceneEvent, Never>{% endif +%}
    {% if owns_view %}
    ) where T.State == {{ node_name }}State {
    {% else %}
    ) {
    {% endif %}
        {% if owns_view %}
        self.store = Any{{ store_prefix }}StateStore(store)
        {% else %}
        self.state = .initialState()
        {% endif %}
        self.analytics = analytics
        {% if node_name == "App" %}
        self.windowScenePublisher = windowScenePublisher
        {% endif %}
        super.init(workers: workers)
    }

    /// Override to take action when activating.
    {% if node_name == "App" %}
    override internal func didBecomeActive() {
        subscribe(to: windowScenePublisher)
    }
    {% else %}
    override internal func didBecomeActive() {}
    {% endif %}

    /// Override to take action when deactivating.
    override internal func willResignActive() {}
    {% if node_name == "App" %}

    private func subscribe(to windowScenePublisher: AnyPublisher<WindowSceneEvent, Never>) {
        windowScenePublisher
            .filter(\.willConnect)
            .map(\.windowScene)
            .sink { [weak self] in self?.flow?.attachWindowScene($0) }
            .store(in: &cancellables)
        windowScenePublisher
            .filter(\.didDisconnect)
            .map(\.windowScene)
            .sink { [weak self] in self?.flow?.detachWindowScene($0) }
            .store(in: &cancellables)
    }
    {% endif %}
}

extension {{ node_name }}ContextImp: {{ node_name }}ContextInterface {}
{% if owns_view %}
{% if node_name == "Root" %}

extension {{ node_name }}ContextImp: {{ node_name }}Receiver {

    internal func viewDidAppear() {
        guard !store.state.isReady
        else { return }
        store.state.isReady = true
        flow?.didBecomeReady()
    }
}
{% else %}
extension {{ node_name }}ContextImp: {{ node_name }}Receiver {}
{% endif %}
{% endif %}
