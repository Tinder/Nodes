//{{ file_header }}
{% if flow_imports %}

{% for import in flow_imports %}
import {{ import }}
{% endfor %}
{% endif %}

/// Defines the interface from the `Flow` to its `Context` and is intended for deep-linking use, enabling
/// the `Flow` to trigger events programmatically similarly to user-initiated interactions in the view.
/// @mockable
@MainActor
{% if node_name == "App" %}
internal protocol {{ node_name }}ContextInterface: Context, WindowSceneListener {}
{% elif node_name == "WindowScene" %}
internal protocol {{ node_name }}ContextInterface: Context, WindowListener {}
{% elif node_name == "Window" %}
internal protocol {{ node_name }}ContextInterface: Context, RootListener {}
{% else %}
internal protocol {{ node_name }}ContextInterface: Context {}

/// Defines the interface from the `Flow` to its view in order to present/contain other views. This protocol
/// typically inherits protocols that contain pre-defined behavior for convenience. Add additional methods for
/// custom presentation/containment as desired.
{% if not view_controllable_mock_contents %}
/// @mockable
{% endif %}
@MainActor
internal protocol {{ node_name }}ViewControllable: {{ view_controllable_type }} {}
{% endif %}

internal final class {{ node_name }}FlowImp: AbstractFlow
<
    {{ node_name }}ContextInterface,
    {% if node_name == "App" %}
    Void
    {% else %}
    {{ node_name }}ViewControllable
    {% endif %}
> {
    {% if flow_properties %}

    {% for property in flow_properties %}
    private let {{ property.name }}: {{ property.type }}
    {% endfor %}
    {% endif %}
    {% if node_name == "App" %}

    private let windowSceneBuilder: WindowSceneBuilder
    {% elif node_name == "WindowScene" %}

    private let windowBuilder: WindowBuilder
    {% elif node_name == "Window" %}

    private let rootBuilder: RootBuilder
    {% endif %}

    {% if node_name == "App" or node_name == "WindowScene" or node_name == "Window" or flow_properties %}
    internal init(
    {% else %}
    override internal init(
    {% endif %}
        context: {{ node_name }}ContextInterface{% if node_name != "App" %}{{ ',' }}
        viewController: {{ node_name }}ViewControllable{% endif +%}{% if flow_properties %}{{ ',' }}
        {% for property in flow_properties %}
        {{ property.name }}: {{ property.type }}{% if not forloop.last %}{{ ',' }}
        {% endif %}
        {% endfor %}
        {% endif +%}{% if node_name == "App" %}{{ ',' }}
        windowSceneBuilder: WindowSceneBuilder{% endif +%}{% if node_name == "WindowScene" %}{{ ',' }}
        windowBuilder: WindowBuilder{% endif +%}{% if node_name == "Window" %}{{ ',' }}
        rootBuilder: RootBuilder{% endif +%}
    ) {
        {% for property in flow_properties %}
        self.{{ property.name }} = {{ property.name }}
        {% endfor %}
        {% if node_name == "App" %}
        self.windowSceneBuilder = windowSceneBuilder
        {% elif node_name == "WindowScene" %}
        self.windowBuilder = windowBuilder
        {% elif node_name == "Window" %}
        self.rootBuilder = rootBuilder
        {% endif %}
        {% if node_name == "App" %}
        super.init(context: context, viewController: ())
        {% else %}
        super.init(context: context, viewController: viewController)
        {% endif %}
    }

    /// Override to take action when started.
    {% if node_name == "WindowScene" %}
    override internal func didStart() {
        attachWindow()
    }
    {% elif node_name == "Window" %}
    override internal func didStart() {
        attachRoot()
    }
    {% elif node_name != "Root" %}
    override internal func didStart() {}
    {% endif %}
    {% if owns_view or node_name == "WindowScene" %}

    /// Required for presentation/containment (do not remove).
    {% if node_name == "WindowScene" %}
    internal func getViewController() -> {{ node_name }}ViewControllable {
    {% else %}
    internal func getViewController() -> {{ view_controllable_type }} {
    {% endif %}
        viewController
    }
    {% endif %}
    {% if node_name == "WindowScene" %}

    private func attachWindow() {
        let flow: WindowFlow = windowBuilder.build(withListener: context,
                                                   viewController: viewController.makeWindow())
        attach(starting: flow)
    }
    {% elif node_name == "Window" %}

    private func attachRoot() {
        let flow: RootFlow = rootBuilder.build(withListener: context)
        viewController.makeKeyAndVisible(rootViewController: flow.getViewController())
        attach(starting: flow)
    }
    {% endif %}
}

extension {{ node_name }}FlowImp: {{ node_name }}Flow {}
{% if node_name == "App" %}

extension {{ node_name }}FlowImp: {{ node_name }}FlowInterface {

    internal func attachWindowScene(_ viewController: WindowSceneViewControllable) {
        let flow: WindowSceneFlow = windowSceneBuilder.build(withListener: context,
                                                             viewController: viewController)
        attach(starting: flow)
    }

    internal func detachWindowScene(_ viewController: WindowSceneViewControllable) {
        detach(endingSubFlowsOfType: WindowSceneFlow.self) { $0.getViewController() === viewController }
    }
}
{% elif node_name == "Root" %}

extension {{ node_name }}FlowImp: {{ node_name }}FlowInterface {

    /// Implement to take action when ready.
    internal func didBecomeReady() {}
}
{% else %}
extension {{ node_name }}FlowImp: {{ node_name }}FlowInterface {}
{% endif %}
