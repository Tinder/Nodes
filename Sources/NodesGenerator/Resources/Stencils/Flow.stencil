{{ file_header }}
{% if flow_imports %}

{% for import in flow_imports %}
import {{ import }}
{% endfor %}
{% endif %}

/**
 PURPOSE:
 The interface that the Flow will speak to the Context through. Used for informing the Context of
 presentation lifecycle events, as an example.
 */
/// @mockable
@MainActor
{% if node_name == "App" %}
internal protocol {{ node_name }}ContextInterface: Context, WindowSceneListener {}
{% elif node_name == "WindowScene" %}
internal protocol {{ node_name }}ContextInterface: Context, WindowListener {}
{% elif node_name == "Window" %}
internal protocol {{ node_name }}ContextInterface: Context, RootListener {}
{% else %}
internal protocol {{ node_name }}ContextInterface: Context {}

/**
 PURPOSE:
 The interface of the View used for presenting the View of child Nodes. May inherit additional base
 protocols to add further pre-baked presentation behavior and/or add new methods for custom presentation
 implementation as necessary.
 */
@MainActor
internal protocol {{ node_name }}ViewControllable: {{ view_controllable_type }} {}
{% endif %}

/**
 PURPOSE:
 Responsible for presenting views and starting child Flows, and should not contain business logic.
 */
internal final class {{ node_name }}FlowImp: AbstractFlow
<
    {{ node_name }}ContextInterface,
    {% if node_name == "App" %}
    Void
    {% else %}
    {{ node_name }}ViewControllable
    {% endif %}
> {
    {% if flow_properties %}

    {% for property in flow_properties %}
    private let {{ property.name }}: {{ property.type }}
    {% endfor %}
    {% endif %}
    {% if node_name == "App" %}

    private let windowSceneBuilder: WindowSceneBuilder
    {% elif node_name == "WindowScene" %}

    private let windowBuilder: WindowBuilder
    {% elif node_name == "Window" %}

    private let rootBuilder: RootBuilder
    {% endif %}

    /// The initializer.
    ///
    /// Inject Plugins or Builders into the Flow in order to create sub-Flows.
    /// - Parameters:
    ///   - context: The Context instance
    {% if node_name != "App" %}
    ///   - viewController: The View Controller instance
    {% endif %}
    {% for property in flow_properties %}
    ///   - {{ property.name }}: The {{ property.type }} instance
    {% endfor %}
    {% if node_name == "App" %}
    ///   - windowSceneBuilder: The Window Scene Builder instance
    {% elif node_name == "WindowScene" %}
    ///   - windowBuilder: The Window Builder instance
    {% elif node_name == "Window" %}
    ///   - rootBuilder: The Root Builder instance
    {% endif %}
    {% if node_name == "App" or node_name == "WindowScene" or node_name == "Window" or flow_properties %}
    internal init(
    {% else %}
    override internal init(
    {% endif %}
        context: {{ node_name }}ContextInterface{% if node_name != "App" %}{{ ',' }}
        viewController: {{ node_name }}ViewControllable{% endif +%}{% if flow_properties %}{{ ',' }}
        {% for property in flow_properties %}
        {{ property.name }}: {{ property.type }}{% if not forloop.last %}{{ ',' }}
        {% endif %}
        {% endfor %}
        {% endif +%}{% if node_name == "App" %}{{ ',' }}
        windowSceneBuilder: WindowSceneBuilder{% endif +%}{% if node_name == "WindowScene" %}{{ ',' }}
        windowBuilder: WindowBuilder{% endif +%}{% if node_name == "Window" %}{{ ',' }}
        rootBuilder: RootBuilder{% endif +%}
    ) {
        {% for property in flow_properties %}
        self.{{ property.name }} = {{ property.name }}
        {% endfor %}
        {% if node_name == "App" %}
        self.windowSceneBuilder = windowSceneBuilder
        {% elif node_name == "WindowScene" %}
        self.windowBuilder = windowBuilder
        {% elif node_name == "Window" %}
        self.rootBuilder = rootBuilder
        {% endif %}
        {% if node_name == "App" %}
        super.init(context: context, viewController: ())
        {% else %}
        super.init(context: context, viewController: viewController)
        {% endif %}
    }

    /// Implement logic to execute when the Flow is started.
    {% if node_name == "WindowScene" %}
    override internal func didStart() {
        attachWindow()
    }
    {% elif node_name == "Window" %}
    override internal func didStart() {
        attachRoot()
    }
    {% else %}
    override internal func didStart() {}
    {% endif %}
    {% if owns_view or node_name == "WindowScene" %}

    /// Provides the ``ViewControllable`` instance to the parent `Flow` for display or presentation.
    ///
    /// - Returns: The ``ViewControllable`` instance.
    {% if node_name == "WindowScene" %}
    internal func getViewController() -> {{ node_name }}ViewControllable {
    {% else %}
    internal func getViewController() -> {{ view_controllable_type }} {
    {% endif %}
        viewController
    }
    {% endif %}
    {% if node_name == "WindowScene" %}

    private func attachWindow() {
        let flow: WindowFlow = windowBuilder.build(withListener: context,
                                                   viewController: viewController.makeWindow())
        attach(starting: flow)
    }
    {% elif node_name == "Window" %}

    private func attachRoot() {
        let flow: RootFlow = rootBuilder.build(withListener: context)
        viewController.present(flow.getViewController())
        attach(starting: flow)
    }
    {% endif %}
}

extension {{ node_name }}FlowImp: {{ node_name }}Flow {}
{% if node_name == "App" %}

extension {{ node_name }}FlowImp: {{ node_name }}FlowInterface {

    internal func attachWindowScene(_ viewController: WindowSceneViewControllable) {
        let flow: WindowSceneFlow = windowSceneBuilder.build(withListener: context,
                                                             viewController: viewController)
        attach(starting: flow)
    }

    internal func detachWindowScene(_ viewController: WindowSceneViewControllable) {
        detach(endingSubFlowsOfType: WindowSceneFlow.self) { $0.getViewController() === viewController }
    }
}
{% elif node_name == "Root" %}

extension {{ node_name }}FlowImp: {{ node_name }}FlowInterface {

    /// Implement logic to execute when the Root Flow is ready to attach sub-Flows.
    internal func didBecomeReady() {}
}
{% else %}
extension {{ node_name }}FlowImp: {{ node_name }}FlowInterface {}
{% endif %}
