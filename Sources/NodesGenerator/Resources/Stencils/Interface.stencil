//{{ file_header }}
{% if interface_imports %}

{% for import in interface_imports %}
import {{ import }}
{% endfor %}
{% endif %}

/*
 This file contains the protocols and types of the interface requiring public ACL for use in another module.
 */
{% if node_name != "App" %}

/// Defines the delegate protocol through which the `Context` interfaces with its listener.
/// @mockable
@MainActor
internal protocol {{ node_name }}Listener: AnyObject {}
{% endif %}
{% if node_name != "App" and node_name != "WindowScene" and node_name != "Window" and not owns_view %}

/// Defines the interface between the `Flow` and its view in order to present or contain other views. This protocol
/// typically inherits protocols that include pre-defined behavior for convenience. Add additional methods for custom
/// presentation or containment as desired.
{% if not view_controllable_mock_contents %}
/// @mockable
{% endif %}
@MainActor
internal protocol {{ node_name }}ViewControllable: {{ view_controllable_type }} {}
{% endif %}

/// @mockable
@MainActor
{% if owns_view %}
{% if plugin_list_name %}
internal protocol {{ node_name }}Flow: {{ plugin_list_name }}Flow {}
{% else %}
internal protocol {{ node_name }}Flow: {{ view_controllable_flow_type }} {}
{% endif %}
{% elif node_name == "WindowScene" %}
internal protocol {{ node_name }}Flow: Flow {
    func getViewController() -> {{ node_name }}ViewControllable
}
{% else %}
internal protocol {{ node_name }}Flow: Flow {}
{% endif %}

{% if is_periphery_comment_enabled %}
// periphery:ignore
{% endif %}
/// @mockable
@MainActor
{% if plugin_list_name %}
internal protocol {{ node_name }}Builder: {{ plugin_list_name }}Builder {
    func build(
        withListener listener: {{ node_name }}Listener
    ) -> {{ node_name }}Flow
}
{% else %}
internal protocol {{ node_name }}Builder: AnyObject {
    {% if node_name == "App" %}
    func build() -> {{ node_name }}Flow
    {% else %}
    func build(
        withListener listener: {{ node_name }}Listener{% if not owns_view %}{{ ',' }}
        viewController: {{ node_name }}ViewControllable{% endif +%}
    ) -> {{ node_name }}Flow
    {% endif %}
}
{% endif %}
