//{{ file_header }}
{% if plugin_imports %}

{% for import in plugin_imports %}
import {{ import }}
{% endfor %}
{% endif %}

/// Declares the dependencies required by the component. A code-generated conforming object is made available to the
/// component through its `dependencies` property. Dependencies must be provided by ancestor components on the DI graph.
/// @mockable
@MainActor
public protocol {{ plugin_name }}PluginDependency: Dependency {}

/// Implements a DI graph scope where the dependencies provided to this component and its children are defined.
/// The component can also include child component factories, which are used to construct the DI graph.
public final class {{ plugin_name }}PluginComponent: Component
<
    {{ plugin_name }}PluginDependency
> {

    // MARK: - Dependencies

    /// Define dependencies as `fileprivate` computed property factories that create new instances when accessed,
    /// avoiding shared state. Only increase access control to `public` when the component is to provide the
    /// dependency to its descendants.
    ///
    ///     fileprivate var exampleFactory: Example {
    ///         Example()
    ///     }
    ///
    /// Store the dependency on the component only when shared state is necessary.
    ///
    ///     fileprivate let example: Example = .init()
    ///
    /// Or use the `shared` helper method which will always return the same instance from a computed property.
    /// This is only necessary for dependencies that are initialized with other dependencies.
    ///
    ///     fileprivate var example: Example {
    ///         shared { Example(otherDependency: dependency.otherDependency) }
    ///     }

    // MARK: - Child Components

    /// Define child component factories as 'fileprivate' methods.
    ///
    ///     fileprivate func <name>ComponentFactory() -> <Name>Component {
    ///         <Name>Component(parent: self)
    ///     }

    fileprivate func componentFactory() -> {{ plugin_name }}Component {
        {{ plugin_name }}Component(parent: self)
    }
}

/// Dynamic state from the caller provided to the plugin to use in determining whether it is enabled.
/// - NOTE: An alias to a tuple is supported.
internal typealias {{ plugin_name }}PluginStateType = Void

{% if is_periphery_comment_enabled %}
// periphery:ignore
{% endif %}
/// @mockable
@MainActor
internal protocol {{ plugin_name }}Plugin {
    func create() -> {{ plugin_name }}Builder?
}

{% if is_periphery_comment_enabled %}
// periphery:ignore
{% endif %}
internal final class {{ plugin_name }}PluginImp: Plugin
<
    {{ plugin_name }}PluginComponent,
    {{ plugin_name }}Builder,
    {{ plugin_name }}PluginStateType
> {

    /// Defines the criteria that determine whether the plugin is enabled.
    override internal func isEnabled(
        component: {{ plugin_name }}PluginComponent,
        state: {{ plugin_name }}PluginStateType
    ) -> Bool {
        true
    }

    /// Implements the factory build method where the instance is initialized.
    override internal func build(
        component: {{ plugin_name }}PluginComponent
    ) -> {{ plugin_name }}Builder {
        {{ plugin_name }}BuilderImp(componentFactory: component.componentFactory)
    }
}

extension {{ plugin_name }}PluginImp: {{ plugin_name }}Plugin {}
