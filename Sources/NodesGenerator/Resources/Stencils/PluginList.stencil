//{{ file_header }}
{% if plugin_list_imports %}

{% for import in plugin_list_imports %}
import {{ import }}
{% endfor %}
{% endif %}

{% if is_periphery_comment_enabled %}
// periphery:ignore
{% endif %}
/// PURPOSE:
/// The common Flow interface.
/// @mockable
@MainActor
internal protocol {{ plugin_list_name }}Flow: {{ view_controllable_flow_type }} {}

{% if is_periphery_comment_enabled %}
// periphery:ignore
{% endif %}
/// PURPOSE:
/// The common Listener interface.
/// @mockable
@MainActor
internal protocol {{ plugin_list_name }}Listener: AnyObject {}

{% if is_periphery_comment_enabled %}
// periphery:ignore
{% endif %}
/// PURPOSE:
/// The common Builder interface.
/// @mockable
@MainActor
internal protocol {{ plugin_list_name }}Builder: AnyObject {
    func build(
        withListener listener: {{ plugin_list_name }}Listener
    ) -> {{ plugin_list_name }}Flow
}

/// PURPOSE:
/// Declares the dependencies required by this Plugin List that will be injected (not created by this Plugin List itself).
/// @mockable
@MainActor
public protocol {{ plugin_list_name }}PluginListDependency: Dependency {}

/// PURPOSE:
/// Declares dependencies that are owned by this Plugin List.
public final class {{ plugin_list_name }}PluginListComponent: Component
<
    {{ plugin_list_name }}PluginListDependency
> {

    /*
     *  Dependencies
     *  ============
     *
     *  Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).
     *
     *  fileprivate let example: Example = .init()
     *
     *  Whenever possible, for example when the dependency does not provide shared state, define the property as a
     *  factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     *  Needle compatibility whenever the access control is increased.
     *
     *  fileprivate var exampleFactory: Example {
     *      Example()
     *  }
     *
     *  When shared state is desired but the dependency depends on another dependency, use the `shared` helper method
     *  that always returns the same instance from a computed property.
     *
     *  fileprivate var example: Example {
     *      shared { Example(otherDependency: dependency.otherDependency) }
     *  }
     *
     */

    /*
     *  Child Components
     *  ================
     *
     *  Declare child component factories as 'fileprivate' methods.
     *
     *  fileprivate func <name>PluginComponentFactory() -> <Name>PluginComponent {
     *      <Name>PluginComponent(parent: self)
     *  }
     *
     */
}

/// PURPOSE:
/// The type used for the keys of the Plugin List (can be any `Hashable` type such as `String` or an enumeration).
internal typealias {{ plugin_list_name }}PluginListKeyType = String

/// PURPOSE:
/// To provide additional state used in determining if the plugins are enabled (can be any type relevant to the plugins).
internal typealias {{ plugin_list_name }}PluginListStateType = Void

{% if is_periphery_comment_enabled %}
// periphery:ignore
{% endif %}
/// PURPOSE:
/// The Plugin List protocol (available to mock for testability).
/// @mockable
@MainActor
internal protocol {{ plugin_list_name }}PluginList {
    func createAll() -> [{{ plugin_list_name }}Builder]
    func create() -> {{ plugin_list_name }}Builder?
    func create(key: {{ plugin_list_name }}PluginListKeyType) -> {{ plugin_list_name }}Builder?
}

{% if is_periphery_comment_enabled %}
// periphery:ignore
{% endif %}
/// PURPOSE:
/// Concrete implementation of the Plugin List providing the Plugin collection and (optionally) the creation order.
internal final class {{ plugin_list_name }}PluginListImp: PluginList
<
    {{ plugin_list_name }}PluginListKeyType,
    {{ plugin_list_name }}PluginListComponent,
    {{ plugin_list_name }}Builder,
    {{ plugin_list_name }}PluginListStateType
> {

    /// The method in which the Plugins are paired with keys and wrapped in type erased `AnyPlugin` instances.
    /// - Parameter component: The component instance
    /// - Returns: The Plugin collection
    override internal func plugins(
        component: {{ plugin_list_name }}PluginListComponent
    ) -> KeyValuePairs<{{ plugin_list_name }}PluginListKeyType, AnyPlugin> {
        [:] // Example:
//        [
//            "example": AnyPlugin(ExamplePluginImp(componentFactory: component.examplePluginComponentFactory).create())
//        ]
    }

    /// The method in which a custom creation order may (optionally) be defined.
    ///
    /// There is no need to call `super` when overriding this method unless it is desirable to reference (or modify)
    /// the default order.
    /// - Parameters:
    ///   - component: The component instance
    ///   - state: The state
    /// - Returns: The keys defining the Plugin creation order
    override internal func creationOrder(
        component: {{ plugin_list_name }}PluginListComponent,
        state: {{ plugin_list_name }}PluginListStateType
    ) -> [{{ plugin_list_name }}PluginListKeyType] {
        super.creationOrder(component: component, state: state)
    }
}

extension {{ plugin_list_name }}PluginListImp: {{ plugin_list_name }}PluginList {}
