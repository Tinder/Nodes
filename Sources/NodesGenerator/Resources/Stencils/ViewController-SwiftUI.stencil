//{{ file_header }}
{% if view_controller_imports %}

{% for import in view_controller_imports %}
import {{ import }}
{% endfor %}
{% endif %}

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
/// @mockable
@MainActor
internal protocol {{ node_name }}Receiver: AnyObject {}

/**
 PURPOSE:
 Host of the SwiftUI view.
 */
internal final class {{ node_name }}ViewController: {{ view_controller_type }}
<
    {{ node_name }}View
{% if view_controller_properties or view_controller_methods %}
> {
    {% if view_controller_properties %}

    {{ view_controller_properties|indent:4 }}
    {% endif %}
    {% if view_controller_methods %}

    {{ view_controller_methods|indent:4 }}
    {% endif %}
}
{% else %}
> {}
{% endif %}

extension {{ node_name }}ViewController: {{ node_name }}ViewControllable {}

/**
 PURPOSE:
 Concrete implementation of the View.
 */
internal struct {{ node_name }}View {

    {% if is_periphery_comment_enabled %}
    // periphery:ignore
    {% endif %}
    /// The view receiver.
    internal weak var receiver: {{ node_name }}Receiver?

    /// The initial view state.
    private let initialState: {{ node_name }}ViewState

    /// {{ view_state_property_comment }}.
    private let {{ view_state_property_name }}: {{ publisher_type }}<{{ node_name }}ViewState{% if publisher_failure_type %}, {{ publisher_failure_type }}{% endif %}>

    /// The initializer.
    ///
    /// - Parameters:
    ///   - initialState: The initial view state.
    ///   - {{ view_state_property_name }}: {{ view_state_property_comment }}.
    internal init(
        initialState: {{ node_name }}ViewState,
        {{ view_state_property_name }}: {{ publisher_type }}<{{ node_name }}ViewState{% if publisher_failure_type %}, {{ publisher_failure_type }}{% endif %}>
    ) {
        self.initialState = initialState
        self.{{ view_state_property_name }} = {{ view_state_property_name }}
            {% if view_state_operators %}
            {{ view_state_operators|indent:12 }}
            {% endif %}
    }
}

// MARK: - View

extension {{ node_name }}View: View {

    internal var body: some View {
        WithViewState(initialState: initialState, {{ view_state_property_name }}: {{ view_state_property_name }}) { viewState in
            Text(verbatim: "\(type(of: viewState))")
        }
    }
}

// MARK: - Preview

{% if is_preview_provider_enabled %}
{% if is_periphery_comment_enabled %}
// periphery:ignore
{% endif %}
/**
 PURPOSE:
 The SwiftUI preview (excluded from release builds).
 */
internal struct {{ node_name }}View_Previews: PreviewProvider {

    internal static var previews: some View {
        {{ node_name }}View(
            initialState: {{ node_name }}ViewState(),
            {{ view_state_property_name }}: {{ view_state_empty_factory }}
        )
    }
}
{% else %}
#Preview {
    {{ node_name }}View(
        initialState: {{ node_name }}ViewState(),
        {{ view_state_property_name }}: {{ view_state_empty_factory }}
    )
}
{% endif %}
