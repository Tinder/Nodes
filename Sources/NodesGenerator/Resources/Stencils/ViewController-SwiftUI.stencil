//{{ file_header }}
{% if view_controller_imports %}

{% for import in view_controller_imports %}
import {{ import }}
{% endfor %}
{% endif %}

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
/// @mockable
@MainActor
internal protocol {{ node_name }}Receiver: AnyObject {}

/**
 PURPOSE:
 Host of the SwiftUI view.
 */
internal final class {{ node_name }}ViewController: {{ view_controller_type }}
<
    {{ node_name }}View
{% if view_controller_static_content or view_controller_methods %}
> {
    {% if view_controller_static_content %}

    {{ view_controller_static_content|indent:4 }}
    {% endif %}
    {% if view_controller_methods %}

    {{ view_controller_methods|indent:4 }}
    {% endif %}
}
{% else %}
> {}
{% endif %}

extension {{ node_name }}ViewController: {{ node_name }}ViewControllable {}

/**
 PURPOSE:
 Concrete implementation of the View.
 */
internal struct {{ node_name }}View {

    {% if is_periphery_comment_enabled %}
    // periphery:ignore
    {% endif %}
    /// The view receiver.
    internal weak var receiver: {{ node_name }}Receiver?

    /// The Store instance.
    {% if store_property_wrapper %}
    {{ store_property_wrapper }}
    private var store: Any{{ store_prefix }}ViewStateStore<{{ node_name }}ViewState>
    {% else %}
    private let store: AnyViewStateStore<{{ node_name }}ViewState>
    {% endif %}

    /// The initializer.
    ///
    /// - Parameter store: The Store instance.
    internal init<T: {{ store_prefix }}ViewStateStore>(
        store: T
    ) where T.ViewState == {{ node_name }}ViewState {
        self.store = Any{{ store_prefix }}ViewStateStore(store)
    }
}

// MARK: - View

extension {{ node_name }}View: View {

    internal var body: some View {
        Text(verbatim: "\(type(of: store.viewState))")
    }
}

// MARK: - Preview

{% if is_preview_provider_enabled %}
{% if is_periphery_comment_enabled %}
// periphery:ignore
{% endif %}
/**
 PURPOSE:
 The SwiftUI preview (excluded from release builds).
 */
internal struct {{ node_name }}View_Previews: PreviewProvider {

    internal static var previews: some View {
        {{ node_name }}View(
            store: {{ store_prefix }}PreviewStore(
                viewState: {{ node_name }}ViewState()
            )
        )
    }
}
{% else %}
#Preview {
    {{ node_name }}View(
        store: {{ store_prefix }}PreviewStore(
            viewState: {{ node_name }}ViewState()
        )
    )
}
{% endif %}
