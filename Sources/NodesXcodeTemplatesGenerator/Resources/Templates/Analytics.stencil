{{ file_header }}{% if analytics_imports %}
{% for import in analytics_imports %}
import {{ import }}{% endfor %}{% endif %}

/*
 INSTRUCTIONS:

 Inject an existing analytics tracker (or client), that is defined outside of the Node, into the
 class defined in this file (below).

 Inject the tracker (or client) via a protocol. The protocol for the injected tracker (or client)
 can either be an existing one defined outside of the Node or can be a new one added to this file.
 */

/**
 PURPOSE:
 The interface for analytics tracked by this Node.

 Add requirements to this protocol to provide analytics tracking methods for this Node.
 */
internal protocol {{ node_name }}Analytics: AnyObject {}

/**
 PURPOSE:
 Custom analytics implementation for this Node.
 */{% if not analytics_properties %}
internal final class {{ node_name }}AnalyticsImp {}{% else %}
internal final class {{ node_name }}AnalyticsImp {
    {% for property in analytics_properties %}
    private let {{ property.name }}: {{ property.type }}{% endfor %}

    /// The initializer.{% if analytics_properties.count == 1 %}
    /// - Parameter {{ analytics_properties.first.name }}: The {{ analytics_properties.first.type }} instance{% else %}
    /// - Parameters:{% for property in analytics_properties %}
    ///   - {{ property.name }}: The {{ property.type }} instance{% endfor %}{% endif %}
    init({% for property in analytics_properties %}
        {{ property.name }}: {{ property.type }}{% if not forloop.last %},{% endif %}{% endfor %}
    ) {{ '{' }}{% for property in analytics_properties %}
        self.{{ property.name }} = {{ property.name }}{% endfor %}
    }
}{% endif %}

extension {{ node_name }}AnalyticsImp: {{ node_name }}Analytics {}
