{{ file_header }}
{% if context_imports %}

{% for import in context_imports %}
import {{ import }}
{% endfor %}
{% endif %}

{% if is_documentation_enabled %}
/**
 PURPOSE:
 The Context delegates callbacks to its (external) Listener, typically the parent Context.
 */
{% endif %}
internal protocol {{ node_name }}Listener: AnyObject {}

{% if is_documentation_enabled %}
/**
 PURPOSE:
 The interface that the Context will speak to the Flow through. Used to initiate navigation as
 an example.
 */
{% endif %}
{% if root_node %}
internal protocol {{ node_name }}FlowInterface: Flow {
    func didBecomeReady()
}
{% else %}
internal protocol {{ node_name }}FlowInterface: Flow {}
{% endif %}

{% if is_documentation_enabled %}
/**
 PURPOSE:
 Contains the business logic of the Node. The lifecycle of the Node is bookended between the
 `didBecomeActive` and `willResignActive` methods.
 */
{% endif %}
internal final class {{ node_name }}ContextImp: AbstractContext
<
    {{ cancellable_type }}
> {

    {% if is_periphery_comment_enabled %}
    // periphery:ignore
    {% endif %}
    {% if is_documentation_enabled %}
    /// The Flow instance.
    {% endif %}
    internal weak var flow: {{ node_name }}FlowInterface?

    {% if is_periphery_comment_enabled %}
    // periphery:ignore
    {% endif %}
    {% if is_documentation_enabled %}
    /// The Listener instance.
    {% endif %}
    internal weak var listener: {{ node_name }}Listener?

    {% if is_periphery_comment_enabled and not owns_view %}
    // periphery:ignore
    {% endif %}
    {% if is_documentation_enabled %}
    /// The State instance.
    @Published
    {% endif %}
    internal private(set) var state: {{ node_name }}State

    {% if is_periphery_comment_enabled %}
    // periphery:ignore
    {% endif %}
    {% if is_documentation_enabled %}
    /// The Analytics instance.
    {% endif %}
    private let analytics: {{ node_name }}Analytics
    {% if root_node %}

    private var isReady: Bool = false
    {% endif %}

    {% if is_documentation_enabled %}
    /// The initializer.
    /// - Parameters:
    ///   - workers: The Worker instances
    ///   - analytics: The Analytics instance
    {% endif %}
    internal init(
        workers: [Worker],
        analytics: {{ node_name }}Analytics
    ) {
        self.state = {{ node_name }}State()
        self.analytics = analytics
        super.init(workers: workers)
    }

    {% if is_documentation_enabled %}
    /// Implement logic to execute when the Context becomes active.
    {% endif %}
    override internal func didBecomeActive() {}

    {% if is_documentation_enabled %}
    /// Implement logic to execute when the Context will become inactive.
    {% endif %}
    override internal func willResignActive() {}
}

extension {{ node_name }}ContextImp: {{ node_name }}ContextInterface {}
{% if owns_view %}
{% if root_node %}
extension {{ node_name }}ContextImp: {{ node_name }}Receiver {

    internal func viewDidAppear() {
        guard !isReady
        else { return }
        isReady = true
        flow?.didBecomeReady()
    }
}
{% else %}
extension {{ node_name }}ContextImp: {{ node_name }}Receiver {}
{% endif %}
{% endif %}
