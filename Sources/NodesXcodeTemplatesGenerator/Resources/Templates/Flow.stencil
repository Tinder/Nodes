{{ file_header }}
{% if flow_imports %}

{% for import in flow_imports %}
import {{ import }}
{% endfor %}
{% endif %}

/**
 PURPOSE:
 The interface that the Flow will speak to the Context through. Used for informing the Context of
 presentation lifecycle events, as an example.
 */
internal protocol {{ node_name }}ContextInterface: Context {}

/**
 PURPOSE:
 The interface of the View used for presenting the View of child Nodes. May inherit additional base
 protocols to add further pre-baked presentation behavior and/or add new methods for custom presentation
 implementation as necessary.
 */
internal protocol {{ node_name }}ViewControllable: {{ view_controllable_type }} {}

/**
 PURPOSE:
 Responsible for presenting views and starting child Flows, and should not contain business logic.
 */
internal final class {{ node_name }}FlowImp: AbstractFlow
<
    {{ node_name }}ContextInterface,
    {{ node_name }}ViewControllable
> {

{% if flow_properties %}
{% for property in flow_properties %}
    private let {{ property.name }}: {{ property.type }}
{% endfor %}

{% endif %}
    /// The initializer.
    ///
    /// Inject Plugins or Builders into the Flow in order to create sub-Flows.
    /// - Parameters:
    ///   - context: The Context instance
    ///   - viewController: The View Controller instance
    {% if flow_properties %}{% for property in flow_properties %}
    ///   - {{ property.name }}: The {{ property.type }} instance
    {% endfor %}{% endif %}
    {% if not flow_properties %}
    override internal init(
    {% else %}
    internal init(
    {% endif %}
        context: {{ node_name }}ContextInterface,
        {% if flow_properties %}
        viewController: {{ node_name }}ViewControllable,
        {% for property in flow_properties %}
        {{ property.name }}: {{ property.type }}{% if not forloop.last %}{{ ',' }}
        {% endif %}
        {% endfor %}

        {% else %}
        viewController: {{ node_name }}ViewControllable
        {% endif %}
    ) {
        {% if flow_properties %}
        {% for property in flow_properties %}
        self.{{ property.name }} = {{ property.name }}
        {% endfor %}
        {% endif %}
        super.init(context: context, viewController: viewController)
    }

    /// Implement logic to execute when the Flow is started.
    override internal func didStart() {}
    {% if owns_view %}

    /// Provides the ``ViewControllable`` instance to the parent `Flow` for display or presentation.
    ///
    /// - Returns: The ``ViewControllable`` instance.
    internal func getViewController() -> {{ view_controllable_type }} {
        viewController
    }
    {% endif %}
}

extension {{ node_name }}FlowImp: {{ node_name }}Flow {}
{% if root_node %}
extension {{ node_name }}FlowImp: {{ node_name }}FlowInterface {

    /// Implement logic to execute when the Root Flow is ready to attach sub-Flows.
    internal func didBecomeReady() {}
}
{% else %}
extension {{ node_name }}FlowImp: {{ node_name }}FlowInterface {}
{% endif %}
