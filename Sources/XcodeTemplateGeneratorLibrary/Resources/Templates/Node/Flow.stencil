{{ file_header }}
{% for import in flow_imports %}
import {{ import }}{% endfor %}

/*
 PURPOSE:
 The interface that the Flow will speak to the Context through. Used for informing the Context of
 presentation lifecycle events, as an example.
 */
internal protocol {{ node_name }}ContextInterface: Context {
    var flow: {{ node_name }}FlowInterface? { get set }
    var listener: {{ node_name }}Listener? { get }
}

/*
 PURPOSE:
 The interface of the View used for presenting the View of child Nodes. May inherit additional base
 protocols to add further pre-baked presentation behavior and/or add new methods for custom presentation
 implementation as necessary.
 */
internal protocol {{ node_name }}ViewControllable: {{ view_controllable_type }} {}

/*
 PURPOSE:
 Responsible for presenting views and starting child Flows, and should not contain business logic.
 */
internal final class {{ node_name }}FlowImp: AbstractFlow
    <{{ node_name }}ContextInterface, {{ node_name }}ViewControllable> {
{% if owns_view %}
    /// Provides the parent Node with access to the View so it can be presented.
    public var viewControllable: {{ view_controllable_type }} {
        viewController
    }
{% endif %}{% if flow_properties %}{% for property in flow_properties %}
    private let {{ property.name }}: {{ property.type }}{% endfor %}
{% endif %}
    /// The initializer.
    ///
    /// Inject Plugins or Builders into the Flow in order to create sub-Flows.
    /// - Parameters:
    ///   - context: The Context instance
    ///   - viewController: The View Controller instance{% if flow_properties %}{% for property in flow_properties %}
    ///   - {{ property.name }}: The {{ property.type }} instance{% endfor %}{% endif %}
    {% if not flow_properties %}override {% endif %}internal init(
        context: {{ node_name }}ContextInterface,
        viewController: {{ node_name }}ViewControllable{% if flow_properties %},{% for property in flow_properties %}
        {{ property.name }}: {{ property.type }}{% if not forloop.last %},{% endif %}{% endfor %}{% endif %}
    ) {{ '{' }}{% if flow_properties %}{% for property in flow_properties %}
        self.{{ property.name }} = {{ property.name }}{% endfor %}{% endif %}
        super.init(context: context, viewController: viewController)
        context.flow = self
    }

    /// Implement logic to execute when the Flow is started.
    override internal func didStart() {}
}

extension {{ node_name }}FlowImp: {{ node_name }}Flow {}{% if root_node %}
extension {{ node_name }}FlowImp: {{ node_name }}FlowInterface {

    /// Implement logic to execute when the Root Flow is ready to attach sub-Flows.
    internal func didBecomeReady() {}
}{% else %}
extension {{ node_name }}FlowImp: {{ node_name }}FlowInterface {}{% endif %}
