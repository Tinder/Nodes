{{ file_header }}
{% for import in view_controller_imports %}
import {{ import }}{% endfor %}

/*
 PURPOSE:
 The view state of your View Controller.
 */
internal struct {{ node_name }}ViewState {}

/*
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */{% if root_node %}
internal protocol {{ node_name }}Receiver: AnyObject {
    func viewDidAppear()
}{% else %}
internal protocol {{ node_name }}Receiver: AnyObject {}{% endif %}

/*
 PURPOSE:
 Concrete implementation of the UI.
 */
internal final class {{ node_name }}ViewController: {{ view_controller_type }} {
{% if view_controller_properties %}
    {{ view_controller_properties|indent:4 }}
{% endif %}
    /// The view receiver.
    internal weak var receiver: {{ node_name }}Receiver?

    internal var viewState: {{ node_name }}ViewState = .init() {
        didSet { update(with: viewState) }
    }

    /// The collection of cancellable instances.
    private var cancellables: Set<{{ cancellable_type }}> = .init()

    /// The Analytics instance.
    private let analytics: {{ node_name }}Analytics

    /// The initializer.
    /// - Parameter analytics: The Analytics instance
    internal init(analytics: {{ node_name }}Analytics) {
        self.analytics = analytics
        super.init(nibName: nil, bundle: nil)
    }

    @available(*, unavailable)
    internal required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
{% if view_controller_methods %}
    {{ view_controller_methods|indent:4 }}
{% endif %}
    private func update(with viewState: {{ node_name }}ViewState) {}
}

extension {{ node_name }}ViewController: {{ node_name }}ViewControllable {}
extension {{ node_name }}ViewController: {{ node_name }}Presentable {}
