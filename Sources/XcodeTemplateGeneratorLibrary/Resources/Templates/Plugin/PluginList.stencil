{{ file_header }}
{% for import in plugin_list_imports %}
import {{ import }}{% endfor %}

/*
 PURPOSE:
 The common Flow interface.
 */
internal protocol {{ plugin_list_name }}Flow: {{ view_controllable_flow_type }} {}

/*
 PURPOSE:
 The common Listener interface.
 */
internal protocol {{ plugin_list_name }}Listener: AnyObject {}

/*
 PURPOSE:
 The common Builder interface.
 */
internal protocol {{ plugin_list_name }}Builder: AnyObject {
    func build(withListener listener: {{ plugin_list_name }}Listener) -> {{ plugin_list_name }}Flow
}

/*
 PURPOSE:
 Declares the dependencies required by this Plugin List that will be injected (not created by this Plugin List itself).
 */
internal protocol {{ plugin_list_name }}PluginListDependency: Dependency {}

/*
 PURPOSE:
 Declares dependencies that are owned by this Plugin List.
 */
internal final class {{ plugin_list_name }}PluginListComponent: Component
    <{{ plugin_list_name }}PluginListDependency> {

    /*
     Dependencies
     ============

     Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).

     fileprivate let example: Example = .init()

     Whenever possible, for example when the dependency does not maintain any state, define the property as a
     factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     Needle compatibility whenever the access control is increased.

     fileprivate var exampleFactory: Example {
         Example()
     }

     Only when a singleton simply cannot be avoided and is absolutely necessary, shared instances may be returned.

     fileprivate var example: Example {
         shared { Example() }
     }

     */

    /*
     Child Components
     ================

     Declare child component factories as 'fileprivate' methods.

     fileprivate func childComponentFactory() -> ChildComponent {
         ChildComponent(parent: self)
     }

     */
}

/*
 PURPOSE:
 To provide additional state used in determining if the Plugins are enabled (can be any type relevant to the plugins).
 */
internal typealias {{ plugin_list_name }}PluginListStateType = Void

/*
 PURPOSE:
 The Plugin List protocol (available to mock for testability).
 */
internal protocol {{ plugin_list_name }}PluginList {
    func createAll() -> [{{ plugin_list_name }}Builder]
    func create() -> {{ plugin_list_name }}Builder?
}

internal typealias {{ plugin_list_name }}PluginListType = PluginList
    <
    {{ plugin_list_name }}PluginListComponent,
    {{ plugin_list_name }}Builder,
    {{ plugin_list_name }}PluginListStateType
    >

/*
 PURPOSE:
 Concrete implementation of the Plugin List to construct the Plugin collection.
 */
internal final class {{ plugin_list_name }}PluginListImp:
    {{ plugin_list_name }}PluginListType, {{ plugin_list_name }}PluginList {

    /// The method in which the plugins are wrapped by type erased `Plugin` instances.
    /// - Parameter component: The component instance
    /// - Returns: The plugins array
    override internal func plugins(
        component: {{ plugin_list_name }}PluginListComponent
    ) -> [Plugin] {
        [] // Example:
//        [
//            Plugin(ExamplePluginImp(component: component.examplePluginComponentFactory()).create())
//        ]
    }
}
