{{ file_header }}
{% for import in view_controller_imports %}
import {{ import }}{% endfor %}

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */{% if root_node %}
internal protocol {{ node_name }}Receiver: AnyObject {
    func viewDidAppear()
}{% else %}
internal protocol {{ node_name }}Receiver: AnyObject {}{% endif %}

/**
 PURPOSE:
 Host of the SwiftUI view.
 */
internal final class {{ node_name }}ViewController: AbstractViewHostingController
<
    {{ node_name }}View
> {{ '{' }}{% if view_controller_properties %}

    {{ view_controller_properties|indent:4 }}{% endif %}{% if view_controller_methods %}

    {{ view_controller_methods|indent:4 }}{% endif %}
}

extension {{ node_name }}ViewController: {{ node_name }}ViewControllable {}
{% if view_controller_availability_attribute %}
{{ view_controller_availability_attribute }}
{% endif %}extension {{ node_name }}ViewController: {{ node_name }}Presentable {}

/**
 PURPOSE:
 Concrete implementation of the View.
 */
internal struct {{ node_name }}View: NodesView {

    /// The body of the view.
    internal var body: some View {{ '{' }}
        WithViewState(viewState) { viewState in
            Text(verbatim: "\(type(of: viewState))")
        }
    }

    /// The view receiver.
    internal weak var receiver: {{ node_name }}Receiver?

    /// The Analytics instance.
    internal weak var analytics: {{ node_name }}Analytics?

    /// The view state publisher.
    private let viewState: {{ publisher_type }}<{{ node_name }}ViewState{{ publisher_failure_type }}>

    /// The initializer.
    /// - Parameter viewState: The view state publisher
    internal init(viewState: {{ publisher_type }}<{{ node_name }}ViewState{{ publisher_failure_type }}>) {
        self.viewState = viewState{% if view_state_operators %}
            {{ view_state_operators|indent:12 }}{% endif %}
    }
}

/**
 PURPOSE:
 The SwiftUI preview (excluded from release builds).
 */
internal struct {{ node_name }}View_Previews: PreviewProvider {

    private static let viewState: AnyPublisher<{{ node_name }}ViewState{{ publisher_failure_type }}> =
        Just<{{ node_name }}ViewState>(.initialState).eraseToAnyPublisher()

    internal static var previews: some View {
        {{ node_name }}View(viewState: viewState)
    }
}
