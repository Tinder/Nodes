//
//  Created by <author> on <date>.
//

import Nodes

/**
 PURPOSE:
 The interface that the Flow will speak to the Context through. Used for informing the Context of
 presentation lifecycle events, as an example.
 */
/// @mockable
@MainActor
internal protocol AppContextInterface: Context, SceneListener {}

/**
 PURPOSE:
 Responsible for presenting views and starting child Flows, and should not contain business logic.
 */
internal final class AppFlowImp: AbstractFlow
<
    AppContextInterface,
    Void
> {

    private let sceneBuilder: SceneBuilder

    /// The initializer.
    ///
    /// Inject Plugins or Builders into the Flow in order to create sub-Flows.
    /// - Parameters:
    ///   - context: The Context instance
    ///   - sceneBuilder: The Scene Builder instance
    internal init(
        context: AppContextInterface,
        sceneBuilder: SceneBuilder
    ) {
        self.sceneBuilder = sceneBuilder
        super.init(context: context, viewController: ())
    }

    /// Implement logic to execute when the Flow is started.
    override internal func didStart() {}
}

extension AppFlowImp: AppFlow {}

extension AppFlowImp: AppFlowInterface {

    internal func attachScene(_ viewController: WindowSceneViewControllable) {
        let flow: SceneFlow = sceneBuilder.build(withListener: context,
                                                 viewController: viewController)
        attach(starting: flow)
    }

    internal func detachScene(_ viewController: WindowSceneViewControllable) {
        detach(endingSubFlowsOfType: SceneFlow.self) { $0.getViewController() === viewController }
    }
}
