//
//  Created by <author> on <date>.
//

import Combine
import NeedleFoundation
import Nodes

// MARK: - Dependency

/// Declares the dependencies required by the component. A code-generated conforming object is made available to the
/// component through its `dependencies` property. Dependencies must be provided by ancestor components on the DI graph.
/// @mockable
@MainActor
public protocol RootDependency: Dependency {}

// MARK: - Dynamic Dependencies

/// Encapsulates arguments passed through the builder base class to its factory build method.
/// - NOTE: An alias to a tuple is supported.
internal typealias RootDynamicBuildDependency = RootListener

/// Encapsulates arguments passed through the builder base class to the component initializer.
/// - NOTE: An alias to a tuple is supported.
internal typealias RootDynamicComponentDependency = Void

// MARK: - Component

/// Implements a DI graph scope where the dependencies provided to this component and its descendants are defined.
/// The component can also include child component factories, which are used to construct the graph.
public final class RootComponent: Component
<
    RootDependency
> {

    // MARK: - Dependencies

    // Define dependencies as `fileprivate` computed property factories that create new instances when accessed.
    // Only increase access control to `public` when the component is to provide the dependency to its descendants.
    //
    //     fileprivate var exampleFactory: Example {
    //         Example()
    //     }
    //
    // Store the dependency on the component only when shared state is necessary.
    //
    //     fileprivate let example: Example = .init()
    //
    // Or use the `shared` helper method which always returns the same instance from the computed property.
    // This is only necessary for dependencies initialized with other dependencies.
    //
    //     fileprivate var example: Example {
    //         shared { Example(otherDependency: dependency.otherDependency) }
    //     }

    private let dynamicDependency: RootDynamicComponentDependency

    /// - NOTE: Remove the default value from `dynamicDependency` when its type is not `Void`.
    internal init(
        parent: Scope,
        dynamicDependency: RootDynamicComponentDependency = ()
    ) {
        self.dynamicDependency = dynamicDependency
        super.init(parent: parent)
    }

    // MARK: - Child Components

    // Define child component factories as 'fileprivate' methods.
    //
    //     fileprivate func <name>ComponentFactory() -> <Name>Component {
    //         <Name>Component(parent: self)
    //     }
}

// MARK: - Builder

internal final class RootBuilderImp: AbstractBuilder
<
    RootComponent,
    RootFlow,
    RootDynamicBuildDependency,
    RootDynamicComponentDependency
> {

    /// Directs arguments passed through the base class, determining whether each will be provided to its factory build
    /// method or the component initializer.
    internal func build(
        withListener listener: RootListener
    ) -> RootFlow {
        let dynamicBuildDependency: RootDynamicBuildDependency = listener
        let dynamicComponentDependency: RootDynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    /// Implements the factory build method where instances are initialized.
    override internal func build(
        component: RootComponent,
        dynamicBuildDependency: RootDynamicBuildDependency
    ) -> RootFlow {
        let listener: RootListener = dynamicBuildDependency
        let store: Store<
            RootState,
            RootViewState
        > = .init(
            state: .initialState(),
            transform: RootViewStateFactory()
        )
        let analytics: RootAnalyticsImp = .init()
        let context: RootContextImp = .init(
            workers: [],
            store: store,
            analytics: analytics
        )
        context.listener = listener
        let viewController: RootViewController = .init(
            initialState: store.viewState,
            statePublisher: store.viewStatePublisher
        )
        viewController.receiver = context
        let flow: RootFlowImp = .init(
            context: context,
            viewController: viewController
        )
        context.flow = flow
        return flow
    }
}

extension RootBuilderImp: RootBuilder {}
