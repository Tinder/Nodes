//
//  Created by <author> on <date>.
//

import Combine
import NeedleFoundation
import Nodes

/// @mockable
@MainActor
internal protocol WindowSceneFlow: Flow {
    func getViewController() -> WindowSceneViewControllable
}

// MARK: - Dependency

/// Declares the dependencies required by the component. A code-generated conforming object is made available to the
/// component through its `dependencies` property. Dependencies must be provided by ancestor components on the DI graph.
/// @mockable
@MainActor
public protocol WindowSceneDependency: Dependency {}

// MARK: - Dynamic Dependencies

/// Encapsulates arguments passed through the builder base class to its factory build method.
/// - NOTE: An alias to a tuple is supported.
internal typealias WindowSceneDynamicBuildDependency = (WindowSceneListener, WindowSceneViewControllable)

/// Encapsulates arguments passed through the builder base class to the component initializer.
/// - NOTE: An alias to a tuple is supported.
internal typealias WindowSceneDynamicComponentDependency = Void

// MARK: - Component

/// Implements a DI graph scope where the dependencies provided to this component and its descendants are defined.
/// The component can also include child component factories, which are used to construct the graph.
public final class WindowSceneComponent: Component
<
    WindowSceneDependency
> {

    // MARK: - Dependencies

    /// Define dependencies as `fileprivate` computed property factories that create new instances when accessed.
    /// Only increase access control to `public` when the component is to provide the dependency to its descendants.
    ///
    ///     fileprivate var exampleFactory: Example {
    ///         Example()
    ///     }
    ///
    /// Store the dependency on the component only when shared state is necessary.
    ///
    ///     fileprivate let example: Example = .init()
    ///
    /// Or use the `shared` helper method which always returns the same instance from the computed property.
    /// This is only necessary for dependencies initialized with other dependencies.
    ///
    ///     fileprivate var example: Example {
    ///         shared { Example(otherDependency: dependency.otherDependency) }
    ///     }

    private let dynamicDependency: WindowSceneDynamicComponentDependency

    /// - NOTE: Remove the default value from `dynamicDependency` when its type is not `Void`.
    internal init(
        parent: Scope,
        dynamicDependency: WindowSceneDynamicComponentDependency = ()
    ) {
        self.dynamicDependency = dynamicDependency
        super.init(parent: parent)
    }

    // MARK: - Child Components

    /// Define child component factories as 'fileprivate' methods.
    ///
    ///     fileprivate func <name>ComponentFactory() -> <Name>Component {
    ///         <Name>Component(parent: self)
    ///     }

    fileprivate func windowComponentFactory() -> WindowComponent {
        WindowComponent(parent: self)
    }
}

// MARK: - Builder

/// @mockable
@MainActor
internal protocol WindowSceneBuilder: AnyObject {
    func build(
        withListener listener: WindowSceneListener,
        viewController: WindowSceneViewControllable
    ) -> WindowSceneFlow
}

internal final class WindowSceneBuilderImp: AbstractBuilder
<
    WindowSceneComponent,
    WindowSceneFlow,
    WindowSceneDynamicBuildDependency,
    WindowSceneDynamicComponentDependency
> {

    /// Directs arguments passed through the base class, determining whether each will be provided to its factory build
    /// method or the component initializer.
    internal func build(
        withListener listener: WindowSceneListener,
        viewController: WindowSceneViewControllable
    ) -> WindowSceneFlow {
        let dynamicBuildDependency: WindowSceneDynamicBuildDependency = (listener, viewController)
        let dynamicComponentDependency: WindowSceneDynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    /// Implements the factory build method where instances are initialized.
    override internal func build(
        component: WindowSceneComponent,
        dynamicBuildDependency: WindowSceneDynamicBuildDependency
    ) -> WindowSceneFlow {
        let listener: WindowSceneListener = dynamicBuildDependency.0
        let viewController: WindowSceneViewControllable = dynamicBuildDependency.1
        let analytics: WindowSceneAnalyticsImp = .init()
        let context: WindowSceneContextImp = .init(
            workers: [],
            analytics: analytics
        )
        context.listener = listener
        let flow: WindowSceneFlowImp = .init(
            context: context,
            viewController: viewController,
            windowBuilder: WindowBuilderImp(componentFactory: component.windowComponentFactory)
        )
        context.flow = flow
        return flow
    }
}

extension WindowSceneBuilderImp: WindowSceneBuilder {}
