//
//  Created by <author> on <date>.
//

import Combine
import Nodes

/// The Context delegates callbacks to its (external) Listener, typically the parent Context.
/// @mockable
@MainActor
internal protocol WindowSceneListener: AnyObject {}

/// The interface that the Context will speak to the Flow through. Used to initiate navigation as
/// an example.
/// @mockable
@MainActor
internal protocol WindowSceneFlowInterface: Flow {}

/// Contains the business logic of the Node. The lifecycle of the Node is bookended between the
/// `didBecomeActive` and `willResignActive` methods.
internal final class WindowSceneContextImp: AbstractContext
<
    AnyCancellable
> {

    /// The Flow instance.
    internal weak var flow: WindowSceneFlowInterface?

    /// The Listener instance.
    internal weak var listener: WindowSceneListener?

    /// The State instance.
    private let state: WindowSceneState

    /// The Analytics instance.
    private let analytics: WindowSceneAnalytics

    /// The initializer.
    /// - Parameters:
    ///   - workers: The Worker instances
    ///   - analytics: The Analytics instance
    internal init(
        workers: [Worker],
        analytics: WindowSceneAnalytics
    ) {
        self.state = .initialState()
        self.analytics = analytics
        super.init(workers: workers)
    }

    /// Implement logic to execute when the Context becomes active.
    override internal func didBecomeActive() {}

    /// Implement logic to execute when the Context will become inactive.
    override internal func willResignActive() {}
}

extension WindowSceneContextImp: WindowSceneContextInterface {}
