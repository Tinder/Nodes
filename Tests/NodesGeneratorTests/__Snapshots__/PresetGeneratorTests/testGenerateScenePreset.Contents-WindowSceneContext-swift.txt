//
//  Created by <author> on <date>.
//

import Combine
import Nodes

/// Defines the delegate protocol through which the `Context` interfaces with its listener.
/// @mockable
@MainActor
internal protocol WindowSceneListener: AnyObject {}

/// Defines the interface between the `Context` and its `Flow`, intended for initiating navigation.
/// @mockable
@MainActor
internal protocol WindowSceneFlowInterface: Flow {}

internal final class WindowSceneContextImp: AbstractContext
<
    AnyCancellable
> {

    internal weak var flow: WindowSceneFlowInterface?

    internal weak var listener: WindowSceneListener?

    private let state: WindowSceneState

    private let analytics: WindowSceneAnalytics

    internal init(
        workers: [Worker],
        analytics: WindowSceneAnalytics
    ) {
        self.state = .initialState()
        self.analytics = analytics
        super.init(workers: workers)
    }

    /// Override to take action when activated.
    override internal func didBecomeActive() {}

    /// Override to take action when deactivated.
    override internal func willResignActive() {}
}

extension WindowSceneContextImp: WindowSceneContextInterface {}
