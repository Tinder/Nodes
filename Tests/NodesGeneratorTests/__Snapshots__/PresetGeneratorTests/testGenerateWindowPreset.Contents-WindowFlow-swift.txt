//
//  Created by <author> on <date>.
//

import Nodes

/// The interface that the Flow will speak to the Context through. Used for informing the Context of
/// presentation lifecycle events, as an example.
/// @mockable
@MainActor
internal protocol WindowContextInterface: Context, RootListener {}

/// Responsible for presenting views and starting child Flows, and should not contain business logic.
internal final class WindowFlowImp: AbstractFlow
<
    WindowContextInterface,
    WindowViewControllable
> {

    private let rootBuilder: RootBuilder

    /// The initializer.
    ///
    /// Inject Plugins or Builders into the Flow in order to create sub-Flows.
    internal init(
        context: WindowContextInterface,
        viewController: WindowViewControllable,
        rootBuilder: RootBuilder
    ) {
        self.rootBuilder = rootBuilder
        super.init(context: context, viewController: viewController)
    }

    /// Implement logic to execute when the Flow is started.
    override internal func didStart() {
        attachRoot()
    }

    private func attachRoot() {
        let flow: RootFlow = rootBuilder.build(withListener: context)
        viewController.makeKeyAndVisible(rootViewController: flow.getViewController())
        attach(starting: flow)
    }
}

extension WindowFlowImp: WindowFlow {}
extension WindowFlowImp: WindowFlowInterface {}
