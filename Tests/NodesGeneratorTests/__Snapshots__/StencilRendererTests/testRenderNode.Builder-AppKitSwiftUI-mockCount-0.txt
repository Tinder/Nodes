//<fileHeader>

/// The interface of the Flow.
/// @mockable
@MainActor
internal protocol <nodeName>Flow: <viewControllableFlowType> {}

/// Declares the dependencies required by this Node that will be injected (not created by this Node itself).
/// @mockable
@MainActor
public protocol <nodeName>Dependency: Dependency {}

/// A dependency needed by the Builder (such as a Listener), passed in from the caller (i.e. is not on the DI graph).
///
/// Can be a tuple or struct containing multiple values when necessary.
internal typealias <nodeName>DynamicBuildDependency = <nodeName>Listener

/// A dependency used by the Component itself, passed into the Component's initializer (in the Component factory).
///
/// Can be a tuple or struct containing multiple values when necessary.
internal typealias <nodeName>DynamicComponentDependency = Void

// MARK: - Component

/// Declares dependencies that are owned by this Node.
public final class <nodeName>Component: Component
<
    <nodeName>Dependency
> {

    /*
     *  Dependencies
     *  ============
     *
     *  Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).
     *
     *  fileprivate let example: Example = .init()
     *
     *  Whenever possible, for example when the dependency does not provide shared state, define the property as a
     *  factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     *  Needle compatibility whenever the access control is increased.
     *
     *  fileprivate var exampleFactory: Example {
     *      Example()
     *  }
     *
     *  When shared state is desired but the dependency depends on another dependency, use the `shared` helper method
     *  that always returns the same instance from a computed property.
     *
     *  fileprivate var example: Example {
     *      shared { Example(otherDependency: dependency.otherDependency) }
     *  }
     *
     */

    private let dynamicDependency: <nodeName>DynamicComponentDependency

    /// The initializer.
    ///
    /// Remove `dynamicDependency` default parameter when its type is not `Void`.
    internal init(
        parent: Scope,
        dynamicDependency: <nodeName>DynamicComponentDependency = ()
    ) {
        self.dynamicDependency = dynamicDependency
        super.init(parent: parent)
    }

    /*
     *  Child Components
     *  ================
     *
     *  Declare child component factories as 'fileprivate' methods.
     *
     *  fileprivate func <nodeName>ComponentFactory() -> ChildComponent {
     *      ChildComponent(parent: self)
     *  }
     *
     */
}

// MARK: - Builder

/// The Builder interface (available to mock for testability).
/// @mockable
@MainActor
internal protocol <nodeName>Builder: AnyObject {
    func build(
        withListener listener: <nodeName>Listener
    ) -> <nodeName>Flow
}

/// Concrete implementation of the Builder, where everything is created and associated.
internal final class <nodeName>BuilderImp: AbstractBuilder
<
    <nodeName>Component,
    <nodeName>Flow,
    <nodeName>DynamicBuildDependency,
    <nodeName>DynamicComponentDependency
> {

    /// The purpose of this method is to route input parameters to either the dynamic build dependency and/or
    /// the dynamic component dependency.
    ///
    /// The dynamic dependencies can be tuples or structs containing multiple values when necessary.
    internal func build(
        withListener listener: <nodeName>Listener
    ) -> <nodeName>Flow {
        let dynamicBuildDependency: <nodeName>DynamicBuildDependency = listener
        let dynamicComponentDependency: <nodeName>DynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    /// The factory method in which the Context and Flow are initialized.
    override internal func build(
        component: <nodeName>Component,
        dynamicBuildDependency: <nodeName>DynamicBuildDependency
    ) -> <nodeName>Flow {
        let listener: <nodeName>Listener = dynamicBuildDependency
        let store: Store<
            <nodeName>State,
            <nodeName>ViewState
        > = .init(
            state: .initialState(),
            transform: <nodeName>ViewStateFactory()
        )
        let analytics: <nodeName>AnalyticsImp = .init()
        let context: <nodeName>ContextImp = .init(
            workers: [],
            store: store,
            analytics: analytics
        )
        context.listener = listener
        var view: <nodeName>View = .init(
            store: store
        )
        view.receiver = context
        let viewController: <nodeName>ViewController = .init(
            rootView: view
        )
        let flow: <nodeName>FlowImp = .init(
            context: context,
            viewController: viewController
        )
        context.flow = flow
        return flow
    }
}

extension <nodeName>BuilderImp: <nodeName>Builder {}
