//<fileHeader>

/// Defines the interface between the `Flow` and its `Context`, primarily for deep-linking. This enables the `Flow` to
/// trigger events programmatically, such as simulating user interactions normally initiated in the view.
/// @mockable
@MainActor
internal protocol <nodeName>ContextInterface: Context {}

/// Defines the interface between the `Flow` and its view in order to present or contain other views. This protocol
/// typically inherits protocols that include pre-defined behavior for convenience. Add additional methods for custom
/// presentation or containment as desired.
/// @mockable
@MainActor
internal protocol <nodeName>ViewControllable: <viewControllableType> {}

internal final class <nodeName>FlowImp: AbstractFlow
<
    <nodeName>ContextInterface,
    <nodeName>ViewControllable
> {

    override internal init(
        context: <nodeName>ContextInterface,
        viewController: <nodeName>ViewControllable
    ) {
        super.init(context: context, viewController: viewController)
    }

    /// Override to take action when started.
    override internal func didStart() {}

    /// Required for presentation or containment (do not remove).
    internal func getViewController() -> <viewControllableType> {
        viewController
    }
}

extension <nodeName>FlowImp: <nodeName>Flow {}
extension <nodeName>FlowImp: <nodeName>FlowInterface {}
