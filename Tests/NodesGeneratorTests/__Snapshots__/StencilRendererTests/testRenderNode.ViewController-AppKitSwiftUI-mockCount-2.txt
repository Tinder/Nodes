//<fileHeader>

import <viewControllerImport1>
import <viewControllerImport2>

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
/// @mockable
@MainActor
internal protocol <nodeName>Receiver: AnyObject {}

/**
 PURPOSE:
 Host of the SwiftUI view.
 */
internal final class <nodeName>ViewController: <viewControllerType>
<
    <nodeName>View
> {

    <viewControllerStaticContent>

    <viewControllerMethods>
}

extension <nodeName>ViewController: <nodeName>ViewControllable {}

/**
 PURPOSE:
 Concrete implementation of the View.
 */
internal struct <nodeName>View {

    // periphery:ignore
    /// The view receiver.
    internal weak var receiver: <nodeName>Receiver?

    /// The store.
    private let store: Any<storePrefix>ViewStateStore<<nodeName>ViewState>

    /// The initializer.
    ///
    /// - Parameters: The store instance.
    internal init<T: <storePrefix>ViewStateStore>(
        store: T
    ) where T.ViewState == <nodeName>ViewState {
        self.store = Any<storePrefix>ViewStateStore(store)
    }
}

// MARK: - View

extension <nodeName>View: View {

    internal var body: some View {
        Text(verbatim: "\(type(of: store.viewState))")
    }
}

// MARK: - Preview

// periphery:ignore
/**
 PURPOSE:
 The SwiftUI preview (excluded from release builds).
 */
internal struct <nodeName>View_Previews: PreviewProvider {

    internal static var previews: some View {
        <nodeName>View(
            initialState: <nodeName>ViewState(),
            <viewStatePropertyName>: <viewStateEmptyFactory>
        )
    }
}
