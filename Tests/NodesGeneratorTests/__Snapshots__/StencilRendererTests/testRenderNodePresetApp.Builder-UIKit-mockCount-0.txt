//<fileHeader>

/// Encapsulates arguments passed through the builder base class to its factory build method.
/// - NOTE: An alias to a tuple is supported.
internal typealias AppDynamicBuildDependency = Void

/// Encapsulates arguments passed through the builder base class to the component initializer.
/// - NOTE: An alias to a tuple is supported.
internal typealias AppDynamicComponentDependency = Void

// MARK: - Component

/// Implements a DI graph scope where the dependencies provided to this component and its descendants are defined.
/// The component can also include child component factories, which are used to construct the graph.
public final class AppComponent: BootstrapComponent {

    // MARK: - Dependencies

    /// Define dependencies as `fileprivate` computed property factories that create new instances when accessed.
    /// Only increase access control to `public` when the component is to provide the dependency to its descendants.
    ///
    ///     fileprivate var exampleFactory: Example {
    ///         Example()
    ///     }
    ///
    /// Store the dependency on the component only when shared state is necessary.
    ///
    ///     fileprivate let example: Example = .init()
    ///
    /// Or use the `shared` helper method which always returns the same instance from the computed property.
    /// This is only necessary for dependencies initialized with other dependencies.
    ///
    ///     fileprivate var example: Example {
    ///         shared { Example(otherDependency: dependency.otherDependency) }
    ///     }

    fileprivate let appService: AppService = AppServiceImp()

    private let dynamicDependency: AppDynamicComponentDependency

    /// - NOTE: Remove the default value from `dynamicDependency` when its type is not `Void`.
    internal init(
        dynamicDependency: AppDynamicComponentDependency = ()
    ) {
        self.dynamicDependency = dynamicDependency
        super.init()
    }

    // MARK: - Child Components

    /// Define child component factories as 'fileprivate' methods.
    ///
    ///     fileprivate func <name>ComponentFactory() -> <Name>Component {
    ///         <Name>Component(parent: self)
    ///     }

    fileprivate func windowSceneComponentFactory() -> WindowSceneComponent {
        WindowSceneComponent(parent: self)
    }
}

// MARK: - Builder

internal final class AppBuilderImp: AbstractBuilder
<
    AppComponent,
    AppFlow,
    AppDynamicBuildDependency,
    AppDynamicComponentDependency
> {

    /// Directs arguments passed through the base class, determining whether each will be provided to its factory build
    /// method or the component initializer.
    internal func build() -> AppFlow {
        let dynamicBuildDependency: AppDynamicBuildDependency = ()
        let dynamicComponentDependency: AppDynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    /// Implements the factory build method where instances are initialized.
    override internal func build(
        component: AppComponent,
        dynamicBuildDependency: AppDynamicBuildDependency
    ) -> AppFlow {
        let analytics: AppAnalyticsImp = .init()
        let context: AppContextImp = .init(
            workers: [],
            analytics: analytics,
            windowScenePublisher: component.appService.windowScenePublisher
        )
        let flow: AppFlowImp = .init(
            context: context,
            windowSceneBuilder: WindowSceneBuilderImp(componentFactory: component.windowSceneComponentFactory)
        )
        context.flow = flow
        return flow
    }
}

extension AppBuilderImp: AppBuilder {}
