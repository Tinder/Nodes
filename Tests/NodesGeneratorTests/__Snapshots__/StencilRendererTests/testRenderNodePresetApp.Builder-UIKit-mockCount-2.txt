<fileHeader>

import <builderImport1>
import <builderImport2>

/**
 PURPOSE:
 The interface of the Flow.
 */
/// @mockable
@MainActor
internal protocol AppFlow: Flow {}

/**
 PURPOSE:
 A dependency needed by the Builder (such as a Listener), passed in from the caller (i.e. is not on the DI graph).

 Can be a tuple or struct containing multiple values when necessary.
 */
internal typealias AppDynamicBuildDependency = Void

/**
 PURPOSE:
 A dependency used by the Component itself, passed into the Component's initializer (in the Component factory).

 Can be a tuple or struct containing multiple values when necessary.
 */
internal typealias AppDynamicComponentDependency = Void

// MARK: - Component

/**
 PURPOSE:
 Declares dependencies that are owned by this Node.
 */
public final class AppComponent: BootstrapComponent {

    /*
     Dependencies
     ============

     Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).

     fileprivate let example: Example = .init()

     Whenever possible, for example when the dependency does not provide shared state, define the property as a
     factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     Needle compatibility whenever the access control is increased.

     fileprivate var exampleFactory: Example {
         Example()
     }

     When shared state is desired but the dependency depends on another dependency, use the `shared` helper method
     that always returns the same instance from a computed property.

     fileprivate var example: Example {
         shared { Example(otherDependency: dependency.otherDependency) }
     }

     */

    fileprivate let appService: AppService = AppServiceImp()

    // periphery:ignore
    private let dynamicDependency: AppDynamicComponentDependency

    // periphery:ignore
    /// The initializer.
    ///
    /// Remove `dynamicDependency` default parameter when its type is not `Void`.
    ///
    /// - Parameter dynamicDependency: The dynamic component dependency
    internal init(
        dynamicDependency: AppDynamicComponentDependency = ()
    ) {
        self.dynamicDependency = dynamicDependency
        super.init()
    }

    /*
     Child Components
     ================

     Declare child component factories as 'fileprivate' methods.

     fileprivate func <name>ComponentFactory() -> <Name>Component {
         <Name>Component(parent: self)
     }

     */

    fileprivate func sceneComponentFactory() -> SceneComponent {
        SceneComponent(parent: self)
    }
}

// MARK: - Builder

// periphery:ignore
/**
 PURPOSE:
 The Builder interface (available to mock for testability).
 */
/// @mockable
@MainActor
internal protocol AppBuilder: AnyObject {
    func build() -> AppFlow
}

// periphery:ignore
/**
 PURPOSE:
 Concrete implementation of the Builder, where everything is created and associated.
 */
internal final class AppBuilderImp: AbstractBuilder
<
    AppComponent,
    AppFlow,
    AppDynamicBuildDependency,
    AppDynamicComponentDependency
> {

    /// The purpose of this method is to route input parameters to either the dynamic build dependency and/or
    /// the dynamic component dependency.
    ///
    /// The dynamic dependencies can be tuples or structs containing multiple values when necessary.
    /// - Returns: The Flow instance
    internal func build() -> AppFlow {
        let dynamicBuildDependency: AppDynamicBuildDependency = ()
        let dynamicComponentDependency: AppDynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    /// The factory method in which the Context and Flow are initialized.
    /// - Parameters:
    ///   - component: The component instance
    ///   - dynamicBuildDependency: The dynamic build dependency
    /// - Returns: The Flow instance
    override internal func build(
        component: AppComponent,
        dynamicBuildDependency: AppDynamicBuildDependency
    ) -> AppFlow {
        let analytics: AppAnalyticsImp = .init(
            <analyticsPropertyName1>: component.<analyticsPropertyName1>,
            <analyticsPropertyName2>: component.<analyticsPropertyName2>
        )
        let context: AppContextImp = .init(
            workers: [],
            analytics: analytics,
            windowSceneEvents: component.appService.windowSceneEvents
        )
        let flow: AppFlowImp = .init(
            context: context,
            <flowPropertyName1>: component.<flowPropertyName1>,
            <flowPropertyName2>: component.<flowPropertyName2>,
            sceneBuilder: SceneBuilderImp(componentFactory: component.sceneComponentFactory)
        )
        context.flow = flow
        return flow
    }
}

extension AppBuilderImp: AppBuilder {}
