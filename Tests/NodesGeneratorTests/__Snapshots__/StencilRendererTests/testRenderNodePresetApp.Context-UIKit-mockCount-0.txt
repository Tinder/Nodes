//<fileHeader>

/// Defines the interface between the `Context` and its `Flow`, intended for initiating navigation.
/// @mockable
@MainActor
internal protocol AppFlowInterface: Flow {
    func attachWindowScene(_ viewController: WindowSceneViewControllable)
    func detachWindowScene(_ viewController: WindowSceneViewControllable)
}

internal final class AppContextImp: AbstractContext {

    internal weak var flow: AppFlowInterface?

    private let state: AppState

    private let analytics: AppAnalytics

    private let windowScenePublisher: AnyPublisher<WindowSceneEvent, Never>

    internal init(
        workers: [Worker],
        analytics: AppAnalytics,
        windowScenePublisher: AnyPublisher<WindowSceneEvent, Never>
    ) {
        self.state = .initialState()
        self.analytics = analytics
        self.windowScenePublisher = windowScenePublisher
        super.init(workers: workers)
    }

    /// Override to take action when activated.
    override internal func didBecomeActive() {
        subscribe(to: windowScenePublisher)
    }

    /// Override to take action when deactivated.
    override internal func willResignActive() {}

    private func subscribe(to windowScenePublisher: AnyPublisher<WindowSceneEvent, Never>) {
        windowScenePublisher
            .filter(\.willConnect)
            .map(\.windowScene)
            .sink { [weak self] in self?.flow?.attachWindowScene($0) }
            .store(in: &cancellables)
        windowScenePublisher
            .filter(\.didDisconnect)
            .map(\.windowScene)
            .sink { [weak self] in self?.flow?.detachWindowScene($0) }
            .store(in: &cancellables)
    }
}

extension AppContextImp: AppContextInterface {}
