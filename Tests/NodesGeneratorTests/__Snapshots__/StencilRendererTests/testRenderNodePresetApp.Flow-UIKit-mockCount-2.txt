//<fileHeader>

import <flowImport1>
import <flowImport2>

/// Defines the interface between the `Flow` and its `Context`, primarily for deep-linking. This enables the `Flow` to
/// trigger events programmatically, such as simulating user interactions normally initiated in the view.
/// @mockable
@MainActor
internal protocol AppContextInterface: Context, WindowSceneListener {}

internal final class AppFlowImp: AbstractFlow
<
    AppContextInterface,
    Void
> {

    private let <flowPropertyName1>: <flowPropertyType1>
    private let <flowPropertyName2>: <flowPropertyType2>

    private let windowSceneBuilder: WindowSceneBuilder

    internal init(
        context: AppContextInterface,
        <flowPropertyName1>: <flowPropertyType1>,
        <flowPropertyName2>: <flowPropertyType2>,
        windowSceneBuilder: WindowSceneBuilder
    ) {
        self.<flowPropertyName1> = <flowPropertyName1>
        self.<flowPropertyName2> = <flowPropertyName2>
        self.windowSceneBuilder = windowSceneBuilder
        super.init(context: context, viewController: ())
    }

    /// Override to take action when started.
    override internal func didStart() {}
}

extension AppFlowImp: AppFlow {}

extension AppFlowImp: AppFlowInterface {

    internal func attachWindowScene(_ viewController: WindowSceneViewControllable) {
        let flow: WindowSceneFlow = windowSceneBuilder.build(withListener: context,
                                                             viewController: viewController)
        attach(starting: flow)
    }

    internal func detachWindowScene(_ viewController: WindowSceneViewControllable) {
        detach(endingSubFlowsOfType: WindowSceneFlow.self) { $0.getViewController() === viewController }
    }
}
