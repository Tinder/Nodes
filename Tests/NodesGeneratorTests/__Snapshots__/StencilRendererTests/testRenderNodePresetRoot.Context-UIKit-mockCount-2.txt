//<fileHeader>

import <contextImport1>
import <contextImport2>

/// Defines the interface between the `Context` and its `Flow`, intended for initiating navigation.
/// @mockable
@MainActor
internal protocol RootFlowInterface: Flow {
    func didBecomeReady()
}

internal final class RootContextImp: AbstractContext
<
    <contextGenericType1>,
    <contextGenericType2>
> {

    // periphery:ignore
    internal weak var flow: RootFlowInterface?

    // periphery:ignore
    internal weak var listener: RootListener?

    private let store: Any<storePrefix>StateStore<RootState>

    // periphery:ignore
    private let analytics: RootAnalytics

    internal init<T: <storePrefix>StateStore>(
        workers: [Worker],
        store: T,
        analytics: RootAnalytics
    ) where T.State == RootState {
        self.store = Any<storePrefix>StateStore(store)
        self.analytics = analytics
        super.init(workers: workers)
    }

    /// Override to take action when activated.
    override internal func didBecomeActive() {}

    /// Override to take action when deactivated.
    override internal func willResignActive() {}
}

extension RootContextImp: RootContextInterface {}

extension RootContextImp: RootReceiver {

    internal func viewDidAppear() {
        guard !store.state.isReady
        else { return }
        store.state.isReady = true
        flow?.didBecomeReady()
    }
}
