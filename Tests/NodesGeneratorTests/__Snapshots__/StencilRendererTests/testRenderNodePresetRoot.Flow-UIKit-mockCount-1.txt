//<fileHeader>

import <flowImport>

/// Defines the interface between the `Flow` and its `Context`, primarily for deep-linking. This enables the `Flow` to
/// trigger events programmatically, such as simulating user interactions normally initiated in the view.
/// @mockable
@MainActor
internal protocol RootContextInterface: Context {}

/// Defines the interface between the `Flow` and its view in order to present or contain other views. This protocol
/// typically inherits protocols that include pre-defined behavior for convenience. Add additional methods for custom
/// presentation or containment as desired.
@MainActor
internal protocol RootViewControllable: <viewControllableType> {}

internal final class RootFlowImp: AbstractFlow
<
    RootContextInterface,
    RootViewControllable
> {

    private let <flowPropertyName>: <flowPropertyType>

    internal init(
        context: RootContextInterface,
        viewController: RootViewControllable,
        <flowPropertyName>: <flowPropertyType>
    ) {
        self.<flowPropertyName> = <flowPropertyName>
        super.init(context: context, viewController: viewController)
    }

    /// Required for presentation or containment (do not remove).
    internal func getViewController() -> <viewControllableType> {
        viewController
    }
}

extension RootFlowImp: RootFlow {}

extension RootFlowImp: RootFlowInterface {

    /// Implement to take action when ready.
    internal func didBecomeReady() {}
}
