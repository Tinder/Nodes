//<fileHeader>

import <flowImport1>
import <flowImport2>

/// The interface that the Flow will speak to the Context through. Used for informing the Context of
/// presentation lifecycle events, as an example.
/// @mockable
@MainActor
internal protocol WindowSceneContextInterface: Context, WindowListener {}

/// Responsible for presenting views and starting child Flows, and should not contain business logic.
internal final class WindowSceneFlowImp: AbstractFlow
<
    WindowSceneContextInterface,
    WindowSceneViewControllable
> {

    private let <flowPropertyName1>: <flowPropertyType1>
    private let <flowPropertyName2>: <flowPropertyType2>

    private let windowBuilder: WindowBuilder

    /// The initializer.
    ///
    /// Inject Plugins or Builders into the Flow in order to create sub-Flows.
    /// - Parameters:
    ///   - context: The Context instance
    ///   - viewController: The View Controller instance
    ///   - <flowPropertyName1>: The <flowPropertyType1> instance
    ///   - <flowPropertyName2>: The <flowPropertyType2> instance
    ///   - windowBuilder: The Window Builder instance
    internal init(
        context: WindowSceneContextInterface,
        viewController: WindowSceneViewControllable,
        <flowPropertyName1>: <flowPropertyType1>,
        <flowPropertyName2>: <flowPropertyType2>,
        windowBuilder: WindowBuilder
    ) {
        self.<flowPropertyName1> = <flowPropertyName1>
        self.<flowPropertyName2> = <flowPropertyName2>
        self.windowBuilder = windowBuilder
        super.init(context: context, viewController: viewController)
    }

    /// Implement logic to execute when the Flow is started.
    override internal func didStart() {
        attachWindow()
    }

    /// Provides the ``ViewControllable`` instance to the parent `Flow` for display or presentation.
    ///
    /// - Returns: The ``ViewControllable`` instance.
    internal func getViewController() -> WindowSceneViewControllable {
        viewController
    }

    private func attachWindow() {
        let flow: WindowFlow = windowBuilder.build(withListener: context,
                                                   viewController: viewController.makeWindow())
        attach(starting: flow)
    }
}

extension WindowSceneFlowImp: WindowSceneFlow {}
extension WindowSceneFlowImp: WindowSceneFlowInterface {}
