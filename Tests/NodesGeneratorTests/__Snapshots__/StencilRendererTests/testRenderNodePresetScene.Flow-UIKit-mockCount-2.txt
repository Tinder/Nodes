//<fileHeader>

import <flowImport1>
import <flowImport2>

/// Defines the interface between the `Flow` and its `Context`, primarily for deep-linking. This enables the `Flow` to
/// trigger events programmatically, such as simulating user interactions normally initiated in the view.
/// @mockable
@MainActor
internal protocol WindowSceneContextInterface: Context, WindowListener {}

internal final class WindowSceneFlowImp: AbstractFlow
<
    WindowSceneContextInterface,
    WindowSceneViewControllable
> {

    private let <flowPropertyName1>: <flowPropertyType1>
    private let <flowPropertyName2>: <flowPropertyType2>

    private let windowBuilder: WindowBuilder

    internal init(
        context: WindowSceneContextInterface,
        viewController: WindowSceneViewControllable,
        <flowPropertyName1>: <flowPropertyType1>,
        <flowPropertyName2>: <flowPropertyType2>,
        windowBuilder: WindowBuilder
    ) {
        self.<flowPropertyName1> = <flowPropertyName1>
        self.<flowPropertyName2> = <flowPropertyName2>
        self.windowBuilder = windowBuilder
        super.init(context: context, viewController: viewController)
    }

    /// Override to take action when started.
    override internal func didStart() {
        attachWindow()
    }

    /// Required for presentation or containment (do not remove).
    internal func getViewController() -> WindowSceneViewControllable {
        viewController
    }

    private func attachWindow() {
        let flow: WindowFlow = windowBuilder.build(withListener: context,
                                                   viewController: viewController.makeWindow())
        attach(starting: flow)
    }
}

extension WindowSceneFlowImp: WindowSceneFlow {}
extension WindowSceneFlowImp: WindowSceneFlowInterface {}
