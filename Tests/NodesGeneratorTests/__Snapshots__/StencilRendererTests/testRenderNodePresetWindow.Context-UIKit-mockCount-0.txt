//<fileHeader>

/// Defines the interface between the `Context` and its `Flow`, intended for initiating navigation.
/// @mockable
@MainActor
internal protocol WindowFlowInterface: Flow {}

internal final class WindowContextImp: AbstractContext {

    internal weak var flow: WindowFlowInterface?

    internal weak var listener: WindowListener?

    private let state: WindowState

    private let analytics: WindowAnalytics

    internal init(
        workers: [Worker],
        analytics: WindowAnalytics
    ) {
        self.state = .initialState()
        self.analytics = analytics
        super.init(workers: workers)
    }

    /// Override to take action when activated.
    override internal func didBecomeActive() {}

    /// Override to take action when deactivated.
    override internal func willResignActive() {}
}

extension WindowContextImp: WindowContextInterface {}
