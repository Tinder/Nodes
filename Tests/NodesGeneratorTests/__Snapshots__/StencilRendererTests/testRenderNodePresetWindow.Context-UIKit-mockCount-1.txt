//<fileHeader>

import <contextImport>

/// The Context delegates callbacks to its (external) Listener, typically the parent Context.
/// @mockable
@MainActor
internal protocol WindowListener: AnyObject {}

/// The interface that the Context will speak to the Flow through. Used to initiate navigation as
/// an example.
/// @mockable
@MainActor
internal protocol WindowFlowInterface: Flow {}

/// Contains the business logic of the Node. The lifecycle of the Node is bookended between the
/// `didBecomeActive` and `willResignActive` methods.
internal final class WindowContextImp: AbstractContext
<
    <contextGenericType>
> {

    // periphery:ignore
    /// The Flow instance.
    internal weak var flow: WindowFlowInterface?

    // periphery:ignore
    /// The Listener instance.
    internal weak var listener: WindowListener?

    // periphery:ignore
    /// The State instance.
    private let state: WindowState

    // periphery:ignore
    /// The Analytics instance.
    private let analytics: WindowAnalytics

    /// The initializer.
    internal init(
        workers: [Worker],
        analytics: WindowAnalytics
    ) {
        self.state = .initialState()
        self.analytics = analytics
        super.init(workers: workers)
    }

    /// Implement logic to execute when the Context becomes active.
    override internal func didBecomeActive() {}

    /// Implement logic to execute when the Context will become inactive.
    override internal func willResignActive() {}
}

extension WindowContextImp: WindowContextInterface {}
