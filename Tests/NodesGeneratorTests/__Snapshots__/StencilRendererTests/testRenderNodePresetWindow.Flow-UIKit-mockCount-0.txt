//<fileHeader>

/// Defines the interface between the `Flow` and its `Context`, primarily for deep-linking. This enables the `Flow` to
/// trigger events programmatically, such as simulating user interactions normally initiated in the view.
/// @mockable
@MainActor
internal protocol WindowContextInterface: Context, RootListener {}

internal final class WindowFlowImp: AbstractFlow
<
    WindowContextInterface,
    WindowViewControllable
> {

    private let rootBuilder: RootBuilder

    internal init(
        context: WindowContextInterface,
        viewController: WindowViewControllable,
        rootBuilder: RootBuilder
    ) {
        self.rootBuilder = rootBuilder
        super.init(context: context, viewController: viewController)
    }

    /// Override to take action when started.
    override internal func didStart() {
        attachRoot()
    }

    private func attachRoot() {
        let flow: RootFlow = rootBuilder.build(withListener: context)
        viewController.makeKeyAndVisible(rootViewController: flow.getViewController())
        attach(starting: flow)
    }
}

extension WindowFlowImp: WindowFlow {}
extension WindowFlowImp: WindowFlowInterface {}
