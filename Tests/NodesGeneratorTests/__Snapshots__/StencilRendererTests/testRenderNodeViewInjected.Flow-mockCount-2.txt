//<fileHeader>

import <flowImport1>
import <flowImport2>

/// Defines the interface between the `Flow` and its `Context`, primarily for deep-linking. This enables the `Flow` to
/// trigger events programmatically, such as simulating user interactions normally initiated in the view.
/// @mockable
@MainActor
internal protocol <nodeName>ContextInterface: Context {}

/// Defines the interface between the `Flow` and its view in order to present or contain other views. This protocol
/// typically inherits protocols that include pre-defined behavior for convenience. Add additional methods for custom
/// presentation or containment as desired.
@MainActor
internal protocol <nodeName>ViewControllable: <viewControllableType> {}

internal final class <nodeName>FlowImp: AbstractFlow
<
    <nodeName>ContextInterface,
    <nodeName>ViewControllable
> {

    private let <flowPropertyName1>: <flowPropertyType1>
    private let <flowPropertyName2>: <flowPropertyType2>

    internal init(
        context: <nodeName>ContextInterface,
        viewController: <nodeName>ViewControllable,
        <flowPropertyName1>: <flowPropertyType1>,
        <flowPropertyName2>: <flowPropertyType2>
    ) {
        self.<flowPropertyName1> = <flowPropertyName1>
        self.<flowPropertyName2> = <flowPropertyName2>
        super.init(context: context, viewController: viewController)
    }

    /// Override to take action when started.
    override internal func didStart() {}
}

extension <nodeName>FlowImp: <nodeName>Flow {}
extension <nodeName>FlowImp: <nodeName>FlowInterface {}
