//<fileHeader>

/// Defines the interface between the `Context` and its `Flow`, intended for initiating navigation.
/// @mockable
@MainActor
internal protocol <nodeName>FlowInterface: Flow {}

internal final class <nodeName>ContextImp: AbstractContext {

    internal weak var flow: <nodeName>FlowInterface?

    internal weak var listener: <nodeName>Listener?

    private let store: AnyStateStore<<nodeName>State>

    private let analytics: <nodeName>Analytics

    internal init<T: StateStore>(
        workers: [Worker],
        store: T,
        analytics: <nodeName>Analytics
    ) where T.State == <nodeName>State {
        self.store = AnyStateStore(store)
        self.analytics = analytics
        super.init(workers: workers)
    }

    /// Override to take action when activated.
    override internal func didBecomeActive() {}

    /// Override to take action when deactivated.
    override internal func willResignActive() {}
}

extension <nodeName>ContextImp: <nodeName>ContextInterface {}
extension <nodeName>ContextImp: <nodeName>Receiver {}
