//<fileHeader>

import <flowImport>

/// The interface that the Flow will speak to the Context through. Used for informing the Context of
/// presentation lifecycle events, as an example.
/// @mockable
@MainActor
internal protocol <nodeName>ContextInterface: Context {}

/// The interface of the View used for presenting the View of child Nodes. May inherit additional base
/// protocols to add further pre-baked presentation behavior and/or add new methods for custom presentation
/// implementation as necessary.
@MainActor
internal protocol <nodeName>ViewControllable: <viewControllableType> {}

/// Responsible for presenting views and starting child Flows, and should not contain business logic.
internal final class <nodeName>FlowImp: AbstractFlow
<
    <nodeName>ContextInterface,
    <nodeName>ViewControllable
> {

    private let <flowPropertyName>: <flowPropertyType>

    /// The initializer.
    ///
    /// Inject Plugins or Builders into the Flow in order to create sub-Flows.
    internal init(
        context: <nodeName>ContextInterface,
        viewController: <nodeName>ViewControllable,
        <flowPropertyName>: <flowPropertyType>
    ) {
        self.<flowPropertyName> = <flowPropertyName>
        super.init(context: context, viewController: viewController)
    }

    /// Implement logic to execute when the Flow is started.
    override internal func didStart() {}

    /// Provides the ``ViewControllable`` instance to the parent `Flow` for display or presentation.
    internal func getViewController() -> <viewControllableType> {
        viewController
    }
}

extension <nodeName>FlowImp: <nodeName>Flow {}
extension <nodeName>FlowImp: <nodeName>FlowInterface {}
