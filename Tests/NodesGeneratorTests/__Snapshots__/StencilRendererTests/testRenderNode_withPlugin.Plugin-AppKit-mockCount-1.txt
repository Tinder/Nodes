//<fileHeader>

/// Declares the dependencies required by this Plugin that will be injected (not created by this Plugin itself).
/// @mockable
@MainActor
public protocol PluginDependency: Dependency {}

/// Declares dependencies that are owned by this Plugin.
public final class PluginComponent: Component
<
    PluginDependency
> {

    /*
     *  Dependencies
     *  ============
     *
     *  Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).
     *
     *  fileprivate let example: Example = .init()
     *
     *  Whenever possible, for example when the dependency does not provide shared state, define the property as a
     *  factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     *  Needle compatibility whenever the access control is increased.
     *
     *  fileprivate var exampleFactory: Example {
     *      Example()
     *  }
     *
     *  When shared state is desired but the dependency depends on another dependency, use the `shared` helper method
     *  that always returns the same instance from a computed property.
     *
     *  fileprivate var example: Example {
     *      shared { Example(otherDependency: dependency.otherDependency) }
     *  }
     *
     */

    /*
     *  Child Components
     *  ================
     *
     *  Declare child component factories as 'fileprivate' methods.
     *
     *  fileprivate func <name>ComponentFactory() -> <Name>Component {
     *      <Name>Component(parent: self)
     *  }
     *
     */

    fileprivate func componentFactory() -> Component {
        Component(parent: self)
    }
}

/// To provide additional state used in determining if the Plugin is enabled (can be any type relevant to the Plugin).
internal typealias PluginStateType = Void

// periphery:ignore
/// The Plugin interface (available to mock for testability).
/// @mockable
@MainActor
internal protocol Plugin {
    func create() -> Builder?
}

// periphery:ignore
/// Concrete implementation of the Plugin.
internal final class PluginImp: Plugin
<
    PluginComponent,
    Builder,
    PluginStateType
> {

    /// The method in which the Plugin's enabled criteria is defined.
    /// - Parameters:
    ///   - component: The component instance
    ///   - state: The state
    /// - Returns: The enabled status of the Plugin
    override internal func isEnabled(
        component: PluginComponent,
        state: PluginStateType
    ) -> Bool {
        true
    }

    /// The factory method in which the instance is initialized.
    /// - Parameter component: The component instance
    /// - Returns: The initialized instance
    override internal func build(
        component: PluginComponent
    ) -> Builder {
        BuilderImp(componentFactory: component.componentFactory)
    }
}

extension PluginImp: Plugin {}
