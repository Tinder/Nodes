//<fileHeader>

/// Defines the delegate protocol through which the `Context` receives events and user interactions from its view.
/// @mockable
@MainActor
internal protocol <nodeName>Receiver: AnyObject {}

internal final class <nodeName>ViewController: <viewControllerType>
<
    <nodeName>View
> {}

extension <nodeName>ViewController: <nodeName>ViewControllable {}

internal struct <nodeName>View {

    internal weak var receiver: <nodeName>Receiver?

    private let store: AnyViewStateStore<<nodeName>ViewState>

    internal init<T: ViewStateStore>(
        store: T
    ) where T.ViewState == <nodeName>ViewState {
        self.store = AnyViewStateStore(store)
    }
}

// MARK: - View

extension <nodeName>View: View {

    internal var body: some View {
        Text(verbatim: "\(type(of: store.viewState))")
    }
}

// MARK: - Preview

#Preview {
    <nodeName>View(
        store: PreviewStore(
            viewState: <nodeName>ViewState()
        )
    )
}
