//<fileHeader>

/// Defines the delegate protocol through which the `Context` receives events and user interactions from its view.
/// @mockable
@MainActor
internal protocol <nodeName>Receiver: AnyObject {}

internal final class <nodeName>ViewController: <viewControllerType>, StateObserver {

    internal weak var receiver: <nodeName>Receiver?

    <viewControllerSubscriptionsProperty>

    private let initialState: <nodeName>ViewState

    private let <viewStatePropertyName>: <publisherType><<nodeName>ViewState>

    internal init(
        initialState: <nodeName>ViewState,
        <viewStatePropertyName>: <publisherType><<nodeName>ViewState>
    ) {
        self.initialState = initialState
        self.<viewStatePropertyName> = <viewStatePropertyName>
        super.init()
    }

    internal func update(with viewState: <nodeName>ViewState) {}
}

extension <nodeName>ViewController: <nodeName>ViewControllable {}
