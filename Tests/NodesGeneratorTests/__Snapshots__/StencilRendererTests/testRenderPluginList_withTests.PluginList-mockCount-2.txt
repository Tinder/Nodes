//<fileHeader>

import <pluginListImport1>
import <pluginListImport2>

// MARK: - Dependency

/// Declares the dependencies required by the component. A code-generated conforming object is made available to the
/// component through its `dependencies` property. Dependencies must be provided by ancestor components on the DI graph.
/// @mockable
@MainActor
public protocol <pluginListName>PluginListDependency: Dependency {}

// MARK: - Component

/// Implements a DI graph scope where the dependencies provided to this component and its children are defined.
/// The component can also include child component factories, which are used to construct the DI graph.
public final class <pluginListName>PluginListComponent: Component
<
    <pluginListName>PluginListDependency
> {

    // MARK: - Dependencies

    /// Define dependencies as `fileprivate` computed property factories that create new instances when accessed.
    /// Only increase access control to `public` when the component is to provide the dependency to its descendants.
    ///
    ///     fileprivate var exampleFactory: Example {
    ///         Example()
    ///     }
    ///
    /// Store the dependency on the component only when shared state is necessary.
    ///
    ///     fileprivate let example: Example = .init()
    ///
    /// Or use the `shared` helper method which always returns the same instance from the computed property.
    /// This is only necessary for dependencies initialized with other dependencies.
    ///
    ///     fileprivate var example: Example {
    ///         shared { Example(otherDependency: dependency.otherDependency) }
    ///     }

    // MARK: - Child Components

    /// Define child component factories as 'fileprivate' methods.
    ///
    ///     fileprivate func <name>PluginComponentFactory() -> <Name>PluginComponent {
    ///         <Name>PluginComponent(parent: self)
    ///     }
}

// MARK: - Plugin List

// periphery:ignore
internal final class <pluginListName>PluginListImp: PluginList
<
    <pluginListName>PluginListKeyType,
    <pluginListName>PluginListComponent,
    <pluginListName>Builder,
    <pluginListName>PluginListStateType
> {

    /// Defines the ordered collection of plugins, each paired with a unique key and wrapped in a type-erased
    /// `AnyPlugin` instance.
    override internal func plugins(
        component: <pluginListName>PluginListComponent
    ) -> KeyValuePairs<<pluginListName>PluginListKeyType, AnyPlugin> {
        [:]
//        [
//            "example": AnyPlugin(ExamplePluginImp(componentFactory: component.examplePluginComponentFactory).create())
//        ]
    }

    /// Optionally implements a custom creation order. This method may be omitted to use the default order.
    /// - NOTE: Do not call `super` within this method unless referencing or modifying the default order.
    override internal func creationOrder(
        component: <pluginListName>PluginListComponent,
        state: <pluginListName>PluginListStateType
    ) -> [<pluginListName>PluginListKeyType] {
        super.creationOrder(component: component, state: state)
    }
}

extension <pluginListName>PluginListImp: <pluginListName>PluginList {}
