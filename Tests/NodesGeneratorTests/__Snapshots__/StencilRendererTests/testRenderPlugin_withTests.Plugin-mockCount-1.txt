//<fileHeader>

import <pluginImport>

// MARK: - Dependency

/// Declares the dependencies required by the component. A code-generated conforming object is made available to the
/// component through its `dependencies` property. Dependencies must be provided by ancestor components on the DI graph.
/// @mockable
@MainActor
public protocol <pluginName>PluginDependency: Dependency {}

// MARK: - Component

/// Implements a DI graph scope where the dependencies provided to this component and its children are defined.
/// The component can also include child component factories, which are used to construct the DI graph.
public final class <pluginName>PluginComponent: Component
<
    <pluginName>PluginDependency
> {

    // MARK: - Dependencies

    /// Define dependencies as `fileprivate` computed property factories that create new instances when accessed.
    /// Only increase access control to `public` when the component is to provide the dependency to its descendants.
    ///
    ///     fileprivate var exampleFactory: Example {
    ///         Example()
    ///     }
    ///
    /// Store the dependency on the component only when shared state is necessary.
    ///
    ///     fileprivate let example: Example = .init()
    ///
    /// Or use the `shared` helper method which always returns the same instance from the computed property.
    /// This is only necessary for dependencies initialized with other dependencies.
    ///
    ///     fileprivate var example: Example {
    ///         shared { Example(otherDependency: dependency.otherDependency) }
    ///     }

    // MARK: - Child Components

    /// Define child component factories as 'fileprivate' methods.
    ///
    ///     fileprivate func <name>ComponentFactory() -> <Name>Component {
    ///         <Name>Component(parent: self)
    ///     }

    fileprivate func componentFactory() -> <pluginName>Component {
        <pluginName>Component(parent: self)
    }
}

// MARK: - Plugin

// periphery:ignore
internal final class <pluginName>PluginImp: Plugin
<
    <pluginName>PluginComponent,
    <pluginName>Builder,
    <pluginName>PluginStateType
> {

    /// Defines the criteria that determine whether the plugin is enabled.
    override internal func isEnabled(
        component: <pluginName>PluginComponent,
        state: <pluginName>PluginStateType
    ) -> Bool {
        true
    }

    /// Implements the factory build method where the instance is initialized.
    override internal func build(
        component: <pluginName>PluginComponent
    ) -> <pluginName>Builder {
        <pluginName>BuilderImp(componentFactory: component.componentFactory)
    }
}

extension <pluginName>PluginImp: <pluginName>Plugin {}
