//___FILEHEADER___

/*
 This file contains the protocols and types of the plugin list interface requiring public ACL for use in another module.
 */

/// Defines the delegate protocol through which the `Context` interfaces with its listener.
/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___Listener: AnyObject {}

/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___Flow: ViewControllableFlow {}

/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___Builder: AnyObject {
    func build(
        withListener listener: ___VARIABLE_productName___Listener
    ) -> ___VARIABLE_productName___Flow
}

/// Declares the type of key used to identify plugins within the collection.
/// - NOTE: May be any ``Hashable`` type such as ``String`` or an enumeration.
internal typealias ___VARIABLE_productName___PluginListKeyType = String

/// Dynamic state from the caller provided to the plugins to use in determining whether they are enabled.
/// - NOTE: An alias to a tuple is supported.
internal typealias ___VARIABLE_productName___PluginListStateType = Void

/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___PluginList {
    func createAll() -> [___VARIABLE_productName___Builder]
    func create() -> ___VARIABLE_productName___Builder?
    func create(key: ___VARIABLE_productName___PluginListKeyType) -> ___VARIABLE_productName___Builder?
}
