//___FILEHEADER___

import Combine
import Nodes
import SwiftUI

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___Receiver: AnyObject {}

/**
 PURPOSE:
 Host of the SwiftUI view.
 */
internal final class ___VARIABLE_productName___ViewController: UIHostingController
<
    ___VARIABLE_productName___View
> {}

extension ___VARIABLE_productName___ViewController: ___VARIABLE_productName___ViewControllable {}

/**
 PURPOSE:
 Concrete implementation of the View.
 */
internal struct ___VARIABLE_productName___View {

    /// The view receiver.
    internal weak var receiver: ___VARIABLE_productName___Receiver?

    /// The store.
    private let store: AnyViewStateStore<___VARIABLE_productName___ViewState>

    /// The initializer.
    ///
    /// - Parameters: The store instance.
    internal init<T: ViewStateStore>(
        store: T
    ) where T.ViewState == ___VARIABLE_productName___ViewState {
        self.store = AnyViewStateStore(store)
    }
}

// MARK: - View

extension ___VARIABLE_productName___View: View {

    internal var body: some View {
        Text(verbatim: "\(type(of: store.viewState))")
    }
}

// MARK: - Preview

#Preview {
    ___VARIABLE_productName___View(
        store: PreviewStore(
            viewState: ___VARIABLE_productName___ViewState()
        )
    )
}
