//___FILEHEADER___

import AppKit
import Combine
import Nodes

/// Defines the delegate protocol through which the `Context` receives events and user interactions from its view.
/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___Receiver: AnyObject {}

internal final class ___VARIABLE_productName___ViewController: NSViewController, StateObserver {

    internal weak var receiver: ___VARIABLE_productName___Receiver?

    /// The collection of cancellable instances.
    private var cancellables: Set<AnyCancellable> = .init()

    private let initialState: ___VARIABLE_productName___ViewState

    private let statePublisher: AnyPublisher<___VARIABLE_productName___ViewState, Never>

    internal init(
        initialState: ___VARIABLE_productName___ViewState,
        statePublisher: AnyPublisher<___VARIABLE_productName___ViewState, Never>
    ) {
        self.initialState = initialState
        self.statePublisher = statePublisher
            .removeDuplicates()
            .receive(on: DispatchQueue.main)
            .eraseToAnyPublisher()
        super.init(nibName: nil, bundle: nil)
    }

    @available(*, unavailable)
    internal required init?(coder: NSCoder) {
        preconditionFailure("init(coder:) has not been implemented")
    }

    override internal func loadView() {
        view = NSView()
    }

    override internal func viewDidLoad() {
        super.viewDidLoad()
        update(with: initialState)
    }

    override internal func viewWillAppear() {
        super.viewWillAppear()
        observe(statePublisher).store(in: &cancellables)
    }

    override internal func viewWillDisappear() {
        super.viewWillDisappear()
        cancellables.cancelAll()
    }

    internal func update(with viewState: ___VARIABLE_productName___ViewState) {
        // Add implementation to update the user interface when the view state changes.
    }
}

extension ___VARIABLE_productName___ViewController: ___VARIABLE_productName___ViewControllable {}
