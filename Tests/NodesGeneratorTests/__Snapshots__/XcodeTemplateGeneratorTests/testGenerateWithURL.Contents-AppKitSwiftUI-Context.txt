//___FILEHEADER___

import Combine
import Nodes

/// Defines the interface between the `Context` and its `Flow`, intended for initiating navigation.
/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___FlowInterface: Flow {}

internal final class ___VARIABLE_productName___ContextImp: AbstractContext
<
    AnyCancellable
> {

    internal weak var flow: ___VARIABLE_productName___FlowInterface?

    internal weak var listener: ___VARIABLE_productName___Listener?

    private let store: AnyStateStore<___VARIABLE_productName___State>

    private let analytics: ___VARIABLE_productName___Analytics

    internal init<T: StateStore>(
        workers: [Worker],
        store: T,
        analytics: ___VARIABLE_productName___Analytics
    ) where T.State == ___VARIABLE_productName___State {
        self.store = AnyStateStore(store)
        self.analytics = analytics
        super.init(workers: workers)
    }

    /// Override to take action when activated.
    override internal func didBecomeActive() {}

    /// Override to take action when deactivated.
    override internal func willResignActive() {}
}

extension ___VARIABLE_productName___ContextImp: ___VARIABLE_productName___ContextInterface {}
extension ___VARIABLE_productName___ContextImp: ___VARIABLE_productName___Receiver {}
