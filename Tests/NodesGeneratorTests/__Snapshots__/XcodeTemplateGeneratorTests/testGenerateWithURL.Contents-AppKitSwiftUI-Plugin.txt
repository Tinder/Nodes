//___FILEHEADER___

import NeedleFoundation
import Nodes

/// Declares the dependencies required by the component. A code-generated conforming object is made available to the
/// component through its `dependencies` property. Dependencies must be provided by ancestor components on the DI graph.
/// @mockable
@MainActor
public protocol ___VARIABLE_productName___PluginDependency: Dependency {}

/// Implements a DI graph scope where the dependencies provided to this component and its children are defined.
/// The component can also include child component factories, which are used to construct the DI graph.
public final class ___VARIABLE_productName___PluginComponent: Component
<
    ___VARIABLE_productName___PluginDependency
> {

    // MARK: - Dependencies

    /// Define dependencies as `fileprivate` computed property factories that create new instances when accessed.
    /// Only increase access control to `public` when the component is to provide the dependency to its descendants.
    ///
    ///     fileprivate var exampleFactory: Example {
    ///         Example()
    ///     }
    ///
    /// Store the dependency on the component only when shared state is necessary.
    ///
    ///     fileprivate let example: Example = .init()
    ///
    /// Or use the `shared` helper method which always returns the same instance from the computed property.
    /// This is only necessary for dependencies initialized with other dependencies.
    ///
    ///     fileprivate var example: Example {
    ///         shared { Example(otherDependency: dependency.otherDependency) }
    ///     }

    // MARK: - Child Components

    /// Define child component factories as 'fileprivate' methods.
    ///
    ///     fileprivate func <name>ComponentFactory() -> <Name>Component {
    ///         <Name>Component(parent: self)
    ///     }

    fileprivate func componentFactory() -> ___VARIABLE_productName___Component {
        ___VARIABLE_productName___Component(parent: self)
    }
}

/// Dynamic state from the caller provided to the plugin to use in determining whether it is enabled.
/// - NOTE: An alias to a tuple is supported.
internal typealias ___VARIABLE_productName___PluginStateType = Void

/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___Plugin {
    func create() -> ___VARIABLE_productName___Builder?
}

internal final class ___VARIABLE_productName___PluginImp: Plugin
<
    ___VARIABLE_productName___PluginComponent,
    ___VARIABLE_productName___Builder,
    ___VARIABLE_productName___PluginStateType
> {

    /// Defines the criteria that determine whether the plugin is enabled.
    override internal func isEnabled(
        component: ___VARIABLE_productName___PluginComponent,
        state: ___VARIABLE_productName___PluginStateType
    ) -> Bool {
        true
    }

    /// Implements the factory build method where the instance is initialized.
    override internal func build(
        component: ___VARIABLE_productName___PluginComponent
    ) -> ___VARIABLE_productName___Builder {
        ___VARIABLE_productName___BuilderImp(componentFactory: component.componentFactory)
    }
}

extension ___VARIABLE_productName___PluginImp: ___VARIABLE_productName___Plugin {}
