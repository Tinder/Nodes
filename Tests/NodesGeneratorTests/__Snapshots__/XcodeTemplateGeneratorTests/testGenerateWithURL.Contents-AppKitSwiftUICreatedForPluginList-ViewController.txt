//___FILEHEADER___

import Combine
import Nodes
import SwiftUI

/// Defines the delegate protocol through which the `Context` receives events and user interactions from its view.
/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___Receiver: AnyObject {}

internal final class ___VARIABLE_productName___ViewController: NSHostingController
<
    ___VARIABLE_productName___View
> {}

extension ___VARIABLE_productName___ViewController: ___VARIABLE_productName___ViewControllable {}

internal struct ___VARIABLE_productName___View {

    internal weak var receiver: ___VARIABLE_productName___Receiver?

    private let store: AnyViewStateStore<___VARIABLE_productName___ViewState>

    internal init<T: ViewStateStore>(
        store: T
    ) where T.ViewState == ___VARIABLE_productName___ViewState {
        self.store = AnyViewStateStore(store)
    }
}

// MARK: - View

extension ___VARIABLE_productName___View: View {

    internal var body: some View {
        Text(verbatim: "\(type(of: store.viewState))")
    }
}

// MARK: - Preview

#Preview {
    ___VARIABLE_productName___View(
        store: PreviewStore(
            viewState: ___VARIABLE_productName___ViewState()
        )
    )
}
