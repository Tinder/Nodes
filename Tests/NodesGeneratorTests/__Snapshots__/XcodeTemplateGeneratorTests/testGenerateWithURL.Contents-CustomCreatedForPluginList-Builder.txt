//___FILEHEADER___

import Combine
import NeedleFoundation
import Nodes

/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___Flow: ___VARIABLE_PluginListName___Flow {}

// MARK: - Dependencies

/// Declares the dependencies required by the component. A code-generated conforming object is made available to the
/// component through its `dependencies` property. Dependencies must be provided by ancestor components on the DI graph.
/// @mockable
@MainActor
public protocol ___VARIABLE_productName___Dependency: Dependency {}

/// Encapsulates arguments passed through the builder base class to its factory build method.
/// - NOTE: An alias to a tuple is supported.
internal typealias ___VARIABLE_productName___DynamicBuildDependency = ___VARIABLE_productName___Listener

/// Encapsulates arguments passed through the builder base class to the component initializer.
/// - NOTE: An alias to a tuple is supported.
internal typealias ___VARIABLE_productName___DynamicComponentDependency = Void

// MARK: - Component

/// Implements a DI graph scope where the dependencies provided to this component and its descendants are defined.
/// The component can also include child component factories, which are used to construct the graph.
public final class ___VARIABLE_productName___Component: Component
<
    ___VARIABLE_productName___Dependency
> {

    // MARK: - Dependencies

    /// Define dependencies as `fileprivate` computed property factories that create new instances when accessed.
    /// Only increase access control to `public` when the component is to provide the dependency to its descendants.
    ///
    ///     fileprivate var exampleFactory: Example {
    ///         Example()
    ///     }
    ///
    /// Store the dependency on the component only when shared state is necessary.
    ///
    ///     fileprivate let example: Example = .init()
    ///
    /// Or use the `shared` helper method which will always return the same instance from a computed property.
    /// This is only necessary for dependencies that are initialized with other dependencies.
    ///
    ///     fileprivate var example: Example {
    ///         shared { Example(otherDependency: dependency.otherDependency) }
    ///     }

    private let dynamicDependency: ___VARIABLE_productName___DynamicComponentDependency

    /// - NOTE: Remove the default value from `dynamicDependency` when its type is not `Void`.
    internal init(
        parent: Scope,
        dynamicDependency: ___VARIABLE_productName___DynamicComponentDependency = ()
    ) {
        self.dynamicDependency = dynamicDependency
        super.init(parent: parent)
    }

    // MARK: - Child Components

    /// Define child component factories as 'fileprivate' methods.
    ///
    ///     fileprivate func <name>ComponentFactory() -> <Name>Component {
    ///         <Name>Component(parent: self)
    ///     }
}

// MARK: - Builder

/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___Builder: ___VARIABLE_PluginListName___Builder {
    func build(
        withListener listener: ___VARIABLE_productName___Listener
    ) -> ___VARIABLE_productName___Flow
}

internal final class ___VARIABLE_productName___BuilderImp: AbstractBuilder
<
    ___VARIABLE_productName___Component,
    ___VARIABLE_productName___Flow,
    ___VARIABLE_productName___DynamicBuildDependency,
    ___VARIABLE_productName___DynamicComponentDependency
> {

    /// Provides plugin list compatibility.
    internal func build(
        withListener listener: ___VARIABLE_PluginListName___Listener
    ) -> ___VARIABLE_PluginListName___Flow {
        build(withListener: listener as ___VARIABLE_productName___Listener)
    }

    /// Directs arguments passed through the base class, determining whether each will be provided to its factory build
    /// method or the component initializer.
    internal func build(
        withListener listener: ___VARIABLE_productName___Listener
    ) -> ___VARIABLE_productName___Flow {
        let dynamicBuildDependency: ___VARIABLE_productName___DynamicBuildDependency = listener
        let dynamicComponentDependency: ___VARIABLE_productName___DynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    /// Implements the factory build method where instances are initialized.
    override internal func build(
        component: ___VARIABLE_productName___Component,
        dynamicBuildDependency: ___VARIABLE_productName___DynamicBuildDependency
    ) -> ___VARIABLE_productName___Flow {
        let listener: ___VARIABLE_productName___Listener = dynamicBuildDependency
        let store: Store<
            ___VARIABLE_productName___State,
            ___VARIABLE_productName___ViewState
        > = .init(
            state: .initialState(),
            transform: ___VARIABLE_productName___ViewStateFactory()
        )
        let analytics: ___VARIABLE_productName___AnalyticsImp = .init()
        let context: ___VARIABLE_productName___ContextImp = .init(
            workers: [],
            store: store,
            analytics: analytics
        )
        context.listener = listener
        let viewController: ___VARIABLE_productName___ViewController = .init(
            initialState: store.viewState,
            statePublisher: store.viewStatePublisher
        )
        viewController.receiver = context
        let flow: ___VARIABLE_productName___FlowImp = .init(
            context: context,
            viewController: viewController
        )
        context.flow = flow
        return flow
    }
}

extension ___VARIABLE_productName___BuilderImp: ___VARIABLE_productName___Builder {}
