//___FILEHEADER___

import Combine
import NeedleFoundation
import Nodes

/// PURPOSE:
/// The interface of the Flow.
/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___Flow: ___VARIABLE_PluginListName___Flow {}

/// PURPOSE:
/// Declares the dependencies required by this Node that will be injected (not created by this Node itself).
/// @mockable
@MainActor
public protocol ___VARIABLE_productName___Dependency: Dependency {}

/// PURPOSE:
/// A dependency needed by the Builder (such as a Listener), passed in from the caller (i.e. is not on the DI graph).
///
/// Can be a tuple or struct containing multiple values when necessary.
internal typealias ___VARIABLE_productName___DynamicBuildDependency = ___VARIABLE_productName___Listener

/// PURPOSE:
/// A dependency used by the Component itself, passed into the Component's initializer (in the Component factory).
///
/// Can be a tuple or struct containing multiple values when necessary.
internal typealias ___VARIABLE_productName___DynamicComponentDependency = Void

// MARK: - Component

/// PURPOSE:
/// Declares dependencies that are owned by this Node.
public final class ___VARIABLE_productName___Component: Component
<
    ___VARIABLE_productName___Dependency
> {

    /*
     *  Dependencies
     *  ============
     *
     *  Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).
     *
     *  fileprivate let example: Example = .init()
     *
     *  Whenever possible, for example when the dependency does not provide shared state, define the property as a
     *  factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     *  Needle compatibility whenever the access control is increased.
     *
     *  fileprivate var exampleFactory: Example {
     *      Example()
     *  }
     *
     *  When shared state is desired but the dependency depends on another dependency, use the `shared` helper method
     *  that always returns the same instance from a computed property.
     *
     *  fileprivate var example: Example {
     *      shared { Example(otherDependency: dependency.otherDependency) }
     *  }
     *
     */

    private let dynamicDependency: ___VARIABLE_productName___DynamicComponentDependency

    /// The initializer.
    ///
    /// Remove `dynamicDependency` default parameter when its type is not `Void`.
    ///
    /// - Parameters:
    ///   - parent: The parent scope
    ///   - dynamicDependency: The dynamic component dependency
    internal init(
        parent: Scope,
        dynamicDependency: ___VARIABLE_productName___DynamicComponentDependency = ()
    ) {
        self.dynamicDependency = dynamicDependency
        super.init(parent: parent)
    }

    /*
     *  Child Components
     *  ================
     *
     *  Declare child component factories as 'fileprivate' methods.
     *
     *  fileprivate func <nodeName>ComponentFactory() -> ChildComponent {
     *      ChildComponent(parent: self)
     *  }
     *
     */
}

// MARK: - Builder

/// PURPOSE:
/// The Builder interface (available to mock for testability).
/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___Builder: ___VARIABLE_PluginListName___Builder {
    func build(
        withListener listener: ___VARIABLE_productName___Listener
    ) -> ___VARIABLE_productName___Flow
}

/// PURPOSE:
/// Concrete implementation of the Builder, where everything is created and associated.
internal final class ___VARIABLE_productName___BuilderImp: AbstractBuilder
<
    ___VARIABLE_productName___Component,
    ___VARIABLE_productName___Flow,
    ___VARIABLE_productName___DynamicBuildDependency,
    ___VARIABLE_productName___DynamicComponentDependency
> {

    /// The purpose of this method is to route input parameters to either the dynamic build dependency and/or
    /// the dynamic component dependency.
    ///
    /// The dynamic dependencies can be tuples containing multiple values when necessary.
    /// - Parameter listener: An object that can listen for signals from the Node
    /// - Returns: The Flow instance
    internal func build(
        withListener listener: ___VARIABLE_PluginListName___Listener
    ) -> ___VARIABLE_PluginListName___Flow {
        build(withListener: listener as ___VARIABLE_productName___Listener)
    }

    /// The purpose of this method is to route input parameters to either the dynamic build dependency and/or
    /// the dynamic component dependency.
    ///
    /// The dynamic dependencies can be tuples or structs containing multiple values when necessary.
    /// - Parameter listener: An object that can listen for signals from the Node
    /// - Returns: The Flow instance
    internal func build(
        withListener listener: ___VARIABLE_productName___Listener
    ) -> ___VARIABLE_productName___Flow {
        let dynamicBuildDependency: ___VARIABLE_productName___DynamicBuildDependency = listener
        let dynamicComponentDependency: ___VARIABLE_productName___DynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    /// The factory method in which the Context and Flow are initialized.
    /// - Parameters:
    ///   - component: The component instance
    ///   - dynamicBuildDependency: The dynamic build dependency
    /// - Returns: The Flow instance
    override internal func build(
        component: ___VARIABLE_productName___Component,
        dynamicBuildDependency: ___VARIABLE_productName___DynamicBuildDependency
    ) -> ___VARIABLE_productName___Flow {
        let listener: ___VARIABLE_productName___Listener = dynamicBuildDependency
        let store: Store<
            ___VARIABLE_productName___State,
            ___VARIABLE_productName___ViewState
        > = .init(
            state: .initialState(),
            transform: ___VARIABLE_productName___ViewStateFactory()
        )
        let analytics: ___VARIABLE_productName___AnalyticsImp = .init()
        let context: ___VARIABLE_productName___ContextImp = .init(
            workers: [],
            store: store,
            analytics: analytics
        )
        context.listener = listener
        var view: ___VARIABLE_productName___View = .init(
            store: store
        )
        view.receiver = context
        let viewController: ___VARIABLE_productName___ViewController = .init(
            rootView: view
        )
        let flow: ___VARIABLE_productName___FlowImp = .init(
            context: context,
            viewController: viewController
        )
        context.flow = flow
        return flow
    }
}

extension ___VARIABLE_productName___BuilderImp: ___VARIABLE_productName___Builder {}
