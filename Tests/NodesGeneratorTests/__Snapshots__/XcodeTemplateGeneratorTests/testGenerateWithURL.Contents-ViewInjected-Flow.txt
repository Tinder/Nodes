//___FILEHEADER___

import Nodes

/// Defines the interface between the `Flow` and its `Context`, primarily for deep-linking. This enables the `Flow` to
/// trigger events programmatically, such as simulating user interactions normally initiated in the view.
/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___ContextInterface: Context {}

/// Defines the interface between the `Flow` and its view in order to present or contain other views. This protocol
/// typically inherits protocols that include pre-defined behavior for convenience. Add additional methods for custom
/// presentation or containment as desired.
/// @mockable
@MainActor
internal protocol ___VARIABLE_productName___ViewControllable: ViewControllable {}

internal final class ___VARIABLE_productName___FlowImp: AbstractFlow
<
    ___VARIABLE_productName___ContextInterface,
    ___VARIABLE_productName___ViewControllable
> {

    override internal init(
        context: ___VARIABLE_productName___ContextInterface,
        viewController: ___VARIABLE_productName___ViewControllable
    ) {
        super.init(context: context, viewController: viewController)
    }

    /// Override to take action when started.
    override internal func didStart() {}
}

extension ___VARIABLE_productName___FlowImp: ___VARIABLE_productName___Flow {}
extension ___VARIABLE_productName___FlowImp: ___VARIABLE_productName___FlowInterface {}
