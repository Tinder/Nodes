▿ Config
  - analyticsDependencies: 0 elements
  - baseImports: 0 members
  - cancellableType: "AnyCancellable"
  - dependencies: 0 elements
  ▿ dependencyInjectionImports: 1 member
    - "NeedleFoundation"
  - fileHeader: "//___FILEHEADER___"
  - flowProperties: 0 elements
  - isViewInjectedNodeEnabled: true
  - publisherFailureType: ", Never"
  - publisherType: "AnyPublisher"
  ▿ reactiveImports: 1 member
    - "Combine"
  ▿ uiFrameworks: 2 elements
    ▿ UIFramework
      - framework: Framework.uiKit
      - viewControllerMethods: "override func viewDidLoad() {\n    super.viewDidLoad()\n    view.backgroundColor = .systemBackground\n    update(with: initialState)\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    observe(statePublisher).store(in: &cancellables)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    cancellables.removeAll()\n}"
      - viewControllerMethodsForRootNode: "override func viewDidLoad() {\n    super.viewDidLoad()\n    view.backgroundColor = .systemBackground\n    update(with: initialState)\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    observe(statePublisher).store(in: &cancellables)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    receiver?.viewDidAppear()\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    cancellables.removeAll()\n}"
      - viewControllerProperties: ""
    ▿ UIFramework
      - framework: Framework.swiftUI
      - viewControllerMethods: ""
      - viewControllerMethodsForRootNode: "override func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    receiver?.viewDidAppear()\n}"
      - viewControllerProperties: ""
  - viewControllableFlowType: "ViewControllableFlow"
  - viewControllableType: "ViewControllable"
  - viewControllerUpdateComment: "// Add implementation to update the user interface when the view state changes."
  - viewStateOperators: ".removeDuplicates()\n.receive(on: DispatchQueue.main)\n.eraseToAnyPublisher()"
