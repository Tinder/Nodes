<fileHeader>

internal protocol <nodeName>Flow: <viewControllableFlowType> {}

public protocol <nodeName>Dependency: Dependency {}

internal typealias <nodeName>DynamicBuildDependency = <nodeName>Listener

internal typealias <nodeName>DynamicComponentDependency = Void

public final class <nodeName>Component: Component
<
    <nodeName>Dependency
> {

    private let dynamicDependency: <nodeName>DynamicComponentDependency

    internal init(parent: Scope, dynamicDependency: <nodeName>DynamicComponentDependency = ()) {
        self.dynamicDependency = dynamicDependency
        super.init(parent: parent)
    }
}

internal protocol <nodeName>Builder: AnyObject {
    func build(
        withListener listener: <nodeName>Listener
    ) -> <nodeName>Flow
}

internal final class <nodeName>BuilderImp: AbstractBuilder
<
    <nodeName>Component,
    <nodeName>Flow,
    <nodeName>DynamicBuildDependency,
    <nodeName>DynamicComponentDependency
> {

    internal func build(
        withListener listener: <nodeName>Listener
    ) -> <nodeName>Flow {
        let dynamicBuildDependency: <nodeName>DynamicBuildDependency = listener
        let dynamicComponentDependency: <nodeName>DynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    override internal func build(
        component: <nodeName>Component,
        dynamicBuildDependency: <nodeName>DynamicBuildDependency
    ) -> <nodeName>Flow {
        let listener: <nodeName>Listener = dynamicBuildDependency
        let analytics: <nodeName>AnalyticsImp = .init()
        let context: <nodeName>ContextImp = .init(
            workers: [],
            analytics: analytics
        )
        context.listener = listener
        let viewStateFactory: <nodeName>ViewStateFactory = .init()
        let viewState: Publishers.Map = .init(
            upstream: context.$state,
            transform: viewStateFactory
        )
        let viewController: <nodeName>ViewController = .init(
            initialState: viewStateFactory(context.state),
            statePublisher: viewState.eraseToAnyPublisher()
        )
        viewController.receiver = context
        let flow: <nodeName>FlowImp = .init(
            context: context,
            viewController: viewController
        )
        context.flow = flow
        return flow
    }
}

extension <nodeName>BuilderImp: <nodeName>Builder {}
