<fileHeader>

internal protocol <nodeName>ContextInterface: Context {}

internal protocol <nodeName>ViewControllable: <viewControllableType> {}

internal final class <nodeName>FlowImp: AbstractFlow
<
    <nodeName>ContextInterface,
    <nodeName>ViewControllable
> {

    /// The initializer.
    ///
    /// Inject Plugins or Builders into the Flow in order to create sub-Flows.
    /// - Parameters:
    ///   - context: The Context instance
    ///   - viewController: The View Controller instance
    override internal init(
        context: <nodeName>ContextInterface,
        viewController: <nodeName>ViewControllable
    ) {
        super.init(context: context, viewController: viewController)
    }

    /// Implement logic to execute when the Flow is started.
    override internal func didStart() {}

    /// Provides the ``ViewControllable`` instance to the parent `Flow` for display or presentation.
    ///
    /// - Returns: The ``ViewControllable`` instance.
    internal func getViewController() -> <viewControllableType> {
        viewController
    }
}

extension <nodeName>FlowImp: <nodeName>Flow {}
extension <nodeName>FlowImp: <nodeName>FlowInterface {}
