<fileHeader>

internal protocol <nodeName>Receiver: AnyObject {}

internal final class <nodeName>ViewController: <viewControllerType>, StateObserver {

    internal weak var receiver: <nodeName>Receiver?

    private var cancellables: Set<<cancellableType>> = .init()

    private let initialState: <nodeName>ViewState

    private let statePublisher: <publisherType><<nodeName>ViewState>

    internal init(
        initialState: <nodeName>ViewState,
        statePublisher: <publisherType><<nodeName>ViewState>
    ) {
        self.initialState = initialState
        self.statePublisher = statePublisher
        super.init()
    }

    internal func update(with viewState: <nodeName>ViewState) {
    }
}

extension <nodeName>ViewController: <nodeName>ViewControllable {}
