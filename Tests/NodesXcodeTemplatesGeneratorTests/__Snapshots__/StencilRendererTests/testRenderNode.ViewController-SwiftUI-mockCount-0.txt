<fileHeader>

internal protocol <nodeName>Receiver: AnyObject {}

internal final class <nodeName>ViewController: <viewControllerType>
<
    <nodeName>View
> {}

extension <nodeName>ViewController: <nodeName>ViewControllable {}

internal struct <nodeName>View: View {

    internal var body: some View {
        WithViewState(initialState: initialState, statePublisher: statePublisher) { viewState in
            Text(verbatim: "\(type(of: viewState))")
        }
    }

    internal weak var receiver: <nodeName>Receiver?

    private let initialState: <nodeName>ViewState

    private let statePublisher: <publisherType><<nodeName>ViewState>

    internal init(
        initialState: <nodeName>ViewState,
        statePublisher: <publisherType><<nodeName>ViewState>
    ) {
        self.initialState = initialState
        self.statePublisher = statePublisher
    }
}

internal struct <nodeName>View_Previews: PreviewProvider {

    internal static var previews: some View {
        <nodeName>View(
            initialState: <nodeName>ViewState(),
            statePublisher: Empty().eraseToAnyPublisher()
        )
    }
}
