<fileHeader>

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
internal protocol <nodeName>Receiver: AnyObject {}

/**
 PURPOSE:
 Host of the SwiftUI view.
 */
internal final class <nodeName>ViewController: <viewControllerType>
<
    <nodeName>View
> {}

extension <nodeName>ViewController: <nodeName>ViewControllable {}

/**
 PURPOSE:
 Concrete implementation of the View.
 */
internal struct <nodeName>View: NodesView {

    /// The body of the view.
    internal var body: some View {
        WithViewState(initialState: initialState, statePublisher: statePublisher) { viewState in
            Text(verbatim: "\(type(of: viewState))")
        }
    }

    /// The view receiver.
    internal weak var receiver: <nodeName>Receiver?

    /// The initial view state.
    private let initialState: <nodeName>ViewState

    /// The view state publisher.
    private let statePublisher: <publisherType><<nodeName>ViewState>

    /// The initializer.
    ///
    /// - Parameters:
    ///   - initialState: The initial view state.
    ///   - statePublisher: The view state publisher.
    internal init(
        initialState: <nodeName>ViewState,
        statePublisher: <publisherType><<nodeName>ViewState>
    ) {
        self.initialState = initialState
        self.statePublisher = statePublisher
    }
}

/**
 PURPOSE:
 The SwiftUI preview (excluded from release builds).
 */
internal struct <nodeName>View_Previews: PreviewProvider {

    internal static var previews: some View {
        <nodeName>View(
            initialState: <nodeName>ViewState(),
            statePublisher: Empty().eraseToAnyPublisher()
        )
    }
}
