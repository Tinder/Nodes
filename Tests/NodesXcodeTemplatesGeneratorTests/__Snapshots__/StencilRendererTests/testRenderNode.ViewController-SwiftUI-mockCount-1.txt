<fileHeader>

import <viewControllerImport>

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
@MainActor
internal protocol <nodeName>Receiver: AnyObject {}

/**
 PURPOSE:
 Host of the SwiftUI view.
 */
internal final class <nodeName>ViewController: <viewControllerType>
<
    <nodeName>View
> {

    <viewControllerProperties>

    <viewControllerMethods>
}

extension <nodeName>ViewController: <nodeName>ViewControllable {}

/**
 PURPOSE:
 Concrete implementation of the View.
 */
internal struct <nodeName>View {

    // periphery:ignore
    /// The view receiver.
    internal weak var receiver: <nodeName>Receiver?

    /// The initial view state.
    private let initialState: <nodeName>ViewState

    /// <viewStatePropertyComment>.
    private let <viewStatePropertyName>: <publisherType><<nodeName>ViewState, <publisherFailureType>>

    /// The initializer.
    ///
    /// - Parameters:
    ///   - initialState: The initial view state.
    ///   - <viewStatePropertyName>: <viewStatePropertyComment>.
    internal init(
        initialState: <nodeName>ViewState,
        <viewStatePropertyName>: <publisherType><<nodeName>ViewState, <publisherFailureType>>
    ) {
        self.initialState = initialState
        self.<viewStatePropertyName> = <viewStatePropertyName>
            <viewStateOperators>
    }
}

// MARK: - View

extension <nodeName>View: View {

    internal var body: some View {
        WithViewState(initialState: initialState, <viewStatePropertyName>: <viewStatePropertyName>) { viewState in
            Text(verbatim: "\(type(of: viewState))")
        }
    }
}

// MARK: - Preview

// periphery:ignore
/**
 PURPOSE:
 The SwiftUI preview (excluded from release builds).
 */
internal struct <nodeName>View_Previews: PreviewProvider {

    internal static var previews: some View {
        <nodeName>View(
            initialState: <nodeName>ViewState(),
            <viewStatePropertyName>: <viewStateEmptyFactory>
        )
    }
}
