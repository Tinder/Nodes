<fileHeader>

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
internal protocol <nodeName>Receiver: AnyObject {}

/**
 PURPOSE:
 Concrete implementation of the UI.
 */
internal final class <nodeName>ViewController: <viewControllerType>, StateObserver {

    /// The view receiver.
    internal weak var receiver: <nodeName>Receiver?

    <viewControllerSubscriptionsProperty>

    /// The initial view state.
    private let initialState: <nodeName>ViewState

    /// The view state publisher.
    private let statePublisher: <publisherType><<nodeName>ViewState>

    /// The initializer.
    ///
    /// - Parameters:
    ///   - initialState: The initial view state.
    ///   - statePublisher: The view state publisher.
    internal init(
        initialState: <nodeName>ViewState,
        statePublisher: <publisherType><<nodeName>ViewState>
    ) {
        self.initialState = initialState
        self.statePublisher = statePublisher
        super.init()
    }

    internal func update(with viewState: <nodeName>ViewState) {
    }
}

extension <nodeName>ViewController: <nodeName>ViewControllable {}
