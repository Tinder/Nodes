<fileHeader>

/**
 PURPOSE:
 The interface that the Context will speak to the Flow through. Used to initiate navigation as
 an example.
 */
/// @mockable
internal protocol AppFlowInterface: Flow {
    func attachScene(_ viewController: WindowSceneViewControllable)
    func detachScene(_ viewController: WindowSceneViewControllable)
}

/**
 PURPOSE:
 Contains the business logic of the Node. The lifecycle of the Node is bookended between the
 `didBecomeActive` and `willResignActive` methods.
 */
internal final class AppContextImp: AbstractContext {

    /// The Flow instance.
    internal weak var flow: AppFlowInterface?

    /// The Analytics instance.
    private let analytics: AppAnalytics

    private let windowSceneState: AnyPublisher<WindowSceneState, Never>

    /// The initializer.
    /// - Parameters:
    ///   - workers: The Worker instances
    ///   - analytics: The Analytics instance
    internal init(
        workers: [Worker],
        analytics: AppAnalytics,
        windowSceneState: AnyPublisher<WindowSceneState, Never>
    ) {
        self.analytics = analytics
        self.windowSceneState = windowSceneState
        super.init(workers: workers)
    }

    /// Implement logic to execute when the Context becomes active.
    override internal func didBecomeActive() {
        subscribe(to: windowSceneState)
    }

    /// Implement logic to execute when the Context will become inactive.
    override internal func willResignActive() {}

    private func subscribe(to windowSceneState: AnyPublisher<WindowSceneState, Never>) {
        windowSceneState
            .filter(\.isAdded)
            .map(\.windowScene)
            .sink { [weak self] in self?.flow?.attachScene($0) }
            .store(in: &cancellables)
        windowSceneState
            .filter(\.isRemoved)
            .map(\.windowScene)
            .sink { [weak self] in self?.flow?.detachScene($0) }
            .store(in: &cancellables)
    }
}

extension AppContextImp: AppContextInterface {}
