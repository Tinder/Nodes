<fileHeader>

import <flowImport>

/**
 PURPOSE:
 The interface that the Flow will speak to the Context through. Used for informing the Context of
 presentation lifecycle events, as an example.
 */
/// @mockable
internal protocol SceneContextInterface: Context, WindowListener {}

/**
 PURPOSE:
 Responsible for presenting views and starting child Flows, and should not contain business logic.
 */
internal final class SceneFlowImp: AbstractFlow
<
    SceneContextInterface,
    WindowSceneViewControllable
> {

    private let windowBuilder: WindowBuilder

    /// The initializer.
    ///
    /// Inject Plugins or Builders into the Flow in order to create sub-Flows.
    /// - Parameters:
    ///   - context: The Context instance
    ///   - viewController: The View Controller instance
    ///   - windowBuilder: The Window Builder instance
    internal init(
        context: SceneContextInterface,
        viewController: WindowSceneViewControllable,
        windowBuilder: WindowBuilder
    ) {
        self.windowBuilder = windowBuilder
        super.init(context: context, viewController: viewController)
    }

    /// Implement logic to execute when the Flow is started.
    override internal func didStart() {
        attachWindow()
    }

    /// Provides the ``ViewControllable`` instance to the parent `Flow` for display or presentation.
    ///
    /// - Returns: The ``ViewControllable`` instance.
    internal func getViewController() -> WindowSceneViewControllable {
        viewController
    }

    private func attachWindow() {
        let flow: WindowFlow = windowBuilder.build(withListener: context,
                                                   viewController: viewController.makeWindow())
        attach(starting: flow)
    }
}

extension SceneFlowImp: SceneFlow {}
extension SceneFlowImp: SceneFlowInterface {}
