<fileHeader>

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
internal protocol WindowReceiver: AnyObject {}

/**
 PURPOSE:
 Concrete implementation of the UI.
 */
internal final class WindowViewController: <viewControllerType>, StateObserver {

    /// The view receiver.
    internal weak var receiver: WindowReceiver?

    <viewControllerSubscriptionsProperty>

    /// The initial view state.
    private let initialState: WindowViewState

    /// <viewStatePropertyComment>.
    private let <viewStatePropertyName>: <publisherType><WindowViewState>

    /// The initializer.
    ///
    /// - Parameters:
    ///   - initialState: The initial view state.
    ///   - <viewStatePropertyName>: <viewStatePropertyComment>.
    internal init(
        initialState: WindowViewState,
        <viewStatePropertyName>: <publisherType><WindowViewState>
    ) {
        self.initialState = initialState
        self.<viewStatePropertyName> = <viewStatePropertyName>
        super.init()
    }

    internal func update(with viewState: WindowViewState) {}
}

extension WindowViewController: WindowViewControllable {}
