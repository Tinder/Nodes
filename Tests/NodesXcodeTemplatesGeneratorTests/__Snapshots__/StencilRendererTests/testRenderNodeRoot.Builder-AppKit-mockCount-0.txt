<fileHeader>

internal protocol RootFlow: <viewControllableFlowType> {}

public protocol RootDependency: Dependency {}

internal typealias RootDynamicBuildDependency = RootListener

internal typealias RootDynamicComponentDependency = Void

public final class RootComponent: Component
<
    RootDependency
> {

    private let dynamicDependency: RootDynamicComponentDependency

    internal init(parent: Scope, dynamicDependency: RootDynamicComponentDependency = ()) {
        self.dynamicDependency = dynamicDependency
        super.init(parent: parent)
    }
}

internal protocol RootBuilder: AnyObject {
    func build(
        withListener listener: RootListener
    ) -> RootFlow
}

internal final class RootBuilderImp: AbstractBuilder
<
    RootComponent,
    RootFlow,
    RootDynamicBuildDependency,
    RootDynamicComponentDependency
> {

    internal func build(
        withListener listener: RootListener
    ) -> RootFlow {
        let dynamicBuildDependency: RootDynamicBuildDependency = listener
        let dynamicComponentDependency: RootDynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    override internal func build(
        component: RootComponent,
        dynamicBuildDependency: RootDynamicBuildDependency
    ) -> RootFlow {
        let listener: RootListener = dynamicBuildDependency
        let analytics: RootAnalyticsImp = .init()
        let context: RootContextImp = .init(
            workers: [],
            analytics: analytics
        )
        context.listener = listener
        let viewStateFactory: RootViewStateFactory = .init()
        let viewState: Publishers.Map = .init(
            upstream: context.$state,
            transform: viewStateFactory
        )
        let viewController: RootViewController = .init(
            initialState: viewStateFactory(context.state),
            statePublisher: viewState.eraseToAnyPublisher()
        )
        viewController.receiver = context
        let flow: RootFlowImp = .init(
            context: context,
            viewController: viewController
        )
        context.flow = flow
        return flow
    }
}

extension RootBuilderImp: RootBuilder {}
