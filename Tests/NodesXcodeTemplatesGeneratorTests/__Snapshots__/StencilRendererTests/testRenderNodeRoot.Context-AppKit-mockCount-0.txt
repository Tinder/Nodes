<fileHeader>

internal protocol RootListener: AnyObject {}

internal protocol RootFlowInterface: Flow {
    func didBecomeReady()
}

internal final class RootContextImp: AbstractContext
<
    <cancellableType>
> {

    internal weak var flow: RootFlowInterface?

    internal weak var listener: RootListener?

    internal private(set) var state: RootState

    private let analytics: RootAnalytics

    private var isReady: Bool = false

    internal init(
        workers: [Worker],
        analytics: RootAnalytics
    ) {
        self.state = RootState()
        self.analytics = analytics
        super.init(workers: workers)
    }

    override internal func didBecomeActive() {}

    override internal func willResignActive() {}
}

extension RootContextImp: RootContextInterface {}
extension RootContextImp: RootReceiver {

    internal func viewDidAppear() {
        guard !isReady
        else { return }
        isReady = true
        flow?.didBecomeReady()
    }
}
