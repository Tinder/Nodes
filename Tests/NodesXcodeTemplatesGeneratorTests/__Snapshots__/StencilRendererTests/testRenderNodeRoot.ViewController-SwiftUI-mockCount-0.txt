<fileHeader>

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
internal protocol RootReceiver: AnyObject {}

/**
 PURPOSE:
 Host of the SwiftUI view.
 */
internal final class RootViewController: <viewControllerType>
<
    RootView
> {}

extension RootViewController: RootViewControllable {}

/**
 PURPOSE:
 Concrete implementation of the View.
 */
internal struct RootView: View {

    /// The body of the view.
    internal var body: some View {
        WithViewState(initialState: initialState, <viewStatePropertyName>: <viewStatePropertyName>) { viewState in
            Text(verbatim: "\(type(of: viewState))")
        }
    }

    /// The view receiver.
    internal weak var receiver: RootReceiver?

    /// The initial view state.
    private let initialState: RootViewState

    /// <viewStatePropertyComment>.
    private let <viewStatePropertyName>: <publisherType><RootViewState>

    /// The initializer.
    ///
    /// - Parameters:
    ///   - initialState: The initial view state.
    ///   - <viewStatePropertyName>: <viewStatePropertyComment>.
    internal init(
        initialState: RootViewState,
        <viewStatePropertyName>: <publisherType><RootViewState>
    ) {
        self.initialState = initialState
        self.<viewStatePropertyName> = <viewStatePropertyName>
    }
}

#Preview {
    RootView(
        initialState: RootViewState(),
        <viewStatePropertyName>: <viewStateEmptyFactory>
    )
}
