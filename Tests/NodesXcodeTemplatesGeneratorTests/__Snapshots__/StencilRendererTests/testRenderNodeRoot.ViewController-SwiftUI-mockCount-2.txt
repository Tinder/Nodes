<fileHeader>

import <viewControllerImport1>
import <viewControllerImport2>

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
internal protocol RootReceiver: AnyObject {
    func viewDidAppear()
}

/**
 PURPOSE:
 Host of the SwiftUI view.
 */
internal final class RootViewController: <viewControllerType>
<
    RootView
> {

    <viewControllerProperties>

    <viewControllerMethods>
}

extension RootViewController: RootViewControllable {}

/**
 PURPOSE:
 Concrete implementation of the View.
 */
internal struct RootView: View {

    /// The body of the view.
    internal var body: some View {
        WithViewState(initialState: initialState, statePublisher: statePublisher) { viewState in
            Text(verbatim: "\(type(of: viewState))")
        }
    }

    // periphery:ignore
    /// The view receiver.
    internal weak var receiver: RootReceiver?

    /// The initial view state.
    private let initialState: RootViewState

    /// <viewStatePropertyComment>.
    private let statePublisher: <publisherType><RootViewState, <publisherFailureType>>

    /// The initializer.
    ///
    /// - Parameters:
    ///   - initialState: The initial view state.
    ///   - statePublisher: <viewStatePropertyComment>.
    internal init(
        initialState: RootViewState,
        statePublisher: <publisherType><RootViewState, <publisherFailureType>>
    ) {
        self.initialState = initialState
        self.statePublisher = statePublisher
            <viewStateOperators>
    }
}

// periphery:ignore
/**
 PURPOSE:
 The SwiftUI preview (excluded from release builds).
 */
internal struct RootView_Previews: PreviewProvider {

    internal static var previews: some View {
        RootView(
            initialState: RootViewState(),
            statePublisher: Empty().eraseToAnyPublisher()
        )
    }
}
