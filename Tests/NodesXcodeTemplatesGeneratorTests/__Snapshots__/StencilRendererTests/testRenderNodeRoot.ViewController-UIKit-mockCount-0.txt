<fileHeader>

internal protocol RootReceiver: AnyObject {
    func viewDidAppear()
}

internal final class RootViewController: <viewControllerType>, StateObserver {

    internal weak var receiver: RootReceiver?

    private var cancellables: Set<<cancellableType>> = .init()

    private let initialState: RootViewState

    private let statePublisher: <publisherType><RootViewState>

    internal init(
        initialState: RootViewState,
        statePublisher: <publisherType><RootViewState>
    ) {
        self.initialState = initialState
        self.statePublisher = statePublisher
        super.init()
    }

    internal func update(with viewState: RootViewState) {
    }
}

extension RootViewController: RootViewControllable {}
