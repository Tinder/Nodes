<fileHeader>

internal protocol <nodeName>Flow: Flow {}

public protocol <nodeName>Dependency: Dependency {}

internal typealias <nodeName>DynamicBuildDependency = (<nodeName>Listener, <nodeName>ViewControllable)

internal typealias <nodeName>DynamicComponentDependency = Void

// MARK: - Component

public final class <nodeName>Component: Component
<
    <nodeName>Dependency
> {

    /*
     Dependencies
     ============

     Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).

     fileprivate let example: Example = .init()

     Whenever possible, for example when the dependency does not provide shared state, define the property as a
     factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     Needle compatibility whenever the access control is increased.

     fileprivate var exampleFactory: Example {
         Example()
     }

     When shared state is desired but the dependency depends on another dependency, use the `shared` helper method
     that always returns the same instance from a computed property.

     fileprivate var example: Example {
         shared { Example(otherDependency: dependency.otherDependency) }
     }

     */

    private let dynamicDependency: <nodeName>DynamicComponentDependency

    internal init(parent: Scope, dynamicDependency: <nodeName>DynamicComponentDependency = ()) {
        self.dynamicDependency = dynamicDependency
        super.init(parent: parent)
    }

    /*
     Child Components
     ================

     Declare child component factories as 'fileprivate' methods.

     fileprivate func <name>ComponentFactory() -> <Name>Component {
         <Name>Component(parent: self)
     }

     */
}

// MARK: - Builder

internal protocol <nodeName>Builder: AnyObject {
    func build(
        withListener listener: <nodeName>Listener,
        viewController: <nodeName>ViewControllable
    ) -> <nodeName>Flow
}

internal final class <nodeName>BuilderImp: AbstractBuilder
<
    <nodeName>Component,
    <nodeName>Flow,
    <nodeName>DynamicBuildDependency,
    <nodeName>DynamicComponentDependency
> {

    internal func build(
        withListener listener: <nodeName>Listener,
        viewController: <nodeName>ViewControllable
    ) -> <nodeName>Flow {
        let dynamicBuildDependency: <nodeName>DynamicBuildDependency = (listener, viewController)
        let dynamicComponentDependency: <nodeName>DynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    override internal func build(
        component: <nodeName>Component,
        dynamicBuildDependency: <nodeName>DynamicBuildDependency
    ) -> <nodeName>Flow {
        let listener: <nodeName>Listener = dynamicBuildDependency.0
        let viewController: <nodeName>ViewControllable = dynamicBuildDependency.1
        let analytics: <nodeName>AnalyticsImp = .init()
        let context: <nodeName>ContextImp = .init(
            workers: [],
            analytics: analytics
        )
        context.listener = listener
        let flow: <nodeName>FlowImp = .init(
            context: context,
            viewController: viewController
        )
        context.flow = flow
        return flow
    }
}

extension <nodeName>BuilderImp: <nodeName>Builder {}
