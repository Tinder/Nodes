<fileHeader>

internal protocol <pluginListName>Flow: <viewControllableFlowType> {}

internal protocol <pluginListName>Listener: AnyObject {}

internal protocol <pluginListName>Builder: AnyObject {
    func build(
        withListener listener: <pluginListName>Listener
    ) -> <pluginListName>Flow
}

public protocol <pluginListName>PluginListDependency: Dependency {}

public final class <pluginListName>PluginListComponent: Component
<
    <pluginListName>PluginListDependency
> {

    /*
     Dependencies
     ============

     Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).

     fileprivate let example: Example = .init()

     Whenever possible, for example when the dependency does not provide shared state, define the property as a
     factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     Needle compatibility whenever the access control is increased.

     fileprivate var exampleFactory: Example {
         Example()
     }

     When shared state is desired but the dependency depends on another dependency, use the `shared` helper method
     that always returns the same instance from a computed property.

     fileprivate var example: Example {
         shared { Example(otherDependency: dependency.otherDependency) }
     }

     */

    /*
     Child Components
     ================

     Declare child component factories as 'fileprivate' methods.

     fileprivate func <name>ComponentFactory() -> <Name>Component {
         <Name>Component(parent: self)
     }

     */
}

internal typealias <pluginListName>PluginListKeyType = String

internal typealias <pluginListName>PluginListStateType = Void

internal protocol <pluginListName>PluginList {
    func createAll() -> [<pluginListName>Builder]
    func create() -> <pluginListName>Builder?
    func create(key: <pluginListName>PluginListKeyType) -> <pluginListName>Builder?
}

internal final class <pluginListName>PluginListImp: PluginList
<
    <pluginListName>PluginListKeyType,
    <pluginListName>PluginListComponent,
    <pluginListName>Builder,
    <pluginListName>PluginListStateType
> {

    override internal func plugins(
        component: <pluginListName>PluginListComponent
    ) -> KeyValuePairs<<pluginListName>PluginListKeyType, AnyPlugin> {
        [:] // Example:
//        [
//            "example": AnyPlugin(ExamplePluginImp(componentFactory: component.examplePluginComponentFactory).create())
//        ]
    }

    /// The method in which a custom creation order may (optionally) be defined.
    ///
    /// There is no need to call `super` when overriding this method unless it is desirable to reference (or modify)
    /// the default order.
    /// - Parameters:
    ///   - component: The component instance
    ///   - state: The state
    /// - Returns: The keys defining the Plugin creation order
//    override internal func creationOrder(
//        component: <pluginListName>PluginListComponent,
//        state: <pluginListName>PluginListStateType
//    ) -> [<pluginListName>PluginListKeyType] {
//        super.creationOrder(component: component, state: state)
//    }
}

extension <pluginListName>PluginListImp: <pluginListName>PluginList {}
