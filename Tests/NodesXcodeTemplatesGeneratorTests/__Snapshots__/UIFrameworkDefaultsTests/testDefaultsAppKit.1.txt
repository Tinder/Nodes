â–¿ UIFramework
  - framework: Framework.appKit
  - viewControllerMethods: "@available(*, unavailable)\ninternal required init?(coder: NSCoder) {\n    preconditionFailure(\"init(coder:) has not been implemented\")\n}\n\noverride internal func viewDidLoad() {\n    super.viewDidLoad()\n    update(with: initialState)\n}\n\noverride internal func viewWillAppear() {\n    super.viewWillAppear()\n    observe(statePublisher).store(in: &cancellables)\n}\n\noverride internal func viewWillDisappear() {\n    super.viewWillDisappear()\n    cancelSubscriptions()\n}\n\nprivate func cancelSubscriptions() {\n    cancellables.forEach { cancellable in\n        cancellable.cancel()\n        LeakDetector.detect(cancellable)\n    }\n    cancellables.removeAll()\n}"
  - viewControllerMethodsForRootNode: "@available(*, unavailable)\ninternal required init?(coder: NSCoder) {\n    preconditionFailure(\"init(coder:) has not been implemented\")\n}\n\noverride internal func viewDidLoad() {\n    super.viewDidLoad()\n    update(with: initialState)\n}\n\noverride internal func viewWillAppear() {\n    super.viewWillAppear()\n    observe(statePublisher).store(in: &cancellables)\n}\n\noverride internal func viewDidAppear() {\n    super.viewDidAppear()\n    receiver?.viewDidAppear()\n}\n\noverride internal func viewWillDisappear() {\n    super.viewWillDisappear()\n    cancelSubscriptions()\n}\n\nprivate func cancelSubscriptions() {\n    cancellables.forEach { cancellable in\n        cancellable.cancel()\n        LeakDetector.detect(cancellable)\n    }\n    cancellables.removeAll()\n}"
  - viewControllerProperties: ""
