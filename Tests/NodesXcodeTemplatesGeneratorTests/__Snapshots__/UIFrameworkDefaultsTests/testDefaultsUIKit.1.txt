â–¿ UIFramework
  - framework: Framework.uiKit
  - viewControllerMethods: "override internal func viewDidLoad() {\n    super.viewDidLoad()\n    view.backgroundColor = .systemBackground\n    update(with: initialState)\n}\n\noverride internal func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    cancelSubscriptions()\n    observe(statePublisher).store(in: &cancellables)\n}\n\noverride internal func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    cancelSubscriptions()\n}\n\nprivate func cancelSubscriptions() {\n    cancellables.forEach { cancellable in\n        cancellable.cancel()\n        LeakDetector.detect(cancellable)\n    }\n    cancellables.removeAll()\n}"
  - viewControllerMethodsForRootNode: "override internal func viewDidLoad() {\n    super.viewDidLoad()\n    view.backgroundColor = .systemBackground\n    update(with: initialState)\n}\n\noverride internal func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    cancelSubscriptions()\n    observe(statePublisher).store(in: &cancellables)\n}\n\noverride internal func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    receiver?.viewDidAppear()\n}\n\noverride internal func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    cancelSubscriptions()\n}\n\nprivate func cancelSubscriptions() {\n    cancellables.forEach { cancellable in\n        cancellable.cancel()\n        LeakDetector.detect(cancellable)\n    }\n    cancellables.removeAll()\n}"
  - viewControllerProperties: ""
