//___FILEHEADER___

import Combine
import Nodes
import SwiftUI

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
internal protocol ___VARIABLE_productName___Receiver: AnyObject {}

/**
 PURPOSE:
 Host of the SwiftUI view.
 */
internal final class ___VARIABLE_productName___ViewController: UIHostingController
<
    ___VARIABLE_productName___View
> {}

extension ___VARIABLE_productName___ViewController: ___VARIABLE_productName___ViewControllable {}

/**
 PURPOSE:
 Concrete implementation of the View.
 */
internal struct ___VARIABLE_productName___View: View {

    /// The body of the view.
    internal var body: some View {
        WithViewState(initialState: initialState, statePublisher: statePublisher) { viewState in
            Text(verbatim: "\(type(of: viewState))")
        }
    }

    /// The view receiver.
    internal weak var receiver: ___VARIABLE_productName___Receiver?

    /// The initial view state.
    private let initialState: ___VARIABLE_productName___ViewState

    /// The view state publisher.
    private let statePublisher: AnyPublisher<___VARIABLE_productName___ViewState, Never>

    /// The initializer.
    ///
    /// - Parameters:
    ///   - initialState: The initial view state.
    ///   - statePublisher: The view state publisher.
    internal init(
        initialState: ___VARIABLE_productName___ViewState,
        statePublisher: AnyPublisher<___VARIABLE_productName___ViewState, Never>
    ) {
        self.initialState = initialState
        self.statePublisher = statePublisher
            .removeDuplicates()
            .receive(on: DispatchQueue.main)
            .eraseToAnyPublisher()
    }
}

#Preview {
    ___VARIABLE_productName___View(
        initialState: ___VARIABLE_productName___ViewState(),
        statePublisher: Empty().eraseToAnyPublisher()
    )
}
