//___FILEHEADER___

import NeedleFoundation
import Nodes

/**
 PURPOSE:
 Declares the dependencies required by this Plugin that will be injected (not created by this Plugin itself).
 */
/// @mockable
public protocol ___VARIABLE_productName___PluginDependency: Dependency {}

/**
 PURPOSE:
 Declares dependencies that are owned by this Plugin.
 */
public final class ___VARIABLE_productName___PluginComponent: Component
<
    ___VARIABLE_productName___PluginDependency
> {

    /*
     Dependencies
     ============

     Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).

     fileprivate let example: Example = .init()

     Whenever possible, for example when the dependency does not provide shared state, define the property as a
     factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     Needle compatibility whenever the access control is increased.

     fileprivate var exampleFactory: Example {
         Example()
     }

     When shared state is desired but the dependency depends on another dependency, use the `shared` helper method
     that always returns the same instance from a computed property.

     fileprivate var example: Example {
         shared { Example(otherDependency: dependency.otherDependency) }
     }

     */

    /*
     Child Components
     ================

     Declare child component factories as 'fileprivate' methods.

     fileprivate func <name>ComponentFactory() -> <Name>Component {
         <Name>Component(parent: self)
     }

     */

    fileprivate func componentFactory() -> ___VARIABLE_productName___Component {
        ___VARIABLE_productName___Component(parent: self)
    }
}

/**
 PURPOSE:
 To provide additional state used in determining if the Plugin is enabled (can be any type relevant to the Plugin).
 */
internal typealias ___VARIABLE_productName___PluginStateType = Void

/**
 PURPOSE:
 The Plugin interface (available to mock for testability).
 */
/// @mockable
internal protocol ___VARIABLE_productName___Plugin {
    func create() -> ___VARIABLE_productName___Builder?
}

/**
 PURPOSE:
 Concrete implementation of the Plugin.
 */
internal final class ___VARIABLE_productName___PluginImp: Plugin
<
    ___VARIABLE_productName___PluginComponent,
    ___VARIABLE_productName___Builder,
    ___VARIABLE_productName___PluginStateType
> {

    /// The method in which the Plugin's enabled criteria is defined.
    /// - Parameters:
    ///   - component: The component instance
    ///   - state: The state
    /// - Returns: The enabled status of the Plugin
    override internal func isEnabled(
        component: ___VARIABLE_productName___PluginComponent,
        state: ___VARIABLE_productName___PluginStateType
    ) -> Bool {
        false
    }

    /// The factory method in which the instance is initialized.
    /// - Parameter component: The component instance
    /// - Returns: The initialized instance
    override internal func build(
        component: ___VARIABLE_productName___PluginComponent
    ) -> ___VARIABLE_productName___Builder {
        ___VARIABLE_productName___BuilderImp(componentFactory: component.componentFactory)
    }
}

extension ___VARIABLE_productName___PluginImp: ___VARIABLE_productName___Plugin {}
