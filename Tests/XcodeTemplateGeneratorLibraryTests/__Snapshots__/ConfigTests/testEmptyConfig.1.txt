▿ Config
  ▿ baseImports: 1 member
    - "Combine"
  - cancellableType: "AnyCancellable"
  - dependencies: 0 elements
  ▿ diGraphImports: 1 member
    - "NeedleFoundation"
  - fileHeader: "//___FILEHEADER___"
  - flowProperties: 0 elements
  - isViewInjectedNodeEnabled: true
  - publisherFailureType: ", Never"
  - publisherType: "AnyPublisher"
  ▿ uiFrameworks: 2 elements
    ▿ UIKit
      ▿ uiKit: (1 element)
        ▿ options: Options
          - viewControllerMethods: "override func viewDidLoad() {\n    super.viewDidLoad()\n    view.backgroundColor = .systemBackground\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    observe(viewState).store(in: &cancellables)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    cancellables.removeAll()\n}"
          - viewControllerMethodsForRootNode: "override func viewDidLoad() {\n    super.viewDidLoad()\n    view.backgroundColor = .systemBackground\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    observe(viewState).store(in: &cancellables)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    receiver?.viewDidAppear()\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    cancellables.removeAll()\n}"
          - viewControllerProperties: ""
          - viewControllerSuperParameters: "nibName: nil, bundle: nil"
    ▿ SwiftUI
      ▿ swiftUI: (1 element)
        ▿ options: Options
          - viewControllerMethods: ""
          - viewControllerMethodsForRootNode: "override func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    receiver?.viewDidAppear()\n}"
          - viewControllerProperties: ""
          - viewControllerSuperParameters: ""
  - viewControllableFlowType: "ViewControllableFlow"
  - viewControllableType: "ViewControllable"
  - viewControllerUpdateComment: "// Add implementation to update the user interface when the view state changes."
  - viewStateOperators: ".removeDuplicates()\n.receive(on: DispatchQueue.main)\n.eraseToAnyPublisher()"
  - viewStatePublisher: "Just(.initialState).eraseToAnyPublisher()"
