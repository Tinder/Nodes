<fileHeader>

import <builderImports>

/**
 PURPOSE:
 The interface of the Flow.
 */
internal protocol <nodeName>Flow: <viewControllableFlowType> {}

/**
 PURPOSE:
 Declares the dependencies required by this Node that will be injected (not created by this Node itself).
 */
public protocol <nodeName>Dependency: Dependency {

    var <dependenciesName>: <dependenciesType> { get }
}

/**
 PURPOSE:
 A dependency needed by the Builder (such as a Listener), passed in from the caller (i.e. is not on the DI graph).

 Can be a tuple containing multiple values when necessary.
 */
internal typealias <nodeName>DynamicBuildDependency = <nodeName>Listener

/**
 PURPOSE:
 A dependency used by the Component itself, passed into the Component's initializer (in the Component factory).

 Can be a tuple containing multiple values when necessary.
 */
internal typealias <nodeName>DynamicComponentDependency = Void

// MARK: - Component

/**
 PURPOSE:
 Declares dependencies that are owned by this Node.
 */
internal final class <nodeName>Component: Component
<
    <nodeName>Dependency
> {

    /*
     Dependencies
     ============

     Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).

     fileprivate let example: Example = .init()

     Whenever possible, for example when the dependency does not provide shared state, define the property as a
     factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     Needle compatibility whenever the access control is increased.

     fileprivate var exampleFactory: Example {
         Example()
     }

     When shared state is desired but the dependency depends on another dependency, use the `shared` helper method
     that always returns the same instance from a computed property.

     fileprivate var example: Example {
         shared { Example(otherDependency: dependency.otherDependency) }
     }

     */

    private let dynamicDependency: <nodeName>DynamicComponentDependency

    /// The initializer.
    ///
    /// Remove `dynamicDependency` default parameter when its type is not `Void`.
    ///
    /// - Parameter parent: The parent scope
    /// - Parameter dynamicDependency: The dynamic component dependency
    internal init(parent: Scope, dynamicDependency: <nodeName>DynamicComponentDependency = ()) {
        self.dynamicDependency = dynamicDependency
        super.init(parent: parent)
    }

    /*
     Child Components
     ================

     Declare child component factories as 'fileprivate' methods.

     fileprivate func <nodeName>ComponentFactory() -> ChildComponent {
         ChildComponent(parent: self)
     }

     */
}

// MARK: - Builder

/**
 PURPOSE:
 The Builder interface (available to mock for testability).
 */
internal protocol <nodeName>Builder: AnyObject {
    func build(withListener listener: <nodeName>Listener) -> <nodeName>Flow
}

/**
 PURPOSE:
 Concrete implementation of the Builder, where everything is created and associated.
 */
internal final class <nodeName>BuilderImp: AbstractBuilder
<
    <nodeName>Component,
    <nodeName>Flow,
    <nodeName>DynamicBuildDependency,
    <nodeName>DynamicComponentDependency
> {

    /// The purpose of this method is to route input parameters to either the dynamic build dependency and/or
    /// the dynamic component dependency.
    ///
    /// The dynamic dependencies can be tuples containing multiple values when necessary.
    /// - Parameter listener: An object that can listen for signals from the Node
    /// - Returns: The Flow instance
    internal func build(withListener listener: <nodeName>Listener) -> <nodeName>Flow {
        let dynamicBuildDependency: <nodeName>DynamicBuildDependency = listener
        let dynamicComponentDependency: <nodeName>DynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    /// The factory method in which the Context and Flow are initialized.
    /// - Parameters:
    ///   - component: The component instance
    ///   - dynamicBuildDependency: The dynamic build dependency
    /// - Returns: The Flow instance
    override internal func build(
        component: <nodeName>Component,
        dynamicBuildDependency: <nodeName>DynamicBuildDependency
    ) -> <nodeName>Flow {
        let listener: <nodeName>Listener = dynamicBuildDependency
        let analytics: <nodeName>AnalyticsImp = .init()
        let viewStateWorker: <workerName>WorkerImp = .init(
            analytics: analytics
        )
        let viewController: <nodeName>ViewController = .init(
            viewState: viewStateWorker.viewState
        )
        viewController.analytics = analytics
        let context: <nodeName>ContextImp = .init(
            presentable: viewController,
            workers: [viewStateWorker],
            analytics: analytics
        )
        context.listener = listener
        return <nodeName>FlowImp(
            context: context,
            viewController: viewController,
            <flowPropertiesName>: component.dependency.<flowPropertiesName>
        )
    }
}

extension <nodeName>BuilderImp: <nodeName>Builder {}
