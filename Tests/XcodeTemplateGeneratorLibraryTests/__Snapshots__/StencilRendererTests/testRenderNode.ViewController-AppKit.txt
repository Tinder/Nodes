<fileHeader>

import <viewControllerImports>

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
internal protocol <nodeName>Receiver: AnyObject {}

/**
 PURPOSE:
 Concrete implementation of the UI.
 */
internal final class <nodeName>ViewController: <viewControllerType>, StateObserver {

    <viewControllerProperties>

    /// The view receiver.
    internal weak var receiver: <nodeName>Receiver?

    /// The Analytics instance.
    internal weak var analytics: <nodeName>Analytics?

    /// The collection of cancellable instances.
    private var cancellables: Set<<cancellableType>> = .init()

    /// The view state publisher.
    private let viewState: <publisherType><<nodeName>ViewState<publisherFailureType>>

    /// The initial state of the view.
    private let initialState: <nodeName>ViewState

    /// The initializer.
    ///
    /// - Parameters:
    ///   - viewState: the view state publisher.
    ///   - initialState: the initial state of the view.
    internal init(
        viewState: <publisherType><<nodeName>ViewState<publisherFailureType>>,
        initialState: <nodeName>ViewState
    ) {
        self.viewState = viewState
            <viewStateOperators>
        self.initialState = initialState
        super.init(<viewControllerSuperParameters>)
    }

    @available(*, unavailable)
    internal required init?(coder: NSCoder) {
        preconditionFailure("init(coder:) has not been implemented")
    }

    <viewControllerMethods>

    internal func update(with viewState: <nodeName>ViewState) {
        <viewControllerUpdateComment>
    }
}

extension <nodeName>ViewController: <nodeName>ViewControllable {}
