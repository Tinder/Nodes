<fileHeader>

import <viewControllerImports>

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
internal protocol RootReceiver: AnyObject {
    func viewDidAppear()
}

/**
 PURPOSE:
 Concrete implementation of the UI.
 */
internal final class RootViewController: <viewControllerType>, StateObserver {

    <viewControllerProperties>

    /// The view receiver.
    internal weak var receiver: RootReceiver?

    /// The Analytics instance.
    internal weak var analytics: RootAnalytics?

    /// The collection of cancellable instances.
    private var cancellables: Set<<cancellableType>> = .init()

    /// The initial state of the view.
    private let initialViewState: RootViewState

    /// The view state publisher.
    private let viewState: <publisherType><RootViewState<publisherFailureType>>

    /// The initializer.
    ///
    /// - Parameters:
    ///   - initialViewState: the initial state of the view.
    ///   - viewState: the view state publisher.
    internal init(
        initialViewState: RootViewState,
        viewState: <publisherType><RootViewState<publisherFailureType>>
    ) {
        self.initialViewState = initialViewState
        self.viewState = viewState
            <viewStateOperators>
        super.init(<viewControllerSuperParameters>)
    }

    @available(*, unavailable)
    internal required init?(coder: NSCoder) {
        preconditionFailure("init(coder:) has not been implemented")
    }

    <viewControllerMethods>

    internal func update(with viewState: RootViewState) {
        <viewControllerUpdateComment>
    }
}

extension RootViewController: RootViewControllable {}
