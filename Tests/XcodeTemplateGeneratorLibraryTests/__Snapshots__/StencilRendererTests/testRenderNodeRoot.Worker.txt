<fileHeader>

import <workerImports>

/**
 PURPOSE:
 Encapsulates work to be performed by the Node.
 */
internal protocol <workerName>Worker: Worker {
    var viewState: <publisherType><RootViewState<publisherFailureType>> { get }
}

/**
 PURPOSE:
 Concrete implementation of the Worker.
 */
internal final class <workerName>WorkerImp: AbstractWorker
<
    <cancellableType>
> {

    /// The view state publisher.
    internal let viewState: <publisherType><RootViewState<publisherFailureType>>

    /// The initializer.
    internal init() {
        viewState = <viewStatePublisher>
    }

    /// Implement logic to execute when the Worker is started.
    override internal func didStart() {}

    /// Implement logic to execute when the Worker has stopped.
    override internal func willStop() {}
}

extension <workerName>WorkerImp: <workerName>Worker {}
