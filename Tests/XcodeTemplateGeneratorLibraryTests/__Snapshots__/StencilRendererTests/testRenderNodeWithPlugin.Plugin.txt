<fileHeader>

import <pluginImports>

/**
 PURPOSE:
 Declares the dependencies required by this Plugin that will be injected (not created by this Plugin itself).
 */
public protocol <nodeName>PluginDependency: Dependency {}

/**
 PURPOSE:
 Declares dependencies that are owned by this Plugin.
 */
internal final class <nodeName>PluginComponent: Component
    <<nodeName>PluginDependency> {

    /*
     Dependencies
     ============

     Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).

     fileprivate let example: Example = .init()

     Whenever possible, for example when the dependency does not provide shared state, define the property as a
     factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     Needle compatibility whenever the access control is increased.

     fileprivate var exampleFactory: Example {
         Example()
     }

     When shared state is desired but the dependency depends on another dependency, use the `shared` helper method
     that always returns the same instance from a computed property.

     fileprivate var example: Example {
         shared { Example(otherDependency: dependency.otherDependency) }
     }

     */

    /*
     Child Components
     ================

     Declare child component factories as 'fileprivate' methods.

     fileprivate func childComponentFactory() -> ChildComponent {
         ChildComponent(parent: self)
     }

     */
}

/**
 PURPOSE:
 To provide additional state used in determining if the Plugin is enabled (can be any type relevant to the plugin).
 */
internal typealias <nodeName>PluginStateType = Void

/**
 PURPOSE:
 The Plugin interface (available to mock for testability).
 */
internal protocol <nodeName>Plugin {
    func create() -> <returnType>?
}

internal typealias <nodeName>PluginType = Plugin
    <
    <nodeName>PluginComponent,
    <returnType>,
    <nodeName>PluginStateType
    >

/**
 PURPOSE:
 Concrete implementation of the Plugin.
 */
internal final class <nodeName>PluginImp:
    <nodeName>PluginType, <nodeName>Plugin {

    /// The method in which the Plugin's enabled criteria is defined.
    /// - Parameters:
    ///   - component: The component instance
    ///   - state: The state
    /// - Returns: The enabled status of the Plugin
    override internal func isEnabled(
        component: <nodeName>PluginComponent,
        state: <nodeName>PluginStateType
    ) -> Bool {
        false
    }

    /// The factory method in which the instance is initialized.
    /// - Parameter component: The component instance
    /// - Returns: The initialized instance
    override internal func build(
        component: <nodeName>PluginComponent
    ) -> <returnType> {
        // TODO: Initialize instance
    }
}
