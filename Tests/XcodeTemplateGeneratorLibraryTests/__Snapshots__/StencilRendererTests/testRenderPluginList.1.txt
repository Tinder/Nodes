<fileHeader>

import <pluginListImports>

/**
 PURPOSE:
 The common Flow interface.
 */
internal protocol <pluginListName>Flow: <viewControllableFlowType> {}

/**
 PURPOSE:
 The common Listener interface.
 */
internal protocol <pluginListName>Listener: AnyObject {}

/**
 PURPOSE:
 The common Builder interface.
 */
internal protocol <pluginListName>Builder: AnyObject {
    func build(withListener listener: <pluginListName>Listener) -> <pluginListName>Flow
}

/**
 PURPOSE:
 Declares the dependencies required by this Plugin List that will be injected (not created by this Plugin List itself).
 */
public protocol <pluginListName>PluginListDependency: Dependency {}

/**
 PURPOSE:
 Declares dependencies that are owned by this Plugin List.
 */
internal final class <pluginListName>PluginListComponent: Component
    <<pluginListName>PluginListDependency> {

    /*
     Dependencies
     ============

     Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).

     fileprivate let example: Example = .init()

     Whenever possible, for example when the dependency does not provide shared state, define the property as a
     factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     Needle compatibility whenever the access control is increased.

     fileprivate var exampleFactory: Example {
         Example()
     }

     When shared state is desired but the dependency depends on another dependency, use the `shared` helper method
     that always returns the same instance from a computed property.

     fileprivate var example: Example {
         shared { Example(otherDependency: dependency.otherDependency) }
     }

     */

    /*
     Child Components
     ================

     Declare child component factories as 'fileprivate' methods.

     fileprivate func childComponentFactory() -> ChildComponent {
         ChildComponent(parent: self)
     }

     */
}

/**
 PURPOSE:
 The type used for the keys of the Plugin List (can be any `Hashable` type such as `String` or an enumeration).
 */
internal typealias <pluginListName>PluginListKeyType = String

/**
 PURPOSE:
 To provide additional state used in determining if the plugins are enabled (can be any type relevant to the plugins).
 */
internal typealias <pluginListName>PluginListStateType = Void

/**
 PURPOSE:
 The Plugin List protocol (available to mock for testability).
 */
internal protocol <pluginListName>PluginList {
    func createAll() -> [<pluginListName>Builder]
    func create() -> <pluginListName>Builder?
    func create(key: <pluginListName>PluginListKeyType) -> <pluginListName>Builder?
}

internal typealias <pluginListName>PluginListType = PluginList
    <
    <pluginListName>PluginListKeyType,
    <pluginListName>PluginListComponent,
    <pluginListName>Builder,
    <pluginListName>PluginListStateType
    >

/**
 PURPOSE:
 Concrete implementation of the Plugin List providing the Plugin collection and (optionally) the creation order.
 */
internal final class <pluginListName>PluginListImp:
    <pluginListName>PluginListType, <pluginListName>PluginList {

    /// The method in which the Plugins are paired with keys and wrapped in type erased `AnyPlugin` instances.
    /// - Parameter component: The component instance
    /// - Returns: The Plugin collection
    override internal func plugins(
        component: <pluginListName>PluginListComponent
    ) -> KeyValuePairs<<pluginListName>PluginListKeyType, AnyPlugin> {
        [:] // Example:
//        [
//            "example": AnyPlugin(ExamplePluginImp(componentFactory: component.examplePluginComponentFactory).create())
//        ]
    }

    /// The method in which a custom creation order may (optionally) be defined.
    ///
    /// There is no need to call `super` when overriding this method unless it is desirable to reference (or modify)
    /// the default order.
    /// - Parameters:
    ///   - component: The component instance
    ///   - state: The state
    /// - Returns: The keys defining the Plugin creation order
//    override internal func creationOrder(
//        component: <pluginListName>PluginListComponent,
//        state: <pluginListName>PluginListStateType
//    ) -> [<pluginListName>PluginListKeyType] {
//        super.creationOrder(component: component, state: state)
//    }
}
