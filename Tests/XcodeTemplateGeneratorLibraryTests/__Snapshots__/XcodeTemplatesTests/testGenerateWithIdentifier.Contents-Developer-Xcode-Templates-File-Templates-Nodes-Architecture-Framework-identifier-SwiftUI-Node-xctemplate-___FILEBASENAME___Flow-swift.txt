//___FILEHEADER___

import Combine
import Nodes

/**
 PURPOSE:
 The interface that the Flow will speak to the Context through. Used for informing the Context of
 presentation lifecycle events, as an example.
 */
internal protocol ___VARIABLE_productName___ContextInterface: Context {
    var flow: ___VARIABLE_productName___FlowInterface? { get set }
    var listener: ___VARIABLE_productName___Listener? { get }
}

/**
 PURPOSE:
 The interface of the View used for presenting the View of child Nodes. May inherit additional base
 protocols to add further pre-baked presentation behavior and/or add new methods for custom presentation
 implementation as necessary.
 */
internal protocol ___VARIABLE_productName___ViewControllable: ViewControllable {}

/**
 PURPOSE:
 Responsible for presenting views and starting child Flows, and should not contain business logic.
 */
internal final class ___VARIABLE_productName___FlowImp: AbstractFlow
    <___VARIABLE_productName___ContextInterface, ___VARIABLE_productName___ViewControllable> {

    /// Provides the parent Node with access to the View so it can be presented.
    internal var viewControllable: ViewControllable {
        viewController
    }

    /// The initializer.
    ///
    /// Inject Plugins or Builders into the Flow in order to create sub-Flows.
    /// - Parameters:
    ///   - context: The Context instance
    ///   - viewController: The View Controller instance
    override internal init(
        context: ___VARIABLE_productName___ContextInterface,
        viewController: ___VARIABLE_productName___ViewControllable
    ) {
        super.init(context: context, viewController: viewController)
        context.flow = self
    }

    /// Implement logic to execute when the Flow is started.
    override internal func didStart() {}
}

extension ___VARIABLE_productName___FlowImp: ___VARIABLE_productName___Flow {}
extension ___VARIABLE_productName___FlowImp: ___VARIABLE_productName___FlowInterface {}
