//___FILEHEADER___

import Combine
import NeedleFoundation
import Nodes

/**
 PURPOSE:
 The common Flow interface.
 */
internal protocol ___VARIABLE_productName___Flow: ViewControllableFlow {}

/**
 PURPOSE:
 The common Listener interface.
 */
internal protocol ___VARIABLE_productName___Listener: AnyObject {}

/**
 PURPOSE:
 The common Builder interface.
 */
internal protocol ___VARIABLE_productName___Builder: AnyObject {
    func build(withListener listener: ___VARIABLE_productName___Listener) -> ___VARIABLE_productName___Flow
}

/**
 PURPOSE:
 Declares the dependencies required by this Plugin Map that will be injected (not created by this Plugin Map itself).
 */
public protocol ___VARIABLE_productName___PluginMapDependency: Dependency {}

/**
 PURPOSE:
 Declares dependencies that are owned by this Plugin Map.
 */
internal final class ___VARIABLE_productName___PluginMapComponent: Component
    <___VARIABLE_productName___PluginMapDependency> {

    /*
     Dependencies
     ============

     Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).

     fileprivate let example: Example = .init()

     Whenever possible, for example when the dependency does not provide shared state, define the property as a
     factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     Needle compatibility whenever the access control is increased.

     fileprivate var exampleFactory: Example {
         Example()
     }

     When shared state is desired but the dependency depends on another dependency, use the `shared` helper method
     that always returns the same instance from a computed property.

     fileprivate var example: Example {
         shared { Example(otherDependency: dependency.otherDependency) }
     }

     */

    /*
     Child Components
     ================

     Declare child component factories as 'fileprivate' methods.

     fileprivate func childComponentFactory() -> ChildComponent {
         ChildComponent(parent: self)
     }

     */
}

/**
 PURPOSE:
 The type used for the keys in the Plugin Map (can be any `Hashable` type relevant to the plugins).
 */
internal typealias ___VARIABLE_productName___PluginMapKeyType = String

/**
 PURPOSE:
 To provide additional state used in determining if the Plugins are enabled (can be any type relevant to the plugins).
 */
internal typealias ___VARIABLE_productName___PluginMapStateType = Void

/**
 PURPOSE:
 The Plugin Map protocol (available to mock for testability).
 */
internal protocol ___VARIABLE_productName___PluginMap {
    func createAll() -> [___VARIABLE_productName___Builder]
    func create(key: ___VARIABLE_productName___PluginMapKeyType) -> ___VARIABLE_productName___Builder?
}

internal typealias ___VARIABLE_productName___PluginMapType = PluginMap
    <
    ___VARIABLE_productName___PluginMapKeyType,
    ___VARIABLE_productName___PluginMapComponent,
    ___VARIABLE_productName___Builder,
    ___VARIABLE_productName___PluginMapStateType
    >

/**
 PURPOSE:
 Concrete implementation of the Plugin Map to construct the Plugin collection.
 */
internal final class ___VARIABLE_productName___PluginMapImp:
    ___VARIABLE_productName___PluginMapType, ___VARIABLE_productName___PluginMap {

    /// The method in which the plugins are wrapped by type erased `Plugin` instances.
    /// - Parameter component: The component instance
    /// - Returns: The plugins dictionary
    override internal func plugins(
        component: ___VARIABLE_productName___PluginMapComponent
    ) -> [___VARIABLE_productName___PluginMapKeyType: Plugin] {
        [:] // Example:
//        [
//            "example": Plugin(ExamplePluginImp(component: component.examplePluginComponentFactory()).create())
//        ]
    }
}
