//___FILEHEADER___

import Combine
import NeedleFoundation
import Nodes

/*
 PURPOSE:
 The interface of the Flow.
 */
internal protocol ___VARIABLE_productName___Flow: ViewControllableFlow {}

/*
 PURPOSE:
 Declares the dependencies required by this Node that will be injected (not created by this Node itself).
 */
public protocol ___VARIABLE_productName___Dependency: Dependency {}

/*
 PURPOSE:
 A dependency needed by the Builder (such as a Listener), passed in from the caller (i.e. is not on the DI graph).

 Can be a tuple containing multiple values when necessary.
 */
internal typealias ___VARIABLE_productName___DynamicBuildDependency = ___VARIABLE_productName___Listener

/*
 PURPOSE:
 A dependency used by the Component itself, passed into the Component's initializer (in the Component factory).

 Can be a tuple containing multiple values when necessary.
 */
internal typealias ___VARIABLE_productName___DynamicComponentDependency = Void

// MARK: - Component

/*
 PURPOSE:
 Declares dependencies that are owned by this Node.
 */
internal final class ___VARIABLE_productName___Component: Component
    <___VARIABLE_productName___Dependency> {

    /*
     Dependencies
     ============

     Declare dependencies as 'fileprivate' properties (increasing access control only as necessary).

     fileprivate let example: Example = .init()

     Whenever possible, for example when the dependency does not maintain any state, define the property as a
     factory that always returns a new instance. Factory properties are preferred over factory methods to ensure
     Needle compatibility whenever the access control is increased.

     fileprivate var exampleFactory: Example {
         Example()
     }

     Only when a singleton simply cannot be avoided and is absolutely necessary, shared instances may be returned.

     fileprivate var example: Example {
         shared { Example() }
     }

     */

    /*
     Child Components
     ================

     Declare child component factories as 'fileprivate' methods.

     fileprivate func childComponentFactory() -> ChildComponent {
         ChildComponent(parent: self)
     }

     */

    private let dynamicDependency: ___VARIABLE_productName___DynamicComponentDependency

    /// The initializer.
    ///
    /// Remove `dynamicDependency` default parameter when its type is not `Void`.
    ///
    /// - Parameter parent: The parent scope
    /// - Parameter dynamicDependency: The dynamic component dependency
    internal init(parent: Scope, dynamicDependency: ___VARIABLE_productName___DynamicComponentDependency = ()) {
        self.dynamicDependency = dynamicDependency
        super.init(parent: parent)
    }
}

// MARK: - Builder

/*
 PURPOSE:
 The Builder interface (available to mock for testability).
 */
internal protocol ___VARIABLE_productName___Builder: AnyObject {
    func build(withListener listener: ___VARIABLE_productName___Listener) -> ___VARIABLE_productName___Flow
}

internal typealias ___VARIABLE_productName___BuilderType = AbstractBuilder
    <
    ___VARIABLE_productName___Component,
    ___VARIABLE_productName___Flow,
    ___VARIABLE_productName___DynamicBuildDependency,
    ___VARIABLE_productName___DynamicComponentDependency
    >

/*
 PURPOSE:
 Concrete implementation of the Builder, where everything is created and associated.
 */
internal final class ___VARIABLE_productName___BuilderImp: ___VARIABLE_productName___BuilderType {

    /// The purpose of this method is to route input parameters to either the dynamic build dependency and/or
    /// the dynamic component dependency.
    ///
    /// The dynamic dependencies can be tuples containing multiple values when necessary.
    /// - Parameter listener: An object that can listen for signals from the Node
    /// - Returns: The Flow instance
    internal func build(withListener listener: ___VARIABLE_productName___Listener) -> ___VARIABLE_productName___Flow {
        let dynamicBuildDependency: ___VARIABLE_productName___DynamicBuildDependency = listener
        let dynamicComponentDependency: ___VARIABLE_productName___DynamicComponentDependency = ()
        return build(dynamicBuildDependency, dynamicComponentDependency)
    }

    /// The factory method in which the Context and Flow are initialized.
    /// - Parameters:
    ///   - component: The component instance
    ///   - dynamicBuildDependency: The dynamic build dependency
    /// - Returns: The Flow instance
    override internal func build(
        component: ___VARIABLE_productName___Component,
        dynamicBuildDependency: ___VARIABLE_productName___DynamicBuildDependency
    ) -> ___VARIABLE_productName___Flow {
        let listener: ___VARIABLE_productName___Listener = dynamicBuildDependency
        let analytics: ___VARIABLE_productName___AnalyticsImp = .init()
        let worker: ___VARIABLE_productName___WorkerImp = .init(
            analytics: analytics
        )
        let viewController: ___VARIABLE_productName___ViewController = .init()
        viewController.analytics = analytics
        let context: ___VARIABLE_productName___ContextImp = .init(
            presentable: viewController,
            workers: [worker],
            analytics: analytics
        )
        context.listener = listener
        return ___VARIABLE_productName___FlowImp(
            context: context,
            viewController: viewController
        )
    }
}

extension ___VARIABLE_productName___BuilderImp: ___VARIABLE_productName___Builder {}
