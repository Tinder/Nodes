//___FILEHEADER___

import Combine
import Nodes
import SwiftUI

/**
 PURPOSE:
 The interface that the View will speak to the Context through. Used for informing the Context of
 view events and user interactions.
 */
internal protocol ___VARIABLE_productName___Receiver: AnyObject {}

/**
 PURPOSE:
 Host of the SwiftUI view.
 */
internal final class ___VARIABLE_productName___ViewController: AbstractViewHostingController
<
    ___VARIABLE_productName___View
> {
}

extension ___VARIABLE_productName___ViewController: ___VARIABLE_productName___ViewControllable {}

/**
 PURPOSE:
 Concrete implementation of the View.
 */
internal struct ___VARIABLE_productName___View: NodesView {

    /// The body of the view.
    internal var body: some View {
        WithViewState(viewState) { viewState in
            Text(verbatim: "\(type(of: viewState))")
        }
    }

    /// The view receiver.
    internal weak var receiver: ___VARIABLE_productName___Receiver?

    /// The Analytics instance.
    internal weak var analytics: ___VARIABLE_productName___Analytics?

    /// The view state publisher.
    private let viewState: CurrentValuePublisher<___VARIABLE_productName___ViewState>

    /// The initializer.
    /// - Parameter viewState: The view state publisher
    internal init(viewState: CurrentValuePublisher<___VARIABLE_productName___ViewState>) {
        self.viewState = viewState
            .removeDuplicates()
            .receive(on: DispatchQueue.main)
    }
}

/**
 PURPOSE:
 The SwiftUI preview (excluded from release builds).
 */
internal struct ___VARIABLE_productName___View_Previews: PreviewProvider {

    private static let viewState: CurrentValuePublisher<___VARIABLE_productName___ViewState> =
        Just<___VARIABLE_productName___ViewState>(___VARIABLE_productName___ViewState()).asCurrentValuePublisher()

    internal static var previews: some View {
        ___VARIABLE_productName___View(viewState: viewState)
    }
}
