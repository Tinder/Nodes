#!/usr/bin/env bash

set -euo pipefail

BUILD_PATH="${PWD}/.build/xcframework"
LOG_PATH="${BUILD_PATH}/xcodebuild.log"

LIBRARY_NAME="${1}"
PLATFORMS="${2}"
BITCODE="${3}"
RELEASE_VERSION="${4}"

libraries()
{
    echo "$(make get-libraries)"
}

deployment_target()
{
    local PLATFORM="${1}"

    echo "$(make get-deployment-target platform="${PLATFORM}")"
}

includes_platform()
{
    local PLATFORM="${1}"
    local PLATFORMS="${2}"

    grep -q "[[:space:]]${PLATFORM}[[:space:]]" <<< " ${PLATFORMS} " && echo "YES" || echo "NO"
}

regex_replace()
{
    local FILE_PATH="${1}"
    local PATTERN="${2}"
    local REPLACE="${3}"

    perl -0777 -i\~ -pe "s/${PATTERN}/${REPLACE}/" "${FILE_PATH}"
}

restore_package_manifest()
{
    rm -f Package.swift
    mv Package.swift\~ Package.swift
    echo "restored package manifest"
}

archive_path()
{
    local BUILD_PATH="${1}"
    local LIBRARY_NAME="${2}"
    local DESTINATION="${3}"

    echo "${BUILD_PATH}/${LIBRARY_NAME}-${DESTINATION//[,= ]/-}.xcarchive"
}

framework_path()
{
    local BUILD_PATH="${1}"
    local LIBRARY_NAME="${2}"
    local DESTINATION="${3}"

    local ARCHIVE_PATH="$(archive_path "${BUILD_PATH}" "${LIBRARY_NAME}" "${DESTINATION}")"

    echo "${ARCHIVE_PATH}/Products/usr/local/lib/${LIBRARY_NAME}.framework"
}

copy_swift_module()
{
    local DERIVED_DATA_PATH="${1}"
    local BUILD_PATH="${2}"
    local LIBRARY_NAME="${3}"
    local DESTINATION="${4}"

    local FRAMEWORK_PATH="$(framework_path "${BUILD_PATH}" "${LIBRARY_NAME}" "${DESTINATION}")"
    local SWIFT_MODULE_PATH="$(find "${DERIVED_DATA_PATH}" -type d -name "${LIBRARY_NAME}.swiftmodule" | head -1)"

    mkdir "${FRAMEWORK_PATH}/Modules"

    cp -a "${SWIFT_MODULE_PATH}" "${FRAMEWORK_PATH}/Modules"
}

archive_framework()
{
    local DERIVED_DATA_PATH=$(mktemp -d)

    local BUILD_PATH="${1}"
    local LOG_PATH="${2}"
    local LIBRARY_NAME="${3}"
    local BITCODE_ENABLED="${4}"
    local RELEASE_VERSION="${5}"
    local DEPLOYMENT_TARGETS="${6}"
    local DESTINATION="${7}"

    local ARCHIVE_PATH="$(archive_path "${BUILD_PATH}" "${LIBRARY_NAME}" "${DESTINATION}")"
    local FRAMEWORK_PATH="$(framework_path "${BUILD_PATH}" "${LIBRARY_NAME}" "${DESTINATION}")"

    local OPTIONS=""

    if [[ "${BITCODE_ENABLED}" == "YES" ]]
    then
        OPTIONS="ENABLE_BITCODE=YES BITCODE_GENERATION_MODE=bitcode OTHER_C_FLAGS=-fembed-bitcode"
    fi

    echo "=> ${DESTINATION}"

    set -x
    xcodebuild \
        -scheme "${LIBRARY_NAME}" \
        -destination "generic/platform=${DESTINATION}" \
        -derivedDataPath "${DERIVED_DATA_PATH}" \
        -archivePath "${ARCHIVE_PATH}" \
        archive \
        ${DEPLOYMENT_TARGETS} \
        ${OPTIONS} \
        SWIFT_TREAT_WARNINGS_AS_ERRORS=YES \
        BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
        SKIP_INSTALL=NO \
        >> "${LOG_PATH}"
    set +x

    copy_swift_module "${DERIVED_DATA_PATH}" "${BUILD_PATH}" "${LIBRARY_NAME}" "${DESTINATION}"

    rm -rf "${DERIVED_DATA_PATH}"

    /usr/libexec/PlistBuddy \
        -c "Set :CFBundleVersion ${RELEASE_VERSION}" \
        -c "Set :CFBundleShortVersionString ${RELEASE_VERSION}" \
        "$(find "${FRAMEWORK_PATH}" -type f -name "Info.plist" | head -1)"
}

xcframework_options()
{
    local BUILD_PATH="${1}"
    local LIBRARY_NAME="${2}"
    local BITCODE_ENABLED="${3}"
    local DESTINATION="${4}"

    local ARCHIVE_PATH="$(archive_path "${BUILD_PATH}" "${LIBRARY_NAME}" "${DESTINATION}")"
    local FRAMEWORK_PATH="$(framework_path "${BUILD_PATH}" "${LIBRARY_NAME}" "${DESTINATION}")"
    local DEBUG_SYMBOLS="${ARCHIVE_PATH}/dSYMs/${LIBRARY_NAME}.framework.dSYM"

    local OPTIONS="-framework ${FRAMEWORK_PATH} -debug-symbols ${DEBUG_SYMBOLS}"

    if [[ "${BITCODE_ENABLED}" == "YES" ]]
    then
        OPTIONS+=" -debug-symbols $(find "${ARCHIVE_PATH}/BCSymbolMaps" -type f -name "*.bcsymbolmap" | head -1)"
    fi

    echo "${OPTIONS}"
}

if ! grep -q "^${LIBRARY_NAME}$" <<< "$(libraries)"
then
    echo "invalid library: \"${LIBRARY_NAME}\""
    exit 1
fi

echo "BUILD_PATH=${BUILD_PATH/${PWD}\//}"
echo "LOG_PATH=${LOG_PATH/${PWD}\//}"

echo "LIBRARY_NAME=${LIBRARY_NAME}"

MACOS=$(includes_platform "macos" "${PLATFORMS}")
CATALYST=$(includes_platform "catalyst" "${PLATFORMS}")
IOS=$(includes_platform "ios" "${PLATFORMS}")
TVOS=$(includes_platform "tvos" "${PLATFORMS}")
WATCHOS=$(includes_platform "watchos" "${PLATFORMS}")

echo "MACOS=${MACOS}"
echo "CATALYST=${CATALYST}"
echo "IOS=${IOS}"
echo "TVOS=${TVOS}"
echo "WATCHOS=${WATCHOS}"

unset PLATFORMS

if [[ "${BITCODE}" == "BITCODE_ENABLED" ]]
then
    BITCODE_ENABLED="YES"
else
    BITCODE_ENABLED="NO"
fi

unset BITCODE

echo "BITCODE_ENABLED=${BITCODE_ENABLED}"
echo "RELEASE_VERSION=${RELEASE_VERSION}"

MACOS_CONFIG="MACOSX_DEPLOYMENT_TARGET=$(deployment_target "macos")"
IOS_CONFIG="IPHONEOS_DEPLOYMENT_TARGET=$(deployment_target "ios")"
TVOS_CONFIG="TVOS_DEPLOYMENT_TARGET=$(deployment_target "tvos")"
WATCHOS_CONFIG="WATCHOS_DEPLOYMENT_TARGET=$(deployment_target "watchos")"

echo "${MACOS_CONFIG}"
echo "${IOS_CONFIG}"
echo "${TVOS_CONFIG}"
echo "${WATCHOS_CONFIG}"

DEPLOYMENT_TARGETS="${MACOS_CONFIG} ${IOS_CONFIG} ${TVOS_CONFIG} ${WATCHOS_CONFIG}"

unset MACOS_CONFIG IOS_CONFIG TVOS_CONFIG WATCHOS_CONFIG

MACOS_DESTINATION="macOS"
MAC_CATALYST_DESTINATION="macOS,variant=Mac Catalyst"

IOS_DESTINATION="iOS"
IOS_SIMULATOR_DESTINATION="iOS Simulator"

TVOS_DESTINATION="tvOS"
TVOS_SIMULATOR_DESTINATION="tvOS Simulator"

WATCHOS_DESTINATION="watchOS"
WATCHOS_SIMULATOR_DESTINATION="watchOS Simulator"

ZIP_FILE_NAME="${LIBRARY_NAME}.xcframework-${RELEASE_VERSION}.zip"
ZIP_FILE_PATH="${BUILD_PATH}/${ZIP_FILE_NAME}"

regex_replace \
    Package.swift \
    '(\.library\(\s*name: "'"${LIBRARY_NAME}"'",)(\s+)(type: \.\w+,\s+)?([a-z])' \
    '$1$2type: \.dynamic,$2$4'

echo "modified package manifest"

trap "restore_package_manifest;" EXIT

rm -rf "${BUILD_PATH}"

mkdir -p "${BUILD_PATH}"

if [[ "${MACOS}" == "YES" ]]
then
    archive_framework \
        "${BUILD_PATH}" \
        "${LOG_PATH}" \
        "${LIBRARY_NAME}" \
        "${BITCODE_ENABLED}" \
        "${RELEASE_VERSION}" \
        "${DEPLOYMENT_TARGETS}" \
        "${MACOS_DESTINATION}"
fi

if [[ "${CATALYST}" == "YES" ]]
then
    archive_framework \
        "${BUILD_PATH}" \
        "${LOG_PATH}" \
        "${LIBRARY_NAME}" \
        "${BITCODE_ENABLED}" \
        "${RELEASE_VERSION}" \
        "${DEPLOYMENT_TARGETS}" \
        "${MAC_CATALYST_DESTINATION}"
fi

if [[ "${IOS}" == "YES" ]]
then
    archive_framework \
        "${BUILD_PATH}" \
        "${LOG_PATH}" \
        "${LIBRARY_NAME}" \
        "${BITCODE_ENABLED}" \
        "${RELEASE_VERSION}" \
        "${DEPLOYMENT_TARGETS}" \
        "${IOS_DESTINATION}"
    archive_framework \
        "${BUILD_PATH}" \
        "${LOG_PATH}" \
        "${LIBRARY_NAME}" \
        "${BITCODE_ENABLED}" \
        "${RELEASE_VERSION}" \
        "${DEPLOYMENT_TARGETS}" \
        "${IOS_SIMULATOR_DESTINATION}"
fi

if [[ "${TVOS}" == "YES" ]]
then\
    archive_framework \
        "${BUILD_PATH}" \
        "${LOG_PATH}" \
        "${LIBRARY_NAME}" \
        "${BITCODE_ENABLED}" \
        "${RELEASE_VERSION}" \
        "${DEPLOYMENT_TARGETS}" \
        "${TVOS_DESTINATION}"
    archive_framework \
        "${BUILD_PATH}" \
        "${LOG_PATH}" \
        "${LIBRARY_NAME}" \
        "${BITCODE_ENABLED}" \
        "${RELEASE_VERSION}" \
        "${DEPLOYMENT_TARGETS}" \
        "${TVOS_SIMULATOR_DESTINATION}"
fi

if [[ "${WATCHOS}" == "YES" ]]
then
    archive_framework \
        "${BUILD_PATH}" \
        "${LOG_PATH}" \
        "${LIBRARY_NAME}" \
        "${BITCODE_ENABLED}" \
        "${RELEASE_VERSION}" \
        "${DEPLOYMENT_TARGETS}" \
        "${WATCHOS_DESTINATION}"
    archive_framework \
        "${BUILD_PATH}" \
        "${LOG_PATH}" \
        "${LIBRARY_NAME}" \
        "${BITCODE_ENABLED}" \
        "${RELEASE_VERSION}" \
        "${DEPLOYMENT_TARGETS}" \
        "${WATCHOS_SIMULATOR_DESTINATION}"
fi

OPTIONS=()

if [[ "${MACOS}" == "YES" ]]
then
    OPTIONS+=($(xcframework_options "${BUILD_PATH}" "${LIBRARY_NAME}" "${BITCODE_ENABLED}" "${MACOS_DESTINATION}"))
fi

if [[ "${CATALYST}" == "YES" ]]
then
    OPTIONS+=($(xcframework_options "${BUILD_PATH}" "${LIBRARY_NAME}" "${BITCODE_ENABLED}" "${MAC_CATALYST_DESTINATION}"))
fi

if [[ "${IOS}" == "YES" ]]
then
    OPTIONS+=($(xcframework_options "${BUILD_PATH}" "${LIBRARY_NAME}" "${BITCODE_ENABLED}" "${IOS_DESTINATION}"))
    OPTIONS+=($(xcframework_options "${BUILD_PATH}" "${LIBRARY_NAME}" "${BITCODE_ENABLED}" "${IOS_SIMULATOR_DESTINATION}"))
fi

if [[ "${TVOS}" == "YES" ]]
then
    OPTIONS+=($(xcframework_options "${BUILD_PATH}" "${LIBRARY_NAME}" "${BITCODE_ENABLED}" "${TVOS_DESTINATION}"))
    OPTIONS+=($(xcframework_options "${BUILD_PATH}" "${LIBRARY_NAME}" "${BITCODE_ENABLED}" "${TVOS_SIMULATOR_DESTINATION}"))
fi

if [[ "${WATCHOS}" == "YES" ]]
then
    OPTIONS+=($(xcframework_options "${BUILD_PATH}" "${LIBRARY_NAME}" "${BITCODE_ENABLED}" "${WATCHOS_DESTINATION}"))
    OPTIONS+=($(xcframework_options "${BUILD_PATH}" "${LIBRARY_NAME}" "${BITCODE_ENABLED}" "${WATCHOS_SIMULATOR_DESTINATION}"))
fi

set -x
xcodebuild \
    -create-xcframework \
    "${OPTIONS[@]}" \
    -output "${BUILD_PATH}/${LIBRARY_NAME}.xcframework" \
    >> "${LOG_PATH}"
set +x

unset OPTIONS

if ! grep -q "xcframework successfully written out to: ${BUILD_PATH}/${LIBRARY_NAME}.xcframework" "${LOG_PATH}"
then
    echo "failed to create xcframework"
    exit 1
fi

(cd "${BUILD_PATH}" && zip -qry "${ZIP_FILE_NAME}" "${LIBRARY_NAME}.xcframework")

echo "$(swift package compute-checksum "${ZIP_FILE_PATH}")" > "${ZIP_FILE_PATH}.checksum"

echo "artifact: ${ZIP_FILE_PATH/${PWD}\//}"
echo "checksum: ${ZIP_FILE_PATH/${PWD}\//}.checksum"
