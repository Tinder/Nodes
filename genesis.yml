options:

  - question: "Nodes Version Requirement (up to next major):"
    name: nodes
    type: string
    required: true

  - question: "Project Name:"
    name: project
    type: string
    required: true

  - question: "Organization Identifier (the bundle ID prefix):"
    name: prefix
    type: string
    required: true

  - question: "Author Name (for source file attribution):"
    name: author
    type: string
    required: true

  - question: "Today's Date (for source file attribution):"
    name: date
    type: string
    required: true

  - question: "[OPTIONAL] Nodes repository absolute file path (overrides Nodes version requirement):"
    name: path
    type: string
    required: false
    value: " "

files:

  - path: .gitignore
    contents: |
      # macOS
      .DS_Store

      # SPM
      .swiftpm/
      .build/

      # Xcode
      *.xcworkspace/
      *.xcodeproj/

  - path: .swiftlint-rules.yml
    contents: |
      analyzer_rules:
      - capture_variable
      # - explicit_self
      - typesafe_array_init
      # - unused_declaration
      - unused_import

      only_rules:
      - accessibility_label_for_image
      - accessibility_trait_for_button
      - anonymous_argument_in_multiline_closure
      - anyobject_protocol
      - array_init
      # - attributes
      - balanced_xctest_lifecycle
      - blanket_disable_command
      - block_based_kvo
      - class_delegate_protocol
      - closing_brace
      - closure_body_length
      - closure_end_indentation
      - closure_parameter_position
      - closure_spacing
      - collection_alignment
      - colon
      - comma
      - comma_inheritance
      - comment_spacing
      - compiler_protocol_init
      - computed_accessors_order
      - conditional_returns_on_newline
      - contains_over_filter_count
      - contains_over_filter_is_empty
      - contains_over_first_not_nil
      - contains_over_range_nil_comparison
      - control_statement
      - convenience_type
      - custom_rules
      - cyclomatic_complexity
      - deployment_target
      - direct_return
      - discarded_notification_center_observer
      - discouraged_assert
      - discouraged_direct_init
      - discouraged_none_name
      - discouraged_object_literal
      - discouraged_optional_boolean
      - discouraged_optional_collection
      - duplicate_conditions
      - duplicate_enum_cases
      - duplicate_imports
      - duplicated_key_in_dictionary_literal
      - dynamic_inline
      - empty_collection_literal
      - empty_count
      - empty_enum_arguments
      - empty_parameters
      - empty_parentheses_with_trailing_closure
      - empty_string
      - empty_xctest_method
      - enum_case_associated_values_count
      - expiring_todo
      - explicit_acl
      - explicit_enum_raw_value
      - explicit_init
      - explicit_top_level_acl
      - explicit_type_interface
      # - extension_access_modifier
      - fallthrough
      - fatal_error_message
      - file_header
      - file_length
      # - file_name
      - file_name_no_space
      # - file_types_order
      - first_where
      - flatmap_over_map_reduce
      - for_where
      - force_cast
      - force_try
      - force_unwrapping
      - function_body_length
      - function_default_parameter_at_end
      - function_parameter_count
      - generic_type_name
      - given_when_then # custom_rule
      - ibinspectable_in_extension
      - identical_operands
      - identifier_name
      - implicit_getter
      - implicit_return
      - implicitly_unwrapped_optional
      - inclusive_language
      # - indentation_width
      - inert_defer
      - invalid_swiftlint_command
      - is_disjoint
      - joined_default_parameter
      - large_tuple
      - last_where
      - leading_whitespace
      - legacy_cggeometry_functions
      - legacy_constant
      - legacy_constructor
      - legacy_hashing
      - legacy_multiple
      - legacy_nsgeometry_functions
      - legacy_objc_type
      - legacy_random
      - let_var_whitespace
      - line_length
      - literal_expression_end_indentation
      - local_doc_comment
      - lower_acl_than_parent
      - mark
      # - missing_docs
      - modifier_order
      - multiline_arguments
      # - multiline_arguments_brackets
      - multiline_function_chains
      - multiline_literal_brackets
      - multiline_parameters
      - multiline_parameters_brackets
      - multiple_closures_with_trailing_closure
      - nesting
      - nimble_operator
      - no_extension_access_modifier
      - no_fallthrough_only
      # - no_grouping_extension
      # - no_magic_numbers
      - no_space_in_method_call
      - non_overridable_class_declaration
      - notification_center_detachment
      - ns_number_init_as_function_reference
      - nslocalizedstring_key
      - nslocalizedstring_require_bundle
      - nsobject_prefer_isequal
      - number_separator
      # - object_literal
      - opening_brace
      - operator_usage_whitespace
      - operator_whitespace
      - optional_enum_case_matching
      - orphaned_doc_comment
      - overridden_super_call
      - override_in_extension
      - pattern_matching_keywords
      - period_spacing
      - prefer_nimble
      - prefer_self_in_static_references
      - prefer_self_type_over_type_of_self
      - prefer_zero_over_explicit_init
      # - prefixed_toplevel_constant
      - private_action
      - private_outlet
      - private_over_fileprivate
      - private_subject
      - private_swiftui_state
      - private_unit_test
      - prohibited_interface_builder
      - prohibited_super_call
      - protocol_property_accessors_order
      - quick_discouraged_call
      - quick_discouraged_focused_test
      - quick_discouraged_pending_test
      - raw_value_for_camel_cased_codable_enum
      - reduce_boolean
      - reduce_into
      - redundant_discardable_let
      - redundant_nil_coalescing
      - redundant_objc_attribute
      - redundant_optional_initialization
      - redundant_self_in_closure
      - redundant_set_access_control
      # - redundant_string_enum_value
      - redundant_type_annotation
      - redundant_void_return
      # - required_deinit
      - required_enum_case
      - return_arrow_whitespace
      # - return_value_from_void_function
      - self_binding
      - self_in_property_initialization
      - shorthand_operator
      - shorthand_optional_binding
      - single_test_class
      # - sorted_enum_cases
      - sorted_first_last
      - sorted_imports
      - statement_position
      - static_operator
      # - strict_fileprivate
      - strong_iboutlet
      - superfluous_disable_command
      - superfluous_else
      - switch_case_alignment
      - switch_case_on_newline
      - syntactic_sugar
      - test_case_accessibility
      - todo
      - toggle_bool
      - trailing_closure
      - trailing_comma
      - trailing_newline
      - trailing_semicolon
      - trailing_whitespace
      - type_body_length
      # - type_contents_order
      - type_name
      - unavailable_condition
      - unavailable_function
      - unhandled_throwing_task
      - unneeded_break_in_switch
      # - unneeded_override
      - unneeded_parentheses_in_closure_argument
      - unneeded_synthesized_initializer
      - unowned_variable_capture
      - untyped_error_in_catch
      - unused_capture_list
      - unused_closure_parameter
      - unused_control_flow_label
      - unused_enumerated
      - unused_optional_binding
      - unused_setter_value
      - valid_ibinspectable
      - vertical_parameter_alignment
      - vertical_parameter_alignment_on_call
      - vertical_whitespace
      # - vertical_whitespace_between_cases
      # - vertical_whitespace_closing_braces
      # - vertical_whitespace_opening_braces
      - void_function_in_ternary
      - void_return
      - weak_delegate
      - xct_specific_matcher
      - xctfail_message
      - yoda_condition

  - path: .swiftlint.yml
    contents: |
      included:
      - {{ project|replace:' ','_' }}/Sources
      - {{ project|replace:' ','_' }}Tests/Tests
      - {{ project|replace:' ','_' }}UITests/Tests

      excluded:
      - {{ project|replace:' ','_' }}/Generated
      - {{ project|replace:' ','_' }}Tests/Generated
      - {{ project|replace:' ','_' }}UITests/Generated

      child_config: .swiftlint-rules.yml

      empty_count:
        only_after_dot: true

      file_header:
        required_pattern: |
          \/\/
          \/\/ {2}Created by .+ on \d{1,2}\/\d{1,2}\/\d{2}\.
          \/\/

      private_over_fileprivate:
        validate_extensions: true

      trailing_whitespace:
        ignores_comments: false

      type_name:
        max_length: 50

      custom_rules:
        given_when_then:
          name: GIVEN / WHEN / THEN
          message: |
            "GIVEN / WHEN / THEN" comments must be uppercase, without punctuation and both preceded and followed by an empty line.
          regex: |
            ((?<=\n) +\/\/ (Given|given|When|when|Then|then)(?= *\n))|((?<=\n) +[^ ]\/\/ (GIVEN|WHEN|THEN))|((?<=\n) +\/\/  +(GIVEN|WHEN|THEN))|((?<=[^\n]\n) +\/\/ (GIVEN|WHEN|THEN))|((?<=\n) +\/\/ (GIVEN|WHEN|THEN)(?!\n\n))

  - path: BuildSettings/Debug.xcconfig
    contents: |
      #include "Shared.xcconfig"

      DEBUG_INFORMATION_FORMAT = dwarf
      ENABLE_TESTABILITY = YES
      GCC_DYNAMIC_NO_PIC = NO
      GCC_OPTIMIZATION_LEVEL = 0
      GCC_PREPROCESSOR_DEFINITIONS = DEBUG=1
      MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE
      ONLY_ACTIVE_ARCH = YES
      SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG
      SWIFT_OPTIMIZATION_LEVEL = -Onone

  - path: BuildSettings/Release.xcconfig
    contents: |
      #include "Shared.xcconfig"

      DEBUG_INFORMATION_FORMAT = dwarf-with-dsym
      ENABLE_NS_ASSERTIONS = NO
      MTL_ENABLE_DEBUG_INFO = NO
      SWIFT_COMPILATION_MODE = wholemodule
      SWIFT_OPTIMIZATION_LEVEL = -O
      VALIDATE_PRODUCT = YES

  - path: BuildSettings/Shared.xcconfig
    contents: |
      ALWAYS_SEARCH_USER_PATHS = NO
      ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES
      CLANG_ANALYZER_NONNULL = YES
      CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE
      CLANG_CXX_LANGUAGE_STANDARD = gnu++14
      CLANG_CXX_LIBRARY = libc++
      CLANG_ENABLE_MODULES = YES
      CLANG_ENABLE_OBJC_ARC = YES
      CLANG_ENABLE_OBJC_WEAK = YES
      CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
      CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES
      CLANG_WARN_BOOL_CONVERSION = YES
      CLANG_WARN_COMMA = YES
      CLANG_WARN_CONSTANT_CONVERSION = YES
      CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES
      CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR
      CLANG_WARN_DOCUMENTATION_COMMENTS = YES
      CLANG_WARN_EMPTY_BODY = YES
      CLANG_WARN_ENUM_CONVERSION = YES
      CLANG_WARN_INFINITE_RECURSION = YES
      CLANG_WARN_INT_CONVERSION = YES
      CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES
      CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES
      CLANG_WARN_OBJC_LITERAL_CONVERSION = YES
      CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR
      CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES
      CLANG_WARN_RANGE_LOOP_ANALYSIS = YES
      CLANG_WARN_STRICT_PROTOTYPES = YES
      CLANG_WARN_SUSPICIOUS_MOVE = YES
      CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE
      CLANG_WARN_UNREACHABLE_CODE = YES
      CODE_SIGN_STYLE = Automatic
      COPY_PHASE_STRIP = NO
      ENABLE_STRICT_OBJC_MSGSEND = YES
      ENABLE_USER_SCRIPT_SANDBOXING = NO
      GCC_C_LANGUAGE_STANDARD = gnu11
      GCC_NO_COMMON_BLOCKS = YES
      GCC_WARN_64_TO_32_BIT_CONVERSION = YES
      GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR
      GCC_WARN_UNDECLARED_SELECTOR = YES
      GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE
      GCC_WARN_UNUSED_FUNCTION = YES
      GCC_WARN_UNUSED_VARIABLE = YES
      MTL_FAST_MATH = YES
      SDKROOT = iphoneos
      SWIFT_VERSION = 5.0
      // SWIFT_STRICT_CONCURRENCY = complete

  - path: "{{ project|replace:' ','_' }}/Assets/Assets.xcassets/AccentColor.colorset/Contents.json"
    contents: |
      {
        "colors" : [
          {
            "idiom" : "universal"
          }
        ],
        "info" : {
          "author" : "xcode",
          "version" : 1
        }
      }

  - path: "{{ project|replace:' ','_' }}/Assets/Assets.xcassets/AppIcon.appiconset/Contents.json"
    contents: |
      {
        "images" : [
          {
            "idiom" : "iphone",
            "scale" : "2x",
            "size" : "20x20"
          },
          {
            "idiom" : "iphone",
            "scale" : "3x",
            "size" : "20x20"
          },
          {
            "idiom" : "iphone",
            "scale" : "2x",
            "size" : "29x29"
          },
          {
            "idiom" : "iphone",
            "scale" : "3x",
            "size" : "29x29"
          },
          {
            "idiom" : "iphone",
            "scale" : "2x",
            "size" : "40x40"
          },
          {
            "idiom" : "iphone",
            "scale" : "3x",
            "size" : "40x40"
          },
          {
            "idiom" : "iphone",
            "scale" : "2x",
            "size" : "60x60"
          },
          {
            "idiom" : "iphone",
            "scale" : "3x",
            "size" : "60x60"
          },
          {
            "idiom" : "ipad",
            "scale" : "1x",
            "size" : "20x20"
          },
          {
            "idiom" : "ipad",
            "scale" : "2x",
            "size" : "20x20"
          },
          {
            "idiom" : "ipad",
            "scale" : "1x",
            "size" : "29x29"
          },
          {
            "idiom" : "ipad",
            "scale" : "2x",
            "size" : "29x29"
          },
          {
            "idiom" : "ipad",
            "scale" : "1x",
            "size" : "40x40"
          },
          {
            "idiom" : "ipad",
            "scale" : "2x",
            "size" : "40x40"
          },
          {
            "idiom" : "ipad",
            "scale" : "1x",
            "size" : "76x76"
          },
          {
            "idiom" : "ipad",
            "scale" : "2x",
            "size" : "76x76"
          },
          {
            "idiom" : "ipad",
            "scale" : "2x",
            "size" : "83.5x83.5"
          },
          {
            "idiom" : "ios-marketing",
            "scale" : "1x",
            "size" : "1024x1024"
          }
        ],
        "info" : {
          "author" : "xcode",
          "version" : 1
        }
      }

  - path: "{{ project|replace:' ','_' }}/Assets/Assets.xcassets/Contents.json"
    contents: |
      {
        "info" : {
          "author" : "xcode",
          "version" : 1
        }
      }

  - path: "{{ project|replace:' ','_' }}/BuildSettings/Debug.xcconfig"
    contents: |
      #include "Shared.xcconfig"

  - path: "{{ project|replace:' ','_' }}/BuildSettings/Release.xcconfig"
    contents: |
      #include "Shared.xcconfig"

  - path: "{{ project|replace:' ','_' }}/BuildSettings/Shared.xcconfig"
    contents: |
      ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon
      ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor
      LD_RUNPATH_SEARCH_PATHS = $(inherited) @executable_path/Frameworks
      PRODUCT_NAME = $(TARGET_NAME)
      TARGETED_DEVICE_FAMILY = 1,2

  - path: "{{ project|replace:' ','_' }}/Generated/.gitignore"
    contents: |
      *
      !.gitignore

  - path: "{{ project|replace:' ','_' }}/Resources/Base.lproj/LaunchScreen.storyboard"
    contents: |
      <?xml version="1.0" encoding="UTF-8" standalone="no"?>
      <document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="13122.16" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES" initialViewController="01J-lp-oVM">
          <dependencies>
              <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="13104.12"/>
              <capability name="Safe area layout guides" minToolsVersion="9.0"/>
              <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
          </dependencies>
          <scenes>
              <!--View Controller-->
              <scene sceneID="EHf-IW-A2E">
                  <objects>
                      <viewController id="01J-lp-oVM" sceneMemberID="viewController">
                          <view key="view" contentMode="scaleToFill" id="Ze5-6b-2t3">
                              <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
                              <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                              <color key="backgroundColor" xcode11CocoaTouchSystemColor="systemBackgroundColor" cocoaTouchSystemColor="whiteColor"/>
                              <viewLayoutGuide key="safeArea" id="6Tk-OE-BBY"/>
                          </view>
                      </viewController>
                      <placeholder placeholderIdentifier="IBFirstResponder" id="iYj-Kq-Ea1" userLabel="First Responder" sceneMemberID="firstResponder"/>
                  </objects>
                  <point key="canvasLocation" x="53" y="375"/>
              </scene>
          </scenes>
      </document>

  - path: "{{ project|replace:' ','_' }}/Sources/AppDelegate.swift"
    contents: |
      //
      //  Created by {{ author }} on {{ date }}.
      //

      import UIKit

      @main
      internal final class AppDelegate: UIResponder, UIApplicationDelegate {

          private lazy var appBuilder: AppBuilder = AppBuilderImp { AppComponent() }
          private lazy var appFlow: AppFlow = appBuilder.build()

          internal convenience init(appBuilder: AppBuilder) {
              self.init()
              self.appBuilder = appBuilder
          }

          internal func application(
              _ application: UIApplication, // swiftlint:disable:next discouraged_optional_collection
              didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
          ) -> Bool {
              bootstrap()
              return true
          }

          private func bootstrap() {
              #if DEBUG
              guard appBuilder is AppBuilderImp
              else { return appFlow.start() }
              guard NSClassFromString("XCTestCase") == nil
              else { return }
              #endif
              registerProviderFactories()
              appFlow.start()
          }
      }

  - path: "{{ project|replace:' ','_' }}/Sources/SceneDelegate.swift"
    contents: |
      //
      //  Created by {{ author }} on {{ date }}.
      //

      import UIKit

      internal final class SceneDelegate: UIResponder, UIWindowSceneDelegate {}

  - path: "{{ project|replace:' ','_' }}/Sources/Services/AppService.swift"
    contents: |
      //
      //  Created by {{ author }} on {{ date }}.
      //

      import Combine
      import UIKit

      /// @mockable
      @MainActor
      internal protocol AppService {
          var windowScenePublisher: AnyPublisher<WindowSceneEvent, Never> { get }
      }

      internal final class AppServiceImp: AppService {

          internal var windowScenePublisher: AnyPublisher<WindowSceneEvent, Never> {
              Publishers.Merge(
                  notificationCenter
                      .publisher(for: UIScene.willConnectNotification)
                      .compactMap { $0.object as? UIWindowScene }
                      .map { .willConnect($0) },
                  notificationCenter
                      .publisher(for: UIScene.didDisconnectNotification)
                      .compactMap { $0.object as? UIWindowScene }
                      .map { .didDisconnect($0) })
              .eraseToAnyPublisher()
          }

          private let notificationCenter: NotificationCenter

          internal init(notificationCenter: NotificationCenter = Foundation.NotificationCenter.default) {
              self.notificationCenter = notificationCenter
          }
      }

      internal enum WindowSceneEvent {

          case willConnect(UIWindowScene)
          case didDisconnect(UIWindowScene)

          internal var willConnect: Bool {
              guard case .willConnect = self
              else { return false }
              return true
          }

          internal var didDisconnect: Bool {
              guard case .didDisconnect = self
              else { return false }
              return true
          }

          internal var windowScene: UIWindowScene {
              switch self {
              case let .willConnect(windowScene):
                  return windowScene
              case let .didDisconnect(windowScene):
                  return windowScene
              }
          }
      }

  - path: "{{ project|replace:' ','_' }}/Sources/System/NotificationSystem.swift"
    contents: |
      //
      //  Created by {{ author }} on {{ date }}.
      //

      import Foundation

      /// @mockable
      internal protocol NotificationSystem {
          func publisher(for name: Notification.Name, object: AnyObject?) -> NotificationCenter.Publisher
      }

      extension NotificationSystem {

          internal func publisher(for name: Notification.Name) -> NotificationCenter.Publisher {
              publisher(for: name, object: nil)
          }
      }

      extension NotificationCenter: NotificationSystem {}

  - path: "{{ project|replace:' ','_' }}Tests/.swiftlint.yml"
    contents: |
      disabled_rules:
      - explicit_acl
      - explicit_top_level_acl
      - file_length
      - force_cast
      - force_try
      - force_unwrapping
      - function_body_length
      - implicitly_unwrapped_optional
      - type_body_length
      - weak_delegate

  - path: "{{ project|replace:' ','_' }}Tests/BuildSettings/Debug.xcconfig"
    contents: |
      #include "Shared.xcconfig"

  - path: "{{ project|replace:' ','_' }}Tests/BuildSettings/Release.xcconfig"
    contents: |
      #include "Shared.xcconfig"

  - path: "{{ project|replace:' ','_' }}Tests/BuildSettings/Shared.xcconfig"
    contents: |
      ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES
      BUNDLE_LOADER = $(TEST_HOST)
      LD_RUNPATH_SEARCH_PATHS = $(inherited) @executable_path/Frameworks @loader_path/Frameworks
      PRODUCT_NAME = $(TARGET_NAME)
      TARGETED_DEVICE_FAMILY = 1,2
      TEST_HOST = $(BUILT_PRODUCTS_DIR)/{{ project|replace:' ','_' }}.app/{{ project|replace:' ','_' }}

  - path: "{{ project|replace:' ','_' }}Tests/Generated/.gitignore"
    contents: |
      *
      !.gitignore

  - path: "{{ project|replace:' ','_' }}Tests/Tests/{{ project|replace:' ','_' }}Tests.swift"
    contents: |
      //
      //  Created by {{ author }} on {{ date }}.
      //

      import XCTest

      final class {{ project|replace:' ','' }}Tests: XCTestCase {}

  - path: "{{ project|replace:' ','_' }}UITests/.swiftlint.yml"
    contents: |
      disabled_rules:
      - explicit_acl
      - explicit_top_level_acl
      - file_length
      - force_cast
      - force_try
      - force_unwrapping
      - function_body_length
      - implicitly_unwrapped_optional
      - type_body_length
      - weak_delegate

  - path: "{{ project|replace:' ','_' }}UITests/BuildSettings/Debug.xcconfig"
    contents: |
      #include "Shared.xcconfig"

  - path: "{{ project|replace:' ','_' }}UITests/BuildSettings/Release.xcconfig"
    contents: |
      #include "Shared.xcconfig"

  - path: "{{ project|replace:' ','_' }}UITests/BuildSettings/Shared.xcconfig"
    contents: |
      ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES
      BUNDLE_LOADER = $(TEST_HOST)
      LD_RUNPATH_SEARCH_PATHS = $(inherited) @executable_path/Frameworks @loader_path/Frameworks
      PRODUCT_NAME = $(TARGET_NAME)
      TARGETED_DEVICE_FAMILY = 1,2

  - path: "{{ project|replace:' ','_' }}UITests/Generated/.gitignore"
    contents: |
      *
      !.gitignore

  - path: "{{ project|replace:' ','_' }}UITests/Tests/{{ project|replace:' ','_' }}UITests.swift"
    contents: |
      //
      //  Created by {{ author }} on {{ date }}.
      //

      import Nimble
      import XCTest

      final class {{ project|replace:' ','' }}UITests: XCTestCase {

          private var app: XCUIApplication!

          override func setUp() {
              super.setUp()
              continueAfterFailure = false
              app = XCUIApplication()
              app.launch()
          }

          override func tearDown() {
              app.terminate()
              app = nil
              super.tearDown()
          }

          func testRootViewController() {
              let label: XCUIElement = app.staticTexts["Root View Controller"]
              expect(label.exists) == true
              expect(label.isHittable) == true
          }
      }

  - path: Makefile
    contents: ".PHONY: open\nopen:\n\txcodegen\n"

  - path: Package.swift
    contents: |
      // swift-tools-version:5.9

      import PackageDescription

      let package = Package(
          name: "{{ project|replace:' ','_' }}",
          products: [],
          dependencies: [
              .package(
                  {% if path|replace:' ','' %}
                  path: "{{ path }}"),
                  {% else %}
                  url: "git@github.com:TinderApp/Nodes.git",
                  from: "{{ nodes }}"),
                  {% endif %}
          ],
          targets: [
              .binaryTarget(
                  name: "SwiftLintBinary-{{ project|replace:' ','_' }}",
                  url: "https://github.com/realm/SwiftLint/releases/download/0.54.0/SwiftLintBinary-macos.artifactbundle.zip",
                  checksum: "963121d6babf2bf5fd66a21ac9297e86d855cbc9d28322790646b88dceca00f1"),
          ]
      )

  - path: project.yml
    contents: |
      name: {{ project|replace:' ','_' }}
      options:
        bundleIdPrefix: {{ prefix }}
        deploymentTarget:
          iOS: "15.0"
        defaultConfig: Release
        settingPresets: none
        usesTabs: false
        tabWidth: 4
        indentWidth: 4
        preGenCommand: |
          set -e
          if test -z "$CI"
          then
              WORKSPACE_DOCUMENT_NAME="{{ project|replace:' ','_' }}.xcodeproj"
              osascript \
                  -e 'set workspaceDocumentName to "'"$WORKSPACE_DOCUMENT_NAME"'"' \
                  -e 'if app id "com.apple.dt.Xcode" is running then' \
                  -e 'tell app id "com.apple.dt.Xcode"' \
                  -e 'if workspace document workspaceDocumentName exists then' \
                  -e 'set workspaceDocument to workspace document workspaceDocumentName' \
                  -e 'if loaded of workspaceDocument is false then' \
                  -e 'error "workspace not loaded"' \
                  -e 'end if' \
                  -e 'log "⚙️  Closing project..."' \
                  -e 'tell workspaceDocument' \
                  -e 'stop it' \
                  -e 'delay 0.5' \
                  -e 'close it' \
                  -e 'end tell' \
                  -e 'activate' \
                  -e 'delay 1.5' \
                  -e 'end if' \
                  -e 'end tell' \
                  -e 'end if'
          else
              echo "AppleScript to close the Xcode project is not executed in CI."
          fi
          if test -z "$CI"
          then
              echo "⚙️  Resolving Swift package dependencies..."
              swift package resolve
          else
              echo "Swift package dependencies are not resolved in CI."
          fi
          if ! test -d "{{ project|replace:' ','_' }}/Sources/Bootstrap"
          then
              echo "⚙️  Generating presets..."
              swift build --product nodes-code-gen >/dev/null
              create()
              {
                  if ! test -d "$1"
                  then
                      mkdir -p "$1"
                      PRESET="$(basename "$1")"
                      AUTHOR="$(git config user.name || echo "<Author>")"
                      echo "⚙️  Creating $(echo "$PRESET" | tr '[:upper:]' '[:lower:]') preset..."
                      swift run --skip-build -- nodes-code-gen --preset "$PRESET" --author "$AUTHOR" --path "$1"
                  fi
              }
              create "{{ project|replace:' ','_' }}/Sources/Bootstrap/App"
              create "{{ project|replace:' ','_' }}/Sources/Bootstrap/Scene"
              create "{{ project|replace:' ','_' }}/Sources/Bootstrap/Window"
              create "{{ project|replace:' ','_' }}/Sources/Screens/Root"
          fi
          NEEDLE_GENERATED="{{ project|replace:' ','_' }}/Generated/NeedleGenerated.swift"
          MOCKOLO_GENERATED="{{ project|replace:' ','_' }}Tests/Generated/MockoloGenerated.swift"
          [[ -f "$NEEDLE_GENERATED" ]] || touch "$NEEDLE_GENERATED"
          [[ -f "$MOCKOLO_GENERATED" ]] || touch "$MOCKOLO_GENERATED"
        postGenCommand: |
          set -e
          if test -z "$CI"
          then
              XCSHAREDDATA="{{ project|replace:' ','_' }}.xcodeproj/xcshareddata"
              HEADER=$'\n//  Created by ___FULLUSERNAME___ on ___DATE___.\n//'
              echo "⚙️  Installing Xcode project file header template..."
              mkdir -p "$XCSHAREDDATA"
              /usr/libexec/PlistBuddy -c \
                  "Delete :FILEHEADER" \
                  "${XCSHAREDDATA}/IDETemplateMacros.plist" >/dev/null 2>&1 || true
              /usr/libexec/PlistBuddy -c \
                  "Add :FILEHEADER string ${HEADER}" \
                  "${XCSHAREDDATA}/IDETemplateMacros.plist" >/dev/null 2>&1
          else
              echo "Xcode project file header template is not installed in CI."
          fi
          if test -z "$CI"
          then
              echo "⚙️  Installing Xcode templates..."
              swift build --product nodes-xcode-templates-gen >/dev/null
              swift run --skip-build -- nodes-xcode-templates-gen --id "Xcode Templates"
          else
              echo "Xcode templates are not installed in CI."
          fi
          if test -z "$CI"
          then
              echo "⚙️  Opening project..."
              xed {{ project|replace:' ','_' }}.xcodeproj
          else
              echo "Xcode project is not opened in CI."
          fi
      packages:
        Nodes:
          {% if path|replace:' ','' %}
          path: {{ path }}
          {% else %}
          url: git@github.com:TinderApp/Nodes.git
          from: {{ nodes }}
          {% endif %}
        NeedleFoundation:
          url: https://github.com/uber/needle.git
          from: 0.24.0
        Nimble:
          url: https://github.com/Quick/Nimble.git
          from: 13.0.0
      configFiles:
        Debug: BuildSettings/Debug.xcconfig
        Release: BuildSettings/Release.xcconfig
      fileGroups:
        - BuildSettings
      targets:
        {{ project|replace:' ','_' }}:
          type: application
          platform: iOS
          dependencies:
            - package: Nodes
            - package: NeedleFoundation
          preBuildScripts:
            - name: Nodes
              basedOnDependencyAnalysis: false
              shell: /usr/bin/env xcrun --sdk macosx swift
              script: |
                import Foundation

                func shell(_ arguments: String...) -> Data {
                    let task: Process = .init()
                    let pipe: Pipe = .init()
                    task.standardOutput = pipe
                    task.launchPath = "/usr/bin/env"
                    task.arguments = arguments
                    task.launch()
                    task.waitUntilExit()
                    return pipe.fileHandleForReading.readDataToEndOfFile()
                }

                func json(_ data: Data) throws -> [String: Any]? {
                    try JSONSerialization.jsonObject(with: data) as? [String: Any]
                }

                func skip(_ message: String) -> Never {
                    print(message)
                    exit(EXIT_SUCCESS)
                }

                func fail(_ message: String) -> Never {
                    do {
                        try FileHandle.standardError.write(contentsOf: Data("ERROR: \(message)\n".utf8))
                    } catch {
                        print(error.localizedDescription)
                    }
                    exit(EXIT_FAILURE)
                }

                guard ProcessInfo.processInfo.environment["ENABLE_PREVIEWS"] != "YES"
                else { skip("Nodes dependency validation is skipped when building for SwiftUI previews.") }

                let packageData: Data = shell("swift", "package", "show-dependencies", "--format", "json")

                guard let buildDirectory: String = ProcessInfo.processInfo.environment["BUILD_DIR"]
                else { fail("Environment variable `BUILD_DIR` must be set.") }

                let workspaceState: String = "\(buildDirectory)/../../SourcePackages/workspace-state.json"
                let workspaceData: Data = try .init(contentsOf: URL(fileURLWithPath: workspaceState))

                guard let packageDictionary: [String: Any] = try json(packageData),
                      let packageDependencies: [[String: Any]] = packageDictionary["dependencies"] as? [[String: Any]],
                      let packageDependency: [String: Any] = packageDependencies.first(where: {
                          $0["identity"] as? String == "nodes"
                      }),
                      let packageVersion: String = packageDependency["version"] as? String
                else { fail("Failed to parse package Nodes version.") }

                guard let workspaceDictionary: [String: Any] = try json(workspaceData),
                      let workspaceObject: [String: Any] = workspaceDictionary["object"] as? [String: Any],
                      let workspaceDependencies: [[String: Any]] = workspaceObject["dependencies"] as? [[String: Any]]
                else { fail("Failed to parse project dependencies.") }

                let workspaceDependency: [String: Any]? = workspaceDependencies.first {
                    ($0["packageRef"] as? [String: Any])?["identity"] as? String == "nodes"
                }

                print("Package Nodes Version:", packageVersion)

                if packageVersion == "unspecified" {
                    guard workspaceDependency == nil
                    else {
                        print("Project Nodes Version: specified")
                        fail("Mismatched Nodes versions detected.")
                    }
                    print("Project Nodes Version: unspecified")
                    print("Nodes versions validated successfully.")
                } else {
                    guard let workspaceDependency: [String: Any] = workspaceDependency,
                          let workspaceState: [String: Any] = workspaceDependency["state"] as? [String: Any],
                          let workspaceCheckoutState: [String: Any] = workspaceState["checkoutState"] as? [String: Any],
                          let workspaceVersion: String = workspaceCheckoutState["version"] as? String
                    else { fail("Failed to parse project Nodes version.") }
                    print("Project Nodes Version:", workspaceVersion)
                    guard packageVersion == workspaceVersion
                    else { fail("Mismatched Nodes versions detected.") }
                    print("Nodes versions validated successfully.")
                }
            - name: SwiftLint
              basedOnDependencyAnalysis: false
              script: |
                if test -z "$CI"
                then
                    if [ "$ENABLE_PREVIEWS" = "YES" ]
                    then
                        echo "SwiftLint is skipped when building for SwiftUI previews."
                        exit
                    fi

                    # Ignore Bazel environment variable (if set)
                    # https://bazel.build/docs/user-manual#running-executables
                    # https://github.com/realm/SwiftLint/blob/0.52.4/Source/swiftlint/Commands/SwiftLint.swift#L8
                    unset BUILD_WORKSPACE_DIRECTORY

                    DIRECTORY_NAME="$(echo "${PWD##*/}" | tr '[:upper:]' '[:lower:]')"

                    "$(find ".build/artifacts/${DIRECTORY_NAME}" -type f -name swiftlint -perm +111 -print -quit)"
                else
                    echo "SwiftLint is skipped in CI."
                fi
            - name: Needle
              basedOnDependencyAnalysis: false
              outputFiles:
                - $(SRCROOT)/Generated/NeedleGenerated.swift
              script: >
                env SOURCEKIT_LOGGING=0
                needle generate "{{ project|replace:' ','_' }}/Generated/NeedleGenerated.swift"
                "{{ project|replace:' ','_' }}/Sources"
          sources: {{ project|replace:' ','_' }}
          scheme:
            testTargets:
              - {{ project|replace:' ','_' }}Tests
              - {{ project|replace:' ','_' }}UITests
          configFiles:
            Debug: {{ project|replace:' ','_' }}/BuildSettings/Debug.xcconfig
            Release: {{ project|replace:' ','_' }}/BuildSettings/Release.xcconfig
          info:
            path: {{ project|replace:' ','_' }}/Generated/Info.plist
            properties:
              CFBundleDevelopmentRegion: $(DEVELOPMENT_LANGUAGE)
              CFBundleDisplayName: {{ project|replace:' ','_' }}
              CFBundleExecutable: $(EXECUTABLE_NAME)
              CFBundleIdentifier: $(PRODUCT_BUNDLE_IDENTIFIER)
              CFBundleInfoDictionaryVersion: "6.0"
              CFBundleName: $(PRODUCT_NAME)
              CFBundlePackageType: $(PRODUCT_BUNDLE_PACKAGE_TYPE)
              CFBundleShortVersionString: "1.0"
              CFBundleVersion: "1"
              LSRequiresIPhoneOS: true
              UIApplicationSceneManifest:
                UIApplicationSupportsMultipleScenes: true
                UISceneConfigurations:
                  UIWindowSceneSessionRoleApplication:
                    - UISceneConfigurationName: Default Configuration
                      UISceneDelegateClassName: $(PRODUCT_MODULE_NAME).SceneDelegate
              UIApplicationSupportsIndirectInputEvents: true
              UILaunchStoryboardName: LaunchScreen
              UIRequiredDeviceCapabilities:
                - armv7
              UISupportedInterfaceOrientations:
                - UIInterfaceOrientationPortrait
                - UIInterfaceOrientationLandscapeLeft
                - UIInterfaceOrientationLandscapeRight
              UISupportedInterfaceOrientations~ipad:
                - UIInterfaceOrientationPortrait
                - UIInterfaceOrientationPortraitUpsideDown
                - UIInterfaceOrientationLandscapeLeft
                - UIInterfaceOrientationLandscapeRight
        {{ project|replace:' ','_' }}Tests:
          type: bundle.unit-test
          platform: iOS
          dependencies:
            - target: {{ project|replace:' ','_' }}
            - package: Nodes
              product: NodesTesting
            - package: Nimble
          preBuildScripts:
            - name: Mockolo
              basedOnDependencyAnalysis: false
              outputFiles:
                - $(SRCROOT)/Generated/MockoloGenerated.swift
              script: >
                mockolo
                -i "{{ project|replace:' ','_' }}"
                -s "{{ project|replace:' ','_' }}/Sources"
                {% if path|replace:' ','' %}
                -s "{{ path }}/Sources/Nodes/Core/Protocols"
                -s "{{ path }}/Sources/Nodes/UIKit/Protocols"
                -s "{{ path }}/Sources/Nodes/ViewControllable/Protocols"
                {% else %}
                -s "${BUILD_DIR%Build/*}/SourcePackages/checkouts/Nodes/Sources/Nodes/Core/Protocols"
                -s "${BUILD_DIR%Build/*}/SourcePackages/checkouts/Nodes/Sources/Nodes/UIKit/Protocols"
                -s "${BUILD_DIR%Build/*}/SourcePackages/checkouts/Nodes/Sources/Nodes/ViewControllable/Protocols"
                {% endif %}
                -c "Nodes"
                -d "{{ project|replace:' ','_' }}Tests/Generated/MockoloGenerated.swift"
          sources: {{ project|replace:' ','_' }}Tests
          configFiles:
            Debug: {{ project|replace:' ','_' }}Tests/BuildSettings/Debug.xcconfig
            Release: {{ project|replace:' ','_' }}Tests/BuildSettings/Release.xcconfig
          info:
            path: {{ project|replace:' ','_' }}Tests/Generated/Info.plist
            properties:
              CFBundleDevelopmentRegion: $(DEVELOPMENT_LANGUAGE)
              CFBundleExecutable: $(EXECUTABLE_NAME)
              CFBundleIdentifier: $(PRODUCT_BUNDLE_IDENTIFIER)
              CFBundleInfoDictionaryVersion: "6.0"
              CFBundleName: $(PRODUCT_NAME)
              CFBundlePackageType: $(PRODUCT_BUNDLE_PACKAGE_TYPE)
              CFBundleShortVersionString: "1.0"
              CFBundleVersion: "1"
        {{ project|replace:' ','_' }}UITests:
          type: bundle.ui-testing
          platform: iOS
          dependencies:
            - target: {{ project|replace:' ','_' }}
            - package: Nimble
          sources: {{ project|replace:' ','_' }}UITests
          configFiles:
            Debug: {{ project|replace:' ','_' }}UITests/BuildSettings/Debug.xcconfig
            Release: {{ project|replace:' ','_' }}UITests/BuildSettings/Release.xcconfig
          info:
            path: {{ project|replace:' ','_' }}UITests/Generated/Info.plist
            properties:
              CFBundleDevelopmentRegion: $(DEVELOPMENT_LANGUAGE)
              CFBundleExecutable: $(EXECUTABLE_NAME)
              CFBundleIdentifier: $(PRODUCT_BUNDLE_IDENTIFIER)
              CFBundleInfoDictionaryVersion: "6.0"
              CFBundleName: $(PRODUCT_NAME)
              CFBundlePackageType: $(PRODUCT_BUNDLE_PACKAGE_TYPE)
              CFBundleShortVersionString: "1.0"
              CFBundleVersion: "1"

  - path: README.md
    contents: |
      # {{ project }}

      ## Project Setup

      ### Install Dependencies

      ```
      brew install xcodegen needle mockolo
      ```

      ### Generate Xcode Project

      ```
      xcodegen
      ```

      Execute the `xcodegen` command any time the `project.yml` file is changed or project files are added or removed. See the [xcodegen](https://github.com/yonaskolb/XcodeGen) documentation for more information.
